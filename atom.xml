<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ankang</title>
  <icon>https://www.gravatar.com/avatar/c4114f39e729347bafc2f1759865816e</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ankang.icu/"/>
  <updated>2021-03-18T00:12:49.262Z</updated>
  <id>http://ankang.icu/</id>
  
  <author>
    <name>ankang</name>
    <email>ankangz98@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据类型转换与运算符</title>
    <link href="http://ankang.icu/2021/03/18/21-03-18/"/>
    <id>http://ankang.icu/2021/03/18/21-03-18/</id>
    <published>2021-03-18T00:03:46.000Z</published>
    <updated>2021-03-18T00:12:49.262Z</updated>
    
    <content type="html"><![CDATA[<ol><li>字符串、布尔值、数值之间的转换</li><li>运算符</li><li>运算有关的一些条件判断。</li></ol><a id="more"></a><h3 id="字符串转换数值："><a href="#字符串转换数值：" class="headerlink" title="字符串转换数值："></a>字符串转换数值：</h3><ol><li><h4 id="强制转换数值：通过Number-构造函数。"><a href="#强制转换数值：通过Number-构造函数。" class="headerlink" title="强制转换数值：通过Number();构造函数。"></a>强制转换数值：通过Number();构造函数。</h4><ul><li><h5 id="如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。"><a href="#如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。" class="headerlink" title="如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。"></a>如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。</h5><blockquote><h6 id="NaN：是非数值，类型属于数值类型"><a href="#NaN：是非数值，类型属于数值类型" class="headerlink" title="NaN：是非数值，类型属于数值类型"></a>NaN：是非数值，类型属于数值类型</h6></blockquote></li></ul></li><li><h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt();"></a>parseInt();</h4><ul><li><h5 id="转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。"><a href="#转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。" class="headerlink" title="转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。"></a>转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。</h5></li><li><h5 id="取整，小数点后省略。"><a href="#取整，小数点后省略。" class="headerlink" title="取整，小数点后省略。"></a><strong>取整</strong>，<em>小数点后省略。</em></h5></li><li><h5 id="第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。"><a href="#第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。" class="headerlink" title="第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。"></a>第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。</h5></li></ul></li><li><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat();"></a>parseFloat();</h4><ul><li><h5 id="保留小数点"><a href="#保留小数点" class="headerlink" title="保留小数点"></a>保留小数点</h5></li></ul><blockquote><ul><li><h6 id="Number强制转换会将布尔值转换为数值，true-gt-1-false-gt-0"><a href="#Number强制转换会将布尔值转换为数值，true-gt-1-false-gt-0" class="headerlink" title="Number强制转换会将布尔值转换为数值，true==&gt;1,false==&gt;0"></a>Number强制转换会将布尔值转换为数值，true==&gt;1,false==&gt;0</h6></li><li><h6 id="parseInt-的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt-首先会自动隐式转换为字符串。"><a href="#parseInt-的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt-首先会自动隐式转换为字符串。" class="headerlink" title="parseInt 的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt 首先会自动隐式转换为字符串。"></a>parseInt 的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt 首先会自动隐式转换为字符串。</h6></li></ul></blockquote></li></ol><h3 id="布尔值转换为字符串："><a href="#布尔值转换为字符串：" class="headerlink" title="布尔值转换为字符串："></a>布尔值转换为字符串：</h3><ol><li><h4 id="都是直接变成字符串-String"><a href="#都是直接变成字符串-String" class="headerlink" title="都是直接变成字符串 String();"></a>都是直接变成字符串 String();</h4></li></ol><h3 id="字符，数值变成布尔值："><a href="#字符，数值变成布尔值：" class="headerlink" title="字符，数值变成布尔值："></a>字符，数值变成布尔值：</h3><ol><li><h4 id="强制转换布尔值"><a href="#强制转换布尔值" class="headerlink" title="强制转换布尔值"></a>强制转换布尔值</h4><ul><li><h5 id="以下几种强转布尔值时会变为false-其他的都是true。"><a href="#以下几种强转布尔值时会变为false-其他的都是true。" class="headerlink" title="以下几种强转布尔值时会变为false,其他的都是true。"></a>以下几种强转布尔值时会变为false,其他的都是true。</h5><blockquote><h6 id="0-；””-；false-；NaN-；undefined-；null。"><a href="#0-；””-；false-；NaN-；undefined-；null。" class="headerlink" title="0    ；””    ；false    ；NaN    ；undefined    ；null。"></a>0    ；””    ；false    ；NaN    ；undefined    ；null。</h6></blockquote></li><li><h5 id="Boolean-0-Boolean-“”-Boolean-NaN"><a href="#Boolean-0-Boolean-“”-Boolean-NaN" class="headerlink" title="Boolean(0);Boolean(“”);Boolean(NaN);"></a>Boolean(0);Boolean(“”);Boolean(NaN);</h5></li></ul></li></ol><h3 id="将undefined转换为数值-gt-NaN"><a href="#将undefined转换为数值-gt-NaN" class="headerlink" title="将undefined转换为数值==&gt; NaN;"></a>将undefined转换为数值==&gt; NaN;</h3><ul><li><h4 id="console-log-Number-undefined"><a href="#console-log-Number-undefined" class="headerlink" title="console.log(Number(undefined);"></a>console.log(Number(undefined);</h4></li></ul><h3 id="将null转换为数值-gt-0"><a href="#将null转换为数值-gt-0" class="headerlink" title="将null转换为数值==&gt; 0;"></a>将null转换为数值==&gt; 0;</h3><ul><li><h4 id="console-log-Number-null"><a href="#console-log-Number-null" class="headerlink" title="console.log(Number(null);"></a>console.log(Number(null);</h4></li></ul><h3 id="将对象转换为数值-gt-NaN"><a href="#将对象转换为数值-gt-NaN" class="headerlink" title="将对象转换为数值==&gt; NaN;"></a>将对象转换为数值==&gt; NaN;</h3><ul><li><h4 id="console-log-Number-a-1"><a href="#console-log-Number-a-1" class="headerlink" title="console.log(Number({a:1}));"></a>console.log(Number({a:1}));</h4></li></ul><h3 id="将对象转换为字符串-gt-object-Object"><a href="#将对象转换为字符串-gt-object-Object" class="headerlink" title="将对象转换为字符串==&gt; [object Object]"></a>将对象转换为字符串==&gt; [object Object]</h3><ul><li><h4 id="console-log-String-a-1"><a href="#console-log-String-a-1" class="headerlink" title="console.log(String({a:1}));"></a>console.log(String({a:1}));</h4></li><li><blockquote><h5 id="所有的任何对象转换为字符串都这样"><a href="#所有的任何对象转换为字符串都这样" class="headerlink" title="所有的任何对象转换为字符串都这样"></a>所有的任何对象转换为字符串都这样</h5></blockquote></li></ul><h3 id="string，number，boolean，undefined，null-都是存在内存的栈中。"><a href="#string，number，boolean，undefined，null-都是存在内存的栈中。" class="headerlink" title="string，number，boolean，undefined，null 都是存在内存的栈中。"></a>string，number，boolean，undefined，null 都是存在内存的栈中。</h3><ul><li><h4 id="栈中数据读取速度快，但是可以存储的数据较小。"><a href="#栈中数据读取速度快，但是可以存储的数据较小。" class="headerlink" title="栈中数据读取速度快，但是可以存储的数据较小。"></a>栈中数据读取速度快，但是可以存储的数据较小。</h4></li></ul><h3 id="object是存放在内存的堆中。"><a href="#object是存放在内存的堆中。" class="headerlink" title="object是存放在内存的堆中。"></a>object是存放在内存的堆中。</h3><ul><li><h4 id="堆中可以存储大量的数据，但是读取速度慢。"><a href="#堆中可以存储大量的数据，但是读取速度慢。" class="headerlink" title="堆中可以存储大量的数据，但是读取速度慢。"></a>堆中可以存储大量的数据，但是读取速度慢。</h4></li></ul><h3 id="所有的基础类型都是基于Object构建而成。"><a href="#所有的基础类型都是基于Object构建而成。" class="headerlink" title="所有的基础类型都是基于Object构建而成。"></a>所有的基础类型都是基于Object构建而成。</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line">a.toString();</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;<span class="comment">//数据 number存储在栈中typeof==&gt;number</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">5</span>);<span class="comment">//数值对象 Number存储在堆中typeof==&gt;object</span></span><br><span class="line"><span class="comment">//number可以理解为Number类型在栈中的映射。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h3><ol><li><h4 id="算数运算符："><a href="#算数运算符：" class="headerlink" title="算数运算符："></a>算数运算符：</h4><ol><li><h5 id="；"><a href="#；" class="headerlink" title="+    - * /；"></a><code>+    - * /</code>；</h5></li><li><h5 id="取模-取余；"><a href="#取模-取余；" class="headerlink" title="%取模==取余；"></a><code>%</code>取模==取余；</h5></li><li><h5 id="字符相加：首尾相连"><a href="#字符相加：首尾相连" class="headerlink" title="字符相加：首尾相连"></a>字符相加：首尾相连</h5><ul><li><h6 id="隐式转换-自动默认使用目标类型的构造函数强制转换-String"><a href="#隐式转换-自动默认使用目标类型的构造函数强制转换-String" class="headerlink" title="隐式转换 自动默认使用目标类型的构造函数强制转换 String()"></a>隐式转换 自动默认使用目标类型的构造函数强制转换 <code>String()</code></h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;+<span class="string">""</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="数值-布尔值会隐式转为数值相加"><a href="#数值-布尔值会隐式转为数值相加" class="headerlink" title="数值+布尔值会隐式转为数值相加"></a>数值+布尔值会隐式转为数值相加</h6></li><li><h6 id="数值-undefined会隐式转为数值相加-NaN。"><a href="#数值-undefined会隐式转为数值相加-NaN。" class="headerlink" title="数值+undefined会隐式转为数值相加 NaN。"></a>数值+undefined会隐式转为数值相加 NaN。</h6></li><li><h6 id="null隐式转换为0。"><a href="#null隐式转换为0。" class="headerlink" title="null隐式转换为0。"></a>null隐式转换为0。</h6><blockquote><ul><li>数值与除了字符串外的非数值相加都会隐式转换为数值类型相加</li><li>布尔值、undefined。null相加都会转换为数值</li></ul></blockquote></li><li><h5 id="除了-以外，-，-，-，-都会依照数值运算先将所有其他类型转换为数值后运算。"><a href="#除了-以外，-，-，-，-都会依照数值运算先将所有其他类型转换为数值后运算。" class="headerlink" title="除了+以外，-，*，/，% 都会依照数值运算先将所有其他类型转换为数值后运算。"></a>除了+以外，-，*，/，% 都会依照数值运算先将所有其他类型转换为数值后运算。</h5></li></ol></li><li><h4 id="赋值运算符和一元运算符："><a href="#赋值运算符和一元运算符：" class="headerlink" title="赋值运算符和一元运算符："></a>赋值运算符和一元运算符：</h4><ol><li><h5 id="，-，"><a href="#，-，" class="headerlink" title="+=，-=，*=,/="></a><code>+=，-=，*=,/=</code></h5><blockquote><ol><li><h5 id="var-b-a-2"><a href="#var-b-a-2" class="headerlink" title="var b=a=2;"></a><code>var b=a=2;</code></h5><ul><li><h6 id="先将a-2的结果赋值给b"><a href="#先将a-2的结果赋值给b" class="headerlink" title="先将a=2的结果赋值给b"></a>先将a=2的结果赋值给b</h6></li><li><h6 id="再将2赋值给a"><a href="#再将2赋值给a" class="headerlink" title="再将2赋值给a"></a>再将2赋值给a</h6></li></ul></li><li><h5 id="var-a-5-a-a-a-2-gt-a-7"><a href="#var-a-5-a-a-a-2-gt-a-7" class="headerlink" title="var a=5;a=a=a+2;===&gt; a=7;"></a><code>var a=5;a=a=a+2;</code>===&gt; a=7;</h5></li></ol><ul><li><h6 id="同时进行，后面的a-a-2不会用前边的a-7。"><a href="#同时进行，后面的a-a-2不会用前边的a-7。" class="headerlink" title="同时进行，后面的a=a+2不会用前边的a=7。"></a>同时进行，后面的<code>a=a+2</code>不会用前边的<code>a=7</code>。</h6></li></ul><ol start="3"><li><h5 id="a-2-步长，累加"><a href="#a-2-步长，累加" class="headerlink" title="a+=2;  步长，累加"></a><code>a+=2;</code>  步长，累加</h5></li><li><h5 id="var-a-quot-10-quot-a-0-隐式转换为数值"><a href="#var-a-quot-10-quot-a-0-隐式转换为数值" class="headerlink" title="var a=&quot;10&quot;;a-=0;隐式转换为数值"></a><code>var a=&quot;10&quot;;a-=0;</code>隐式转换为数值</h5><ul><li><h6 id="console-log-a-gt-10"><a href="#console-log-a-gt-10" class="headerlink" title="console.log(a);==&gt;10"></a>console.log(a);==&gt;10</h6></li></ul></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;    var a=1,b=2,c=3;</span><br><span class="line">&gt;    a+=1,b+=2,c+=3;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><blockquote><h6 id="有赋值，中间就可以逗号连接。"><a href="#有赋值，中间就可以逗号连接。" class="headerlink" title="有赋值，中间就可以逗号连接。"></a>有赋值，中间就可以逗号连接。</h6></blockquote></blockquote></li><li><h5 id><a href="#" class="headerlink" title="++"></a><code>++</code></h5><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">"3"</span>;</span><br><span class="line">a++;<span class="comment">//会隐式转换为数值在进行运算</span></span><br><span class="line">a+=<span class="number">1</span>;<span class="comment">//参照算数运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span><span class="number">.1</span>og(++a+a+++a+a+++a+a,a);==&gt;(<span class="number">24</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=a++;<span class="comment">//b:1 a:2</span></span><br><span class="line"><span class="keyword">var</span> b=++a;<span class="comment">//b:2 a:2</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><h5 id="关系运算符和逻辑运算符："><a href="#关系运算符和逻辑运算符：" class="headerlink" title="关系运算符和逻辑运算符："></a>关系运算符和逻辑运算符：</h5><ol><li><h6 id="lt-lt-gt-gt-返回布尔值"><a href="#lt-lt-gt-gt-返回布尔值" class="headerlink" title="&lt; &lt;= &gt; &gt;= 返回布尔值"></a><code>&lt; &lt;= &gt; &gt;=</code> 返回布尔值</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">4</span>;</span><br><span class="line">a=a-a&gt;<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="返回布尔值"><a href="#返回布尔值" class="headerlink" title="== === != !==返回布尔值"></a><code>== === != !==</code>返回布尔值</h6><ul><li><p><code>==    !=</code>会自动隐式转换为两端相同后比较</p></li><li><p><code>===  !==</code>不转换类型，除了比较值以外还会比较类型</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>==<span class="string">"1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>==<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>===<span class="literal">true</span>);</span><br><span class="line">相等类型：</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>==<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="string">""</span>);</span><br><span class="line">相等：</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>==<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>0 false &quot;&quot;</code>==&gt;相等</p></li><li><p><code>null undefined</code>==&gt;相等 表示空或者未赋值</p></li><li><p><code>console.log(NaN==NaN);</code>==&gt;不等</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">"4a"</span>;</span><br><span class="line"><span class="comment">// console. log(Number(a)==NaN)//不能用==NaN判断非数值</span></span><br><span class="line"><span class="comment">// console. log(isNaN(Number(a)));</span></span><br><span class="line"><span class="built_in">console</span><span class="number">.1</span>og(<span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(a)));</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//都是判断数值类型，非数值类型，不隐式转换返回false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(a));</span><br><span class="line"><span class="comment">//会先隐式转换为数值，然后在判断是否是非数值</span></span><br><span class="line"><span class="comment">// console.log(isNaN(a));</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>取反，取布尔值的反</p><ul><li>如果是布尔值就会变成相反的结果true==&gt;false,false==&gt;true;</li><li>如果不是布尔值就会隐式转换为布尔值，然后再取反。</li></ul></li></ul></li><li><h6 id="amp-amp-返回的值根据内容确定，不一定是布尔值。"><a href="#amp-amp-返回的值根据内容确定，不一定是布尔值。" class="headerlink" title="&amp;&amp; || 返回的值根据内容确定，不一定是布尔值。"></a><code>&amp;&amp; ||</code> 返回的值根据内容确定，不一定是布尔值。</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a&gt;<span class="number">2</span> &amp;&amp; a&lt;<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a&gt;<span class="number">5</span> || a&lt;<span class="number">4</span>);</span><br><span class="line">a=a<span class="number">-3</span> || <span class="number">1</span>；</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li><li><h6 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h6><ul><li><h6 id="true"><a href="#true" class="headerlink" title="true"></a>true</h6><blockquote><p>true || true    ==&gt;    返回前面的值</p><p>true || false    ==&gt;    返回隐式转换布尔值为true的值</p><p>false || true    ==&gt;    返回隐式转换布尔值为true的值</p><p>false || false    ==&gt;    返回最后一个false的值</p></blockquote></li><li><p>false</p><blockquote><p>true &amp;&amp; true    ==&gt;    返回第二个true的结果</p><p>true &amp;&amp; false    ==&gt;    返回false的结果</p><p>false &amp;&amp; true    ==&gt;    返回false的结果</p><p>false &amp;&amp; false    ==&gt;    返回第一个false的结果</p></blockquote></li></ul></li><li><p>在if语句判断赋值时也会出现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line">o=<span class="number">0</span> || &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;或者</span><br><span class="line"><span class="keyword">if</span>(!o)&#123;</span><br><span class="line">    <span class="comment">//if判断变量o是否已经赋值，只有o等于 6 种值时（变量o未赋值），会进入if语句块，对o重新赋值</span></span><br><span class="line">    o=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><ol start="4"><li><h5 id="位运算符："><a href="#位运算符：" class="headerlink" title="位运算符："></a>位运算符：</h5><ol><li><h5 id="位非：加一取负；"><a href="#位非：加一取负；" class="headerlink" title="~位非：加一取负；"></a><code>~</code>位非：加一取负；</h5><h6 id="：双非，还原取整，任何内容转换为数值；"><a href="#：双非，还原取整，任何内容转换为数值；" class="headerlink" title="~~：双非，还原取整，任何内容转换为数值；"></a><code>~~</code>：双非，还原取整，任何内容转换为数值；</h6><ul><li><h6 id="非数值变为0；"><a href="#非数值变为0；" class="headerlink" title="非数值变为0；"></a>非数值变为0；</h6></li><li><h6 id="其他变为数值；"><a href="#其他变为数值；" class="headerlink" title="其他变为数值；"></a>其他变为数值；</h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">-1</span>;</span><br><span class="line">位非变为<span class="number">0</span>；</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"abcd"</span>;</span><br><span class="line"><span class="comment">//str.indexof("f")==&gt;当找不到会返回 -1；</span></span><br><span class="line"><span class="keyword">if</span>(~str.indexof(<span class="string">"d"</span>))&#123;</span><br><span class="line"><span class="comment">//表示能找到的话进入if语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!~str.indexof(<span class="string">"d"</span>))&#123;</span><br><span class="line">    <span class="comment">//表示找不到进入if语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="amp-与运算"><a href="#amp-与运算" class="headerlink" title="&amp;与运算"></a><code>&amp;</code>与运算</h5><ul><li><h6 id="任何数-amp-2的结果：2-0"><a href="#任何数-amp-2的结果：2-0" class="headerlink" title="任何数 &amp;2的结果：2/0"></a>任何数 <code>&amp;2</code>的结果：2/0</h6></li><li><h6 id="任何数-amp-3的结果：3-2-1-0"><a href="#任何数-amp-3的结果：3-2-1-0" class="headerlink" title="任何数 &amp;3的结果：3/2/1/0\"></a>任何数 <code>&amp;3</code>的结果：3/2/1/0\</h6></li></ul></li><li><h5 id="或运算"><a href="#或运算" class="headerlink" title="|或运算"></a><code>|</code>或运算</h5></li><li><h5 id="异或：相同为0，不同为1；"><a href="#异或：相同为0，不同为1；" class="headerlink" title="^异或：相同为0，不同为1；"></a><code>^</code>异或：相同为0，不同为1；</h5><ul><li><h6 id="对称加密；"><a href="#对称加密；" class="headerlink" title="对称加密；"></a>对称加密；</h6></li><li><h6 id="非对称加密；"><a href="#非对称加密；" class="headerlink" title="非对称加密；"></a>非对称加密；</h6></li></ul></li><li><h5 id="左移-lt-lt-32个字节-4位-到头变成1"><a href="#左移-lt-lt-32个字节-4位-到头变成1" class="headerlink" title="左移 &lt;&lt;  32个字节 4位 到头变成1"></a>左移 <code>&lt;&lt;</code>  32个字节 4位 到头变成1</h5></li><li><h5 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移 &gt;&gt;"></a>右移 <code>&gt;&gt;</code></h5></li></ol></li><li><h5 id="三目运算符：-条件运算符"><a href="#三目运算符：-条件运算符" class="headerlink" title="三目运算符：/条件运算符"></a>三目运算符：/条件运算符</h5><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b=a&gt;<span class="number">3</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果a&gt;3，返回1 否则0；</span></span><br></pre></td></tr></table></figure></li><li><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=a&gt;<span class="number">1</span> ? <span class="number">10</span> : a&lt;<span class="number">0</span> ? <span class="number">5</span> : <span class="number">0</span>;<span class="comment">//b=?</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">a -=<span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"><span class="comment">//a -=0 ? 0 : 1;</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h3 id="运算有关的条件判断："><a href="#运算有关的条件判断：" class="headerlink" title="运算有关的条件判断："></a>运算有关的条件判断：</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a==<span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="comment">//var a;</span></span><br><span class="line">    <span class="comment">//var a=undefined;</span></span><br><span class="line">    <span class="comment">//var a=null;当a等于这些值的时候，才被允许进入if语句；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//var a=false;</span></span><br><span class="line">    <span class="comment">//var a="";</span></span><br><span class="line">    <span class="comment">//var a="     ";</span></span><br><span class="line">    <span class="comment">//var a=0;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// var a=undefined</span></span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="comment">//只有a未定义的时候才符合条件;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    <span class="comment">//if条件返回值为true/false；</span></span><br><span class="line">    <span class="comment">//当返回值为true时，进入条件语句块，返回的值不是布尔值时，会自动隐式转换为布尔值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0undefinednull""falseNaN;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//true;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0undefinednull""falseNaN;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0""false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!a)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0""falseundefinednullNaN;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><h4 id="console-log-gt-false"><a href="#console-log-gt-false" class="headerlink" title="console.log([]==[]);==&gt;false"></a><code>console.log([]==[]);</code>==&gt;false</h4><ul><li><h5 id="数组是对象类型，也就是引用类型"><a href="#数组是对象类型，也就是引用类型" class="headerlink" title="数组是对象类型，也就是引用类型"></a>数组是对象类型，也就是引用类型</h5></li></ul><h4 id="console-log-gt-true"><a href="#console-log-gt-true" class="headerlink" title="console.log([]==![]);==&gt;true"></a><code>console.log([]==![]);</code>==&gt;true</h4><ul><li><h5 id="因为-quot-quot-false"><a href="#因为-quot-quot-false" class="headerlink" title="因为 &quot;&quot;==false"></a>因为 <code>&quot;&quot;==false</code></h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[1,2,3]==&gt;"1,2,3";</span></span><br><span class="line"><span class="comment">//[1]==&gt;"1";</span></span><br><span class="line"><span class="comment">//[]==&gt;""</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.log([1]==1);</span></span><br><span class="line"><span class="comment">//console.log([]==0);</span></span><br><span class="line"><span class="comment">//console.log([]==null);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="进制："><a href="#进制：" class="headerlink" title="进制："></a>进制：</h3><ol><li><h4 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h4></li><li><h4 id="ASCII-GB2312-GB5"><a href="#ASCII-GB2312-GB5" class="headerlink" title="ASCII  GB2312 GB5"></a>ASCII  GB2312 GB5</h4></li><li><h4 id="Unicode-万国码-（UTF-8使用八进制的万国码）"><a href="#Unicode-万国码-（UTF-8使用八进制的万国码）" class="headerlink" title="Unicode 万国码 （UTF-8使用八进制的万国码）"></a>Unicode 万国码 （UTF-8使用八进制的万国码）</h4></li></ol><h3 id="图像：像素点"><a href="#图像：像素点" class="headerlink" title="图像：像素点"></a>图像：像素点</h3><ul><li><h4 id="每英寸96个像素点-gt-字"><a href="#每英寸96个像素点-gt-字" class="headerlink" title="每英寸96个像素点 ==&gt;字"></a>每英寸96个像素点 ==&gt;字</h4></li><li><h4 id="每英寸72个像素点-gt-图"><a href="#每英寸72个像素点-gt-图" class="headerlink" title="每英寸72个像素点 ==&gt;图"></a>每英寸72个像素点 ==&gt;图</h4></li><li><h4 id="一个颜色占4个字节-一英寸图片（72-4-288B）"><a href="#一个颜色占4个字节-一英寸图片（72-4-288B）" class="headerlink" title="一个颜色占4个字节 一英寸图片（72*4=288B）"></a>一个颜色占4个字节 一英寸图片（72*4=288B）</h4></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;字符串、布尔值、数值之间的转换&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;运算有关的一些条件判断。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Study" scheme="http://ankang.icu/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript基础</title>
    <link href="http://ankang.icu/2021/03/17/21-03-17/"/>
    <id>http://ankang.icu/2021/03/17/21-03-17/</id>
    <published>2021-03-16T23:50:30.000Z</published>
    <updated>2021-03-17T12:52:14.140Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h5 id="JavaScript的引入方式"><a href="#JavaScript的引入方式" class="headerlink" title="JavaScript的引入方式"></a>JavaScript的引入方式</h5></li><li><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5></li><li><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5></li><li><h5 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h5></li></ol><a id="more"></a><h3 id="脚本后的标签调用不到"><a href="#脚本后的标签调用不到" class="headerlink" title="脚本后的标签调用不到"></a>脚本后的标签调用不到</h3><h3 id="标签上的script脚本"><a href="#标签上的script脚本" class="headerlink" title="标签上的script脚本"></a>标签上的script脚本</h3><ul><li><h4 id="HTML标签中只有事件可以添加JS"><a href="#HTML标签中只有事件可以添加JS" class="headerlink" title="HTML标签中只有事件可以添加JS"></a>HTML标签中只有事件可以添加JS</h4></li><li><h4 id="超链接a的href中可以添加javascript-console-log-‘abc’"><a href="#超链接a的href中可以添加javascript-console-log-‘abc’" class="headerlink" title="超链接a的href中可以添加javascript:console.log(‘abc’);"></a>超链接a的href中可以添加<code>javascript:console.log(‘abc’);</code></h4><ol><li><h5 id="lt-a-href-quot-javascript-console-log-39-cde-39-quot-gt-超链接-lt-a-gt"><a href="#lt-a-href-quot-javascript-console-log-39-cde-39-quot-gt-超链接-lt-a-gt" class="headerlink" title="&lt;a href=&quot;javascript:console.log(&#39;cde&#39;)&quot;&gt;超链接&lt;/a&gt;"></a><code>&lt;a href=&quot;javascript:console.log(&#39;cde&#39;)&quot;&gt;超链接&lt;/a&gt;</code></h5></li><li><h5 id="lt-a-href-quot-javascript-void-0-quot-gt-超链接-lt-a-gt"><a href="#lt-a-href-quot-javascript-void-0-quot-gt-超链接-lt-a-gt" class="headerlink" title="&lt;a href=&quot;javascript:void(0)&quot;&gt;超链接&lt;/a&gt;"></a><code>&lt;a href=&quot;javascript:void(0)&quot;&gt;超链接&lt;/a&gt;</code></h5></li><li><h5 id="lt-a-href-quot-quot-gt-超链接-lt-a-gt"><a href="#lt-a-href-quot-quot-gt-超链接-lt-a-gt" class="headerlink" title="&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;"></a><code>&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;</code></h5><blockquote><h5 id="void-0-不会产生浏览记录。-可以刷新页面"><a href="#void-0-不会产生浏览记录。-可以刷新页面" class="headerlink" title="void(0)不会产生浏览记录。#可以刷新页面"></a>void(0)不会产生浏览记录。#可以刷新页面</h5></blockquote></li></ol></li></ul><h3 id="外部引入1"><a href="#外部引入1" class="headerlink" title="外部引入1"></a>外部引入1</h3><h4 id="写下head标签内部"><a href="#写下head标签内部" class="headerlink" title="写下head标签内部"></a>写下<code>head</code>标签内部</h4><p><code>&lt;script src=&quot;./a.js&quot;&gt;&lt;/script&gt;</code></p><h5 id="拥塞-同步"><a href="#拥塞-同步" class="headerlink" title="拥塞  同步"></a><strong>拥塞  <em>同步</em></strong></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./a.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./b.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容"><a href="#当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容" class="headerlink" title="当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容"></a>当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容</h6><p><strong>拥塞  <em>异步</em></strong></p><h6 id="当script标签中添加async可以同时加载"><a href="#当script标签中添加async可以同时加载" class="headerlink" title="当script标签中添加async可以同时加载"></a>当script标签中添加<code>async</code>可以同时加载</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./a.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./b.js"</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="defer-在最后执行的代码"><a href="#defer-在最后执行的代码" class="headerlink" title="defer 在最后执行的代码"></a><code>defer</code> 在最后执行的代码</h4><blockquote><p><em>a.js中想要调用b.js的内容</em></p></blockquote><h3 id="DOM树-CSS树-gt-gt-渲染树"><a href="#DOM树-CSS树-gt-gt-渲染树" class="headerlink" title="DOM树+CSS树===&gt;&gt;渲染树"></a>DOM树+CSS树===&gt;&gt;渲染树</h3><h3 id="外部导入2"><a href="#外部导入2" class="headerlink" title="外部导入2"></a>外部导入2</h3><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line">import a from "./b.js";</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><h5 id="标签中，script中都可，行注释：Ctrl-块注释：alt-shift-A。"><a href="#标签中，script中都可，行注释：Ctrl-块注释：alt-shift-A。" class="headerlink" title="标签中，script中都可，行注释：Ctrl+/,块注释：alt+shift+A。"></a>标签中，script中都可，行注释：<code>Ctrl+/</code>,块注释：<code>alt+shift+A</code>。</h5></li><li><h5 id="混淆代码：-块注释"><a href="#混淆代码：-块注释" class="headerlink" title="混淆代码：   块注释"></a>混淆代码：   <em>块注释</em></h5></li><li><h5 id="TODO高亮注释标识未来需要继续编写的代码。"><a href="#TODO高亮注释标识未来需要继续编写的代码。" class="headerlink" title="TODO高亮注释标识未来需要继续编写的代码。"></a><code>TODO</code>高亮注释标识未来需要继续编写的代码。</h5></li></ul><h3 id="控制台："><a href="#控制台：" class="headerlink" title="控制台："></a>控制台：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line"><span class="built_in">console</span>.trace(<span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">console</span>.debug(<span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"这里有错误"</span>);</span><br></pre></td></tr></table></figure><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ol><li><h5 id="alter-quot-弹出窗-quot"><a href="#alter-quot-弹出窗-quot" class="headerlink" title="alter(&quot;弹出窗&quot;);"></a><code>alter(&quot;弹出窗&quot;);</code></h5></li><li><h5 id="corfirm-quot-提示框-确定取消框-quot"><a href="#corfirm-quot-提示框-确定取消框-quot" class="headerlink" title="corfirm(&quot;提示框/确定取消框&quot;);"></a><code>corfirm(&quot;提示框/确定取消框&quot;);</code></h5></li><li><h5 id="prompt-quot-今年你多大了-quot-18-输入弹出框"><a href="#prompt-quot-今年你多大了-quot-18-输入弹出框" class="headerlink" title="prompt(&quot;今年你多大了&quot;,18);输入弹出框"></a><code>prompt(&quot;今年你多大了&quot;,18);</code>输入弹出框</h5></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">div1.innerHTML=<span class="string">"abc"</span>;</span><br><span class="line">div1.style.color=<span class="string">"red"</span>;</span><br><span class="line">div.style.backgroundColor=<span class="string">"blue"</span>;</span><br><span class="line">div1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div1.innerHTML=<span class="string">"我点击了"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置行内样式</p></blockquote></li></ol><h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><ul><li><h4 id="每个变量都应该先声明"><a href="#每个变量都应该先声明" class="headerlink" title="每个变量都应该先声明"></a>每个变量都应该先声明</h4></li><li><h4 id="变量的名称不能使用数字开头，必须使用（-）或者大小写的英文字母。"><a href="#变量的名称不能使用数字开头，必须使用（-）或者大小写的英文字母。" class="headerlink" title="变量的名称不能使用数字开头，必须使用（$/_）或者大小写的英文字母。"></a>变量的名称不能使用数字开头，必须使用（$/_）或者大小写的英文字母。</h4></li><li><h4 id="关键词和保留字不能作为变量名。"><a href="#关键词和保留字不能作为变量名。" class="headerlink" title="关键词和保留字不能作为变量名。"></a>关键词和保留字不能作为变量名。</h4></li><li><h4 id="变量命名："><a href="#变量命名：" class="headerlink" title="变量命名："></a>变量命名：</h4><ul><li><h6 id="普通变量名使用小写字母开始，驼峰式命名法，变量名要有意义。"><a href="#普通变量名使用小写字母开始，驼峰式命名法，变量名要有意义。" class="headerlink" title="普通变量名使用小写字母开始，驼峰式命名法，变量名要有意义。"></a>普通变量名使用小写字母开始，<em>驼峰式命名法</em>，变量名要有意义。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getLISTCount</span><br></pre></td></tr></table></figure></li><li><h6 id="临时变量、参数、局部变量使用-起头，驼峰式命名法"><a href="#临时变量、参数、局部变量使用-起头，驼峰式命名法" class="headerlink" title="临时变量、参数、局部变量使用_起头，驼峰式命名法"></a>临时变量、参数、局部变量使用_起头，驼峰式命名法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _num=<span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><h6 id="ES5中变量实际上是赋值给了window对象的一个属性-gt-不能使用window中的属性或者方法名作为变量名。"><a href="#ES5中变量实际上是赋值给了window对象的一个属性-gt-不能使用window中的属性或者方法名作为变量名。" class="headerlink" title="ES5中变量实际上是赋值给了window对象的一个属性==&gt;不能使用window中的属性或者方法名作为变量名。"></a>ES5中变量实际上是赋值给了window对象的一个属性==&gt;不能使用window中的属性或者方法名作为变量名。</h6><blockquote><h6 id="控制台蓝色数值-黑色字符串"><a href="#控制台蓝色数值-黑色字符串" class="headerlink" title="控制台蓝色数值 黑色字符串"></a>控制台蓝色数值 黑色字符串</h6></blockquote></li><li><h6 id="常量-ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。"><a href="#常量-ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。" class="headerlink" title="常量:ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。"></a>常量:ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。</h6><h6 id="常量全部大写，并且使用-分割单词。"><a href="#常量全部大写，并且使用-分割单词。" class="headerlink" title="常量全部大写，并且使用_分割单词。"></a>常量全部大写，并且使用_分割单词。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EVENT_ID=<span class="string">"string"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><h6 id="弱类型：定义的变量类型可变"><a href="#弱类型：定义的变量类型可变" class="headerlink" title="弱类型：定义的变量类型可变"></a>弱类型：定义的变量类型可变</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">4</span>;</span><br><span class="line">a=<span class="number">5</span>;</span><br><span class="line">a=<span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><h6 id="弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。"><a href="#弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。" class="headerlink" title="弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。"></a>弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。</h6><ol><li><h5 id="字符型："><a href="#字符型：" class="headerlink" title="字符型："></a>字符型：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> a1=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> a2=<span class="string">`abc`</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="数值型："><a href="#数值型：" class="headerlink" title="数值型："></a>数值型：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b1=<span class="number">1.2</span>;</span><br><span class="line"><span class="keyword">var</span> b2=<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">var</span> b3=<span class="number">0x01</span>;<span class="comment">//16进制数值型</span></span><br><span class="line"><span class="keyword">var</span> b4=<span class="number">0047</span>;<span class="comment">//8进制数值型</span></span><br><span class="line"><span class="keyword">var</span> b5=<span class="number">1.23e+5</span>;<span class="comment">//科学计数法</span></span><br><span class="line"><span class="keyword">var</span> b6=<span class="number">2.3e-6</span>;<span class="comment">//科学计数法</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="布尔值（true-false）"><a href="#布尔值（true-false）" class="headerlink" title="布尔值（true/false）"></a>布尔值（true/false）</h5></li><li><h5 id="未定义"><a href="#未定义" class="headerlink" title="未定义"></a>未定义</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> d1;</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><h6 id="一个定义为undefined，一个未定义默认为undefined。"><a href="#一个定义为undefined，一个未定义默认为undefined。" class="headerlink" title="一个定义为undefined，一个未定义默认为undefined。"></a>一个定义为undefined，一个未定义默认为undefined。</h6></blockquote><ol start="5"><li><h5 id="空（null）："><a href="#空（null）：" class="headerlink" title="空（null）："></a>空（null）：</h5><h6 id="针对对象设置为null，用于清除对象的引用关系"><a href="#针对对象设置为null，用于清除对象的引用关系" class="headerlink" title="针对对象设置为null，用于清除对象的引用关系"></a>针对对象设置为null，用于清除对象的引用关系</h6></li><li><h5 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h5><ul><li><h6 id="var-o-a-1-b-2"><a href="#var-o-a-1-b-2" class="headerlink" title="var o={a:1,b:2};"></a><code>var o={a:1,b:2};</code></h6></li></ul></li></ol></li><li><h4 id="数据类型转换："><a href="#数据类型转换：" class="headerlink" title="数据类型转换："></a>数据类型转换：</h4><ol><li><h5 id="数值型转换为字符型"><a href="#数值型转换为字符型" class="headerlink" title="数值型转换为字符型"></a>数值型转换为字符型</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><ol><li><h5 id="强制转换，通过String构造函数方法转换"><a href="#强制转换，通过String构造函数方法转换" class="headerlink" title="强制转换，通过String构造函数方法转换"></a>强制转换，通过String构造函数方法转换</h5><ul><li><code>String(a);</code></li></ul></li><li><h5 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=a.toString();</span><br></pre></td></tr></table></figure></li></ul><blockquote><h6 id="进制转换：参数中是数字，表示将变量转换为该数值的进制字符串"><a href="#进制转换：参数中是数字，表示将变量转换为该数值的进制字符串" class="headerlink" title="进制转换：参数中是数字，表示将变量转换为该数值的进制字符串"></a>进制转换：参数中是数字，表示将变量转换为该数值的进制字符串</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; a=a.toString(<span class="number">2</span>);<span class="comment">//2进制</span></span><br><span class="line">&gt; a=a.toString(<span class="number">16</span>);<span class="comment">//16进制</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol></li></ol></li></ul><ol start="2"><li><h5 id="保留小数点后几位："><a href="#保留小数点后几位：" class="headerlink" title="保留小数点后几位："></a>保留小数点后几位：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=a.toFixed();</span><br><span class="line"><span class="comment">//带参数表示保留小数点后几位</span></span><br><span class="line"> <span class="comment">//四舍五入效果</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><ul><li><h5 id="大于0时，保留几位数值并且按照科学计数法来写"><a href="#大于0时，保留几位数值并且按照科学计数法来写" class="headerlink" title="大于0时，保留几位数值并且按照科学计数法来写"></a>大于0时，保留几位数值并且按照科学计数法来写</h5></li><li><h5 id="小于1时，保留几位有效数字"><a href="#小于1时，保留几位有效数字" class="headerlink" title="小于1时，保留几位有效数字"></a>小于1时，保留几位有效数字</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=a.toPrecision(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h5 id="保留小数点后几位的科学计数法"><a href="#保留小数点后几位的科学计数法" class="headerlink" title="保留小数点后几位的科学计数法"></a>保留小数点后几位的科学计数法</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=a.toExponential(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;JavaScript的引入方式&quot;&gt;&lt;a href=&quot;#JavaScript的引入方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的引入方式&quot;&gt;&lt;/a&gt;JavaScript的引入方式&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;数据类型转换&quot;&gt;&lt;a href=&quot;#数据类型转换&quot; class=&quot;headerlink&quot; title=&quot;数据类型转换&quot;&gt;&lt;/a&gt;数据类型转换&lt;/h5&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Study" scheme="http://ankang.icu/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高阶函数</title>
    <link href="http://ankang.icu/2020/04/06/20-04-06/"/>
    <id>http://ankang.icu/2020/04/06/20-04-06/</id>
    <published>2020-04-06T05:40:48.000Z</published>
    <updated>2020-04-06T06:27:45.127Z</updated>
    
    <content type="html"><![CDATA[<p>1.filter函数<br>2.map函数<br>3.reduce函数<br>了解JavaScript中高阶函数的使用开发可以更加简洁<br><a id="more"></a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>首先定义一个数组：<br>    const nums = [50, 20, 101, 100, 10, 200, 33, 22]<br>完成三个需求：<br>    1.取出所有小于100的数字<br>    2.将取出的数进行 乘 2 转化<br>    3.将转化后的所有数字相加,得到最终的结果</p><h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><p>解决需求1：<br>向filter函数传入一个带参数的方法，函数内部会创建一个数组，根据返回的布尔类型的值，把方法中满足条件/返回值为true的加入数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> newNums = nums.filter(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n &lt; 100</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newNums);</span><br></pre></td></tr></table></figure></p><p>执行结果：<br>[ 50, 20, 10, 33, 22 ]</p><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>解决需求2：<br>map函数对数组中所有内容进行转化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> new2Nums = newNums.map(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n * 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(new2Nums);</span><br></pre></td></tr></table></figure></p><p>执行结果：<br>[ 100, 40, 20, 66, 44 ]</p><h3 id="reduce函数的使用"><a href="#reduce函数的使用" class="headerlink" title="reduce函数的使用"></a>reduce函数的使用</h3><p>解决需求3：<br>reduce函数的作用对数组中所有的内容进行汇总<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> final = new2Nums.reduce(<span class="keyword">function</span> (preValue, n) &#123; //preValue参数表示上一个数</span><br><span class="line">  <span class="built_in">return</span> preValue + n</span><br><span class="line">&#125;, 0) //这里的0表示reduce函数的初始值/preValue的初始值</span><br><span class="line">console.log(final);</span><br></pre></td></tr></table></figure></p><p>执行结果：<br>270</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> final = nums.filter(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n &lt; 100</span><br><span class="line">&#125;).map(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n * 2</span><br><span class="line">&#125;).reduce(<span class="keyword">function</span> (prevValue, n) &#123;</span><br><span class="line">  <span class="built_in">return</span> prevValue + n</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(final);</span><br></pre></td></tr></table></figure><p>结果同样为：<br>270</p><p>或者使用箭头函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> final = nums.filter(n =&gt; n &lt; 100).map(n =&gt; n * 2).reduce((pre, n) =&gt; pre + n);</span><br><span class="line">console.log(final);</span><br></pre></td></tr></table></figure></p><p>这样可以一行得到结果，结果同样正确。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.filter函数&lt;br&gt;2.map函数&lt;br&gt;3.reduce函数&lt;br&gt;了解JavaScript中高阶函数的使用开发可以更加简洁&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://ankang.icu/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>带符号数的表示</title>
    <link href="http://ankang.icu/2020/03/06/20-03-06/"/>
    <id>http://ankang.icu/2020/03/06/20-03-06/</id>
    <published>2020-03-06T03:11:10.000Z</published>
    <updated>2020-04-06T06:32:24.309Z</updated>
    
    <content type="html"><![CDATA[<p>带符号数的表示: 原码、反码和补码;定点表示和浮点表示;<br><a id="more"></a></p><h2 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h2><p>约定:<br>    最高为符号位<br>    ‘0’表示正数’+’;<br>    ‘1’表示负数’-‘;</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>最高位为符号位,非符号位为该数字绝对值的二进制表示<br>“0”的两种表示形式：<br>               [+0]的原码为: 0 0000000<br>               [-0]的原码为: 1 0000000</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 127的原码为0 1111111</span><br><span class="line">-127的原码为1 1111111</span><br></pre></td></tr></table></figure></p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>分为正数的反码和负数的反码</p><p>正数:<br>    反码与原码一样<br>负数:<br>    最高位(符号位)不变,数值部分’按位取反’;<br>“0”的两种表示形式:<br>        [+0]的反码为: 0 0000000<br>        [-0]的反码为: 1 1111111</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 127的反码为0 1111111</span><br><span class="line">-127的反码为1 0000000</span><br></pre></td></tr></table></figure></p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>同样分为正数和负数</p><p>正数:<br>    补码与原码一样<br>负数:<br>    最高位(符号位)不变,数值部分’按位取反’,再加’1’;<br>“0”的表示形式：<br>    [+0]的补码=[-0]的补码= 0 0000000</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 127的补码为0 1111111</span><br><span class="line">-127的补码为1 0000001</span><br></pre></td></tr></table></figure></p><p>或者负数的补码可以简单的理解为:<br>    原码的符号位不变,数值部分:从右向左到第一个’1’(包括)止不变,左边数’取反’;</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原码为: 1 00110 10</span><br><span class="line">补码为: 1 11001 10</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.正数的原码、反码、补码是一样的,不变；<br>2.负数的反码是符号位不变,数值部分按位取反;补码为反码加’1’;<br>3.表示范围:<br>    原码:[+127～-127]<br>    反码:[+127～-127]<br>    补码:[+127～-128]<br>        (因为’1 0000000’不再表示为’-0’)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;带符号数的表示: 原码、反码和补码;定点表示和浮点表示;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="School" scheme="http://ankang.icu/tags/School/"/>
    
      <category term="组成原理" scheme="http://ankang.icu/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python-经典案例练习</title>
    <link href="http://ankang.icu/2020/02/14/20-02-14/"/>
    <id>http://ankang.icu/2020/02/14/20-02-14/</id>
    <published>2020-02-14T04:50:30.000Z</published>
    <updated>2020-03-06T03:18:01.151Z</updated>
    
    <content type="html"><![CDATA[<p>在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后,我需要对学习的知识进行巩固和应用,在这里整理一些经典的案例来帮助理解和消化,希望在看完这些练习后,对Python更加了解.<br><a id="more"></a><br>戴口罩、勤洗手、测体温<br>勤消毒、少聚餐、勤通风<br>情人节快乐!!!</p><p>接下来开始我们的正题</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h3><p>解释:水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：1^3 + 5^3+ 3^3=153。<br>要求:找出所有水仙花数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">1.水仙花数是3位数,首先确定范围:100~1000</span></span><br><span class="line"><span class="string">2.以水仙花数的特点为思路</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(100, 1000):</span><br><span class="line">    <span class="comment"># 3=153%10===&gt;&gt; % 取余</span></span><br><span class="line">    one = num % 10</span><br><span class="line">    <span class="comment"># 5=153//10%10===&gt;&gt; // 整除</span></span><br><span class="line">    two = num // 10 % 10</span><br><span class="line">    <span class="comment"># 1=153//100</span></span><br><span class="line">    high = num // 100</span><br><span class="line">    <span class="comment"># 判断输出水仙数</span></span><br><span class="line">    <span class="keyword">if</span> num == one ** 3 + two ** 3 + high ** 3:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure></p><p>执行结果正确为:[153 370 371 407]</p><h3 id="百钱百鸡"><a href="#百钱百鸡" class="headerlink" title="百钱百鸡"></a>百钱百鸡</h3><p>解释:公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">1.解决这个问题可以采用'穷举法'--将问题的各个部分一次次实验最终找到答案</span></span><br><span class="line"><span class="string">2.100块钱最多买公鸡20只,最多买母鸡33只</span></span><br><span class="line"><span class="string">3.一百只鸡减去公鸡数减去母鸡数就是小鸡的数目</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0, 20):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(0, 33):</span><br><span class="line">        z = 100 - x - y</span><br><span class="line">        <span class="keyword">if</span> x*5 + y*3 + z/3 == 100:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"公鸡:[%d] 母鸡:[%d] 小鸡:[%d]"</span> % (x, y, z))</span><br></pre></td></tr></table></figure></p><p>执行结果为:<br>公鸡:[0] 母鸡:[25] 小鸡:[75]<br>公鸡:[4] 母鸡:[18] 小鸡:[78]<br>公鸡:[8] 母鸡:[11] 小鸡:[81]<br>公鸡:[12] 母鸡:[4] 小鸡:[84]</p><h3 id="CRAPS赌博"><a href="#CRAPS赌博" class="headerlink" title="CRAPS赌博"></a>CRAPS赌博</h3><p>解释:玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置赌注</span></span><br><span class="line">money = 1000</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> money &gt; 0:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"您的赌注为: %d"</span> % money)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏进行下一局的设置</span></span><br><span class="line">    game_go = False</span><br><span class="line">    <span class="comment"># 赌注&gt;0时游戏循环进行</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        dz = int(input(<span class="string">"请下注: "</span>))</span><br><span class="line">        <span class="keyword">if</span> 0 &lt; dz &lt;= money:</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    <span class="comment"># 第一局的点数</span></span><br><span class="line">    first = randint(1, 6) + randint(1, 6)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"第 1 局点数为:[%d]"</span> % first)</span><br><span class="line">    <span class="keyword">if</span> first == 7 or first == 11:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"您赢了!"</span>)</span><br><span class="line">        money += dz</span><br><span class="line">    <span class="keyword">elif</span> first == 2 or first == 3 or first == 12:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"庄家赢!"</span>)</span><br><span class="line">        money -= dz</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 进行下一局游戏</span></span><br><span class="line">        game_go = True</span><br><span class="line">        <span class="comment"># 局数+1</span></span><br><span class="line">        <span class="built_in">times</span> = 2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> game_go:</span><br><span class="line">        game_go = False</span><br><span class="line">        second = randint(1, 6) + randint(1, 6)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"第 %s 局点数为:[%d]"</span> % (<span class="built_in">times</span>, second))</span><br><span class="line">        <span class="keyword">if</span> second == 7:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"庄家赢!"</span>)</span><br><span class="line">            money -= dz</span><br><span class="line">        <span class="keyword">elif</span> second == first:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"您赢了!"</span>)</span><br><span class="line">            money += dz</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 下一局</span></span><br><span class="line">            game_go = True</span><br><span class="line">            <span class="built_in">times</span> += 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"您输光了所有赌注,游戏结束!"</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果有兴趣可自行测试.<br>Tips:远离赌博;适度游戏益脑，沉迷游戏伤身;运气游戏,代码测试有可能花费较长时间.</p><h3 id="确定一个正整数的所有因子"><a href="#确定一个正整数的所有因子" class="headerlink" title="确定一个正整数的所有因子"></a>确定一个正整数的所有因子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input(<span class="string">"输入一个正整数: "</span>))</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1, n+1):</span><br><span class="line">    <span class="keyword">if</span> n % i == 0:</span><br><span class="line">        results.append(i)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure><p>返回结果:[1, 2, 4, 5, 10, 20, 25, 50, 100]</p><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>解释:数列的初始值为0,接着值为1，从第三个数开始，每个数都是它前面两个数的和，形如：0, 1, 1, 2, 3, 5, 8, 13, …<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">以输出数列前10个数为例</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">a = 0</span><br><span class="line">b = 1</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1, 11):</span><br><span class="line">    results.append(a)</span><br><span class="line">    c = a + b</span><br><span class="line">    a = b</span><br><span class="line">    b = c</span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure></p><p>执行结果为:[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>练习的代码放在下面链接，如果需要帮助请自行查看。<br><a href="源文件.py" title="练习代码">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后,我需要对学习的知识进行巩固和应用,在这里整理一些经典的案例来帮助理解和消化,希望在看完这些练习后,对Python更加了解.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://ankang.icu/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之函数</title>
    <link href="http://ankang.icu/2019/11/10/19-11-10/"/>
    <id>http://ankang.icu/2019/11/10/19-11-10/</id>
    <published>2019-11-10T02:29:37.000Z</published>
    <updated>2020-03-06T03:17:38.591Z</updated>
    
    <content type="html"><![CDATA[<p>学习一门语言,必不可少的你要了解它对函数的使用.在编程中允许你主动为某个代码块赋予名字,使这一代码块独立,在这之后你可以在任何位置通过名字运行代码块,并可重复任何次数,这就是所谓的调用（Calling）函数（Functions）。<br>内容参考–《A Byte of Python》<br><a id="more"></a><br>你可以通过 <a href="http://python.swaroopch.com/" target="_blank" rel="noopener">http://python.swaroopch.com/</a> 在线阅读本书英文原版。<br>中文译版可通过 <a href="https://bop.molun.net" target="_blank" rel="noopener">https://bop.molun.net</a> 在线阅读。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>Python中函数可以通过关键字– def –来定义.在 def 后是你为函数起的名字(不可重复,必须是唯一的),再跟一对圆括号，再以冒号结尾，结束这一行。随后而来的内容是函数的一部分。<br>格式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名():</span><br><span class="line">内容</span><br><span class="line">内容</span><br></pre></td></tr></table></figure></p><p>通过–函数名()–实现对函数的调用,可进行多次调用,方法一样.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数名()  <span class="comment">#第一次调用</span></span><br><span class="line">函数名()  <span class="comment">#再次调用</span></span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>函数定义时,函数的每行内容都要缩进,当有一行未进行缩进,代表函数定义结束.</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>在函数定义时,圆括号内可以包括一些变量的名称用来指定函数中会用到的参数,此时在进行函数调用时也需要在括号内添加对应类型的参数.<br>案例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def print_max(a, b): <span class="comment"># 寻找最大值函数</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b: <span class="comment"># if...else 语句</span></span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">'is maximum'</span>)</span><br><span class="line">    <span class="keyword">elif</span> a == b:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">'is equal to'</span>, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(b, <span class="string">'is maximum'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对函数内参数值的传递有两种方式:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.直接传递字面值</span></span><br><span class="line">print_max(3, 4) <span class="comment"># 函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.以参数的形式传递变量</span></span><br><span class="line">x = 5</span><br><span class="line">y = 7</span><br><span class="line"></span><br><span class="line">print_max(x, y) <span class="comment"># 函数调用</span></span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 is maximum</span><br><span class="line">7 is maximum</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在函数定义中,括号内的变量不会对函数外的函数造成影响,它只作用于当前函数内,这被称为变量的作用域（Scope).<br>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = 50</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func(x): <span class="comment">#定义一个带参数x的函数func</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'x is'</span>, x)</span><br><span class="line">    x = 2 <span class="comment">#对函数内的参数x进行赋值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Changed local x to'</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'x is still'</span>, x) <span class="comment">#这里输出的是函数外的x值,用来展示主代码块中的x未发生变化</span></span><br></pre></td></tr></table></figure></p><p>结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x is 50</span><br><span class="line">Changed <span class="built_in">local</span> x to 2</span><br><span class="line">x is still 50</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></p><h3 id="Then"><a href="#Then" class="headerlink" title="Then"></a>Then</h3><p>当你需要在函数中对主代码块中的参数进行修改,就需要用到接下来要了解的内容:–global语句.你应该告诉程序这里修改的参数是全局的,不只用在函数块中.</p><h2 id="global语句"><a href="#global语句" class="headerlink" title="global语句"></a>global语句</h2><p>global 语句用以声明 x 是一个全局变量——因此，当我们在函数中为 x 进行赋值时，这一改动将影响到我们在主代码块中使用的 x 的值。<br>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = 50</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func(): <span class="comment">#注意! 注意! 注意!</span></span><br><span class="line">    global x</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'x is'</span>, x)</span><br><span class="line">    x = 2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Changed global x to'</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Value of x is'</span>, x)</span><br></pre></td></tr></table></figure></p><p>结果为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x is 50</span><br><span class="line">Changed global x to 2</span><br><span class="line">Value of x is 2</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></p><p>需要注意的是:若使用global语句,定义函数时,不允许在括号内添加相同名称的变量,使用之前定义的变量.否则,会提示以下错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: name <span class="string">'x'</span> is parameter and global</span><br><span class="line"><span class="comment">#语法错误：名称'x'是参数和全局</span></span><br></pre></td></tr></table></figure></p><p>同时,可以在同一句 global 语句中指定不止一个的全局变量，例如 global x, y, z。</p><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>这部分内容,我认为原文说的不够明确,以下内容只代表我的理解:<br>在定义新函数时,可以对括号内要添加的参数使用关键字命名,这样在下面调用函数时,可以通过关键字准确的对某个参数进行赋值和修改,这需要其他的参数也要具有默认值.如若不使用关键字,会对括号内的参数按照顺序依次赋值/修改.</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>内容包含了–元组与字典–的知识,学习后再进行补充(emmm)<br>–等待补充–</p><h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>return 语句用于从函数中返回，也就是中断函数。我们也可以选择在中断函数时从函数中返回一个值。<br>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def maximum(x, y):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="built_in">return</span> x</span><br><span class="line">    <span class="keyword">elif</span> x == y:</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'The numbers are equal'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(maximum(2, 3))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></p><p>return语句,学习过C语言或其他语言的都不会陌生,在程序结束时返回0,一般会默认添加;表示中断作用时,类似的还有 break语句;continue语句;</p><h2 id="DocStrings"><a href="#DocStrings" class="headerlink" title="DocStrings"></a>DocStrings</h2><p>简单地说,在函数块中可以使用三对单引号书写,保存一段文档,在需要显示的地方添加以下语句调用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.</span></span><br><span class="line"><span class="built_in">print</span>(函数名.__doc__) <span class="comment">#注意其中的双下划线</span></span><br><span class="line"><span class="comment">#2. help()函数也能显示函数内的文档信息</span></span><br><span class="line"><span class="built_in">help</span>(print_max)</span><br></pre></td></tr></table></figure></p><p>这时我们已经了解到了每天日常使用都会使用到的 Python 函数.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习一门语言,必不可少的你要了解它对函数的使用.在编程中允许你主动为某个代码块赋予名字,使这一代码块独立,在这之后你可以在任何位置通过名字运行代码块,并可重复任何次数,这就是所谓的调用（Calling）函数（Functions）。&lt;br&gt;内容参考–《A Byte of Python》&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://ankang.icu/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之格式化</title>
    <link href="http://ankang.icu/2019/10/04/19-10-04/"/>
    <id>http://ankang.icu/2019/10/04/19-10-04/</id>
    <published>2019-10-04T10:06:17.000Z</published>
    <updated>2020-03-06T03:17:14.104Z</updated>
    
    <content type="html"><![CDATA[<p>一个字符串可以使用某些特定的格式（Specification）通过调用一些方法,替换其中的参数,使内容更加简洁,明了.<br>有时候我们会想要从其他信息中构建字符串。这正是 format() 方法大有用武之地的地方。<br>内容参考–《A Byte of Python》<br><a id="more"></a><br>你可以通过 <a href="http://python.swaroopch.com/" target="_blank" rel="noopener">http://python.swaroopch.com/</a> 在线阅读本书英文原版。</p><h2 id="For-1"><a href="#For-1" class="headerlink" title="For 1"></a>For 1</h2><p>将以下内容保存为文件 str_format.py ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">name = <span class="string">'Swaroop'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;0&#125; was &#123;1&#125; years old when he wrote this book'</span>.format(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Why is &#123;0&#125; playing with that python?'</span>.format(name))</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Swaroop was 20 years old when he wrote this book</span><br><span class="line">Why is Swaroop playing with that python?</span><br></pre></td></tr></table></figure></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>调用format 方法,使与其相对应的参数实现替换.</p><p>在这里要注意我们第一次应用这一方法的地方，此处 {0} 对应的是变量 name，它是该格式化方法中的第一个参数。与之类似，第二个格式 {1} 对应的是变量 age，它是格式化方法中的第二个参数。请注意，Python 从 0 开始计数，这意味着索引中的第一位是 0，第二位是 1，以此类推。</p><p>当然,我们通常可以通过联立字符串达到相同效果,如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name + <span class="string">'is'</span> + str(age) + <span class="string">'years old'</span></span><br></pre></td></tr></table></figure></p><p>但这样的方式有点丑陋,容易出错.其次，转换至字符串的工作将由 format 方法自动完成，而不是如这般需要明确转换至字符串。再次，当使用 format 方法时，我们可以直接改动文字而不必与变量打交道，反之亦然。</p><p>同时,括号内的数字是一个可选选项,可以省略,即:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">name = <span class="string">'Swaroop'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;&#125; was &#123;&#125; years old when he wrote this book'</span>.format(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Why is &#123;&#125; playing with that python?'</span>.format(name))</span><br></pre></td></tr></table></figure></p><p>大大减少了出错的概率,还能达到相同的效果.</p><h3 id="And-Then"><a href="#And-Then" class="headerlink" title="And Then"></a>And Then</h3><p>format 方法可以和参数一起使用,对参数实现更加具体的定义,例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于浮点数 '0.333' 保留小数点(.)后三位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;0:.3f&#125;'</span>.format(1.0/3))</span><br><span class="line"><span class="comment"># 使用下划线填充文本，并保持文字处于中间位置</span></span><br><span class="line"><span class="comment"># 使用 (^) 定义 '___hello___'字符串长度为 11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;0:_^11&#125;'</span>.format(<span class="string">'hello'</span>))</span><br><span class="line"><span class="comment"># 基于关键词输出 'Swaroop wrote A Byte of Python'  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;name&#125; wrote &#123;book&#125;'</span>.format(name=<span class="string">'Swaroop'</span>, book=<span class="string">'A Byte of Python'</span>))</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.333</span><br><span class="line">___hello___</span><br><span class="line">Swaroop wrote A Byte of Python</span><br></pre></td></tr></table></figure></p><h2 id="For-2"><a href="#For-2" class="headerlink" title="For 2"></a>For 2</h2><p>在Python中 print 总是会以一个不可见的“新一行”字符（\n）结尾，因此重复调用 print将会在相互独立的一行中分别打印。为防止打印过程中出现这一换行符，你可以通过 end 指定其应以空白结尾,例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.当 end 表示以空白结尾时</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'a'</span>, end=<span class="string">''</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'b'</span>, end=<span class="string">''</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c'</span>)</span><br><span class="line"><span class="comment"># 2.当 end 指定以空格结尾时</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'a'</span>, end=<span class="string">' '</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'b'</span>, end=<span class="string">' '</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>输出内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>经典问题一:<br>在Python中打印九九乘法表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">row=1</span><br><span class="line"><span class="keyword">while</span> row&lt;=9:</span><br><span class="line">    col=1</span><br><span class="line">    <span class="keyword">while</span> col&lt;=row:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&#123;&#125;*&#123;&#125;=&#123;&#125;"</span> .format(col,row,(row*col)),end=<span class="string">"\t"</span>)</span><br><span class="line">        <span class="comment"># \t --转义字符:制表</span></span><br><span class="line">        col+=1</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    row+=1</span><br></pre></td></tr></table></figure></p><p>效果如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1*1=1</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">1*4=42*4=83*4=124*4=16</span><br><span class="line">1*5=52*5=103*5=154*5=205*5=25</span><br><span class="line">1*6=62*6=123*6=184*6=245*6=306*6=36</span><br><span class="line">1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span><br><span class="line">1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span><br><span class="line">1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个字符串可以使用某些特定的格式（Specification）通过调用一些方法,替换其中的参数,使内容更加简洁,明了.&lt;br&gt;有时候我们会想要从其他信息中构建字符串。这正是 format() 方法大有用武之地的地方。&lt;br&gt;内容参考–《A Byte of Python》&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://ankang.icu/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://ankang.icu/2019/06/28/Test-0/"/>
    <id>http://ankang.icu/2019/06/28/Test-0/</id>
    <published>2019-06-28T02:07:44.000Z</published>
    <updated>2021-03-17T12:58:07.960Z</updated>
    
    <content type="html"><![CDATA[<p>test test<br>https<br><img src="/2019/06/28/Test-0/example.jpg" alt="test_pic"><br><a id="more"></a></p><ul><li>sakdhsadhsa</li><li>jkadsladj</li><li>iihhoo</li></ul><ul><li>dqsdhqwo</li><li>kdjs</li></ul><ul><li>djs;d</li><li>kdsjf;</li></ul><ol><li>ddjsa;</li><li>adsa</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;test test&lt;br&gt;https&lt;br&gt;&lt;img src=&quot;/2019/06/28/Test-0/example.jpg&quot; alt=&quot;test_pic&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://ankang.icu/tags/Test/"/>
    
      <category term="Anything" scheme="http://ankang.icu/tags/Anything/"/>
    
  </entry>
  
  <entry>
    <title>值得一提的海明码</title>
    <link href="http://ankang.icu/2018/11/18/a-post/"/>
    <id>http://ankang.icu/2018/11/18/a-post/</id>
    <published>2018-11-18T06:05:56.000Z</published>
    <updated>2020-04-06T06:31:13.364Z</updated>
    
    <content type="html"><![CDATA[<p>我来了!!!<br>  在电信领域中，汉明码（英语：hammingcode），也称为海明码，是(7,4)汉明码推广得到的一种线性纠错码，由理查德·卫斯里·汉明于1950年发明。<br><a id="more"></a></p><h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>  相比而言，简单的奇偶检验码除了不能纠正错误之外，也只能侦测出奇数个的错误。汉明码是完备码，它在于它分组长度相同、最小距离为3的码中能达到最高的码率。用数学术语来说，汉明码是一种<br>二元线性码。对于所有整数 r ≥ 2，存在一个分组长度 n = 2r − 1、k = 2r − r − 1 编码。经过计网课程的学习,我们了解到海明码除了有检查错误以外,还有对错误进行纠正的作用,且只能进行一位数的纠错.而课本上并没有介绍太多,通过课下搜索的我在此简单说一下海明码的计算过程,希望能帮到大家!</p><h2 id="计算原理"><a href="#计算原理" class="headerlink" title="计算原理"></a>计算原理</h2><p>  将有效信息按某种规律分成若干组，每组安排一个校验位进行奇偶性测试，然后产生多位检测信息，并从中得出具体的出错位置，最后通过对错误位取反（也是原来是1就变成0，原来是0就变成1)来<br>将其纠正。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="检验码位数"><a href="#检验码位数" class="headerlink" title="检验码位数"></a>检验码位数</h3><p>  进行海明码纠错时,要先确定原数据所需要的检验位数.规定:假设用N表示原信息位数,X为海明码位数,要求满足”N+1&lt;=2的X次方-X”,X要求最小值(<br>圈起来).如N=5,代入”5+1&lt;=2^X-X”求得X最小为4:如N=8,求得X最小也为4.由此得知:信息位与检验位之间的关系:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">信息位数     1     2~4     5~11     12~26     27~57     58~120 </span><br><span class="line"></span><br><span class="line">检验位数     2     3       4        5         6         7</span><br></pre></td></tr></table></figure></p><h3 id="检验码位置"><a href="#检验码位置" class="headerlink" title="检验码位置"></a>检验码位置</h3><p>  我们确定了检验码的个数,但检验码并不是依次排列放在发送信息中的,接下来我们就要找到检验码插入的位置,很简单,检验码放在”2^n”位置上,即:第1,2,4,8,16…信息位就放在其他的位置上,即<br>:3,5,6,7,9…(当然,在这里我们学校老师讲的是:发送信息顺序不变,检验码从后往前插入,即第1位在最后面.)<br>  举一个例子:假设有8位信息位”a1,a2,a3,a4,a5,a6,a7,a8”.8位信息位由此得知需要4个检验位,即”Y1,Y2,Y3,Y4”.编码后的数据为:”a1,a2,a3,a4,Y4,a5,a6,a7,Y3,a8,Y2,Y1”.<br>  如那8位信息位为”10011101”,=====编码后表示为”1001#110#1##”.</p><h3 id="计算检验码"><a href="#计算检验码" class="headerlink" title="计算检验码"></a>计算检验码</h3><p>  在上面步骤中我们确定了检验码的个数和位置,接下来我们应该知道的是在那些位置上的检验码要具备的作用,即每个检验码需要检验哪些信息位.<br>  简单来说:在上一步中,我们对发送信息进行了编号,检验码的插入位置编号为1,2,4,8…在这些位置上的检验码遵循一个原则:在第几个位置上的就检验几个位数(<br>从每个检验码自己本身开始),然后跳过同样的位数再检验同样的位数,依次进行.<br>  如例题计算得:Y1=a8+a7+a5+a4+a2.Y2=a8+a6+a5+a3+a2.Y3=a7+a6+a5+a1.Y4=a4+a3+a2+a1.(计算过程遵循异或原理:如果1的个数为偶数结果为0,反之为1).最后求得Y1=1,Y2=1,Y3=1,Y4=0.</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>  将求得的检验码插入信息中,就得到发送的码子为:100101101111.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我来了!!!&lt;br&gt;  在电信领域中，汉明码（英语：hammingcode），也称为海明码，是(7,4)汉明码推广得到的一种线性纠错码，由理查德·卫斯里·汉明于1950年发明。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="School" scheme="http://ankang.icu/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>关于记事本中文乱码调试</title>
    <link href="http://ankang.icu/2018/10/03/my-first-post/"/>
    <id>http://ankang.icu/2018/10/03/my-first-post/</id>
    <published>2018-10-02T16:59:50.000Z</published>
    <updated>2020-04-06T06:31:34.744Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://user.qzone.qq.com/2671467850?ADUIN=2671467850&amp;ADSESSION=1538549335&amp;ADTAG=CLIENT.QQ.5563_MyTip.0&amp;ADPUBNO=26782&amp;source=namecardhoverstar" target="_blank" rel="noopener">QQ</a>–23333<br>发现hexo主页显示乱码问题 ,尝试解决后,进行实验!<br><a id="more"></a><br>原来是配置文件的编码方式不对!</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h2><p>将hexo目录下及them目录下的_config.yml文件用记事本打开–另存为–将右下方编码改为UTF-8–保存.运行本机服务器查看–哇–问题解决了!</p><h2 id="有料"><a href="#有料" class="headerlink" title="有料:"></a>有料:</h2><p>编码是个什么鬼，为什么编码改了之后就没有乱码了？这里科普下各种编码方式。</p><h3 id="字符编码详述"><a href="#字符编码详述" class="headerlink" title="字符编码详述"></a>字符编码详述</h3><p>计算机只能识别0和1，因此要想在计算机上显示各种字符就要把字符用二进制数来表示，这就是字符编码。（这里就不区分字符集和字符编码了）</p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>这是大家最熟悉也是最早的字符集，用一个字节来表示英文字母、数字、控制符等128个字符，因此只能编码英文。</p><h3 id="GBK-GB18030"><a href="#GBK-GB18030" class="headerlink" title="GBK/GB18030"></a>GBK/GB18030</h3><p>GBK是汉字国标扩展码，可以和Unicode中的汉字编码一一对应。GB18030是汉字国家标准代码。</p><h3 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h3><p>ANSI是各种汉字延伸编码方式的总称。因为汉字也分为简体、繁体，而且日文中也有汉字。例如简体中文系统中的GB2312编码，日文系统中的JIS编码。不同ANSI编码不兼容。</p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>各个国家的文字不同，需要编码的字符不同，因此要想让计算机能解析世界上所有的语言，就需要一个通用的编码方式。Unicode编码用多个字节来编码字符，是集成了世界上所有字符的一个符号集合，每一个二进制数据对应唯一的一个字符。（C语言用\0作为字符串结尾，而Unicode中有很多字符都有一个字节为0，因此C语言的字符串函数无法正常处理Unicode）</p><h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><p>Unicode编码虽然解决了字符大一统的问题，但英美人民却不乐意了，英文只用一个字节来编码就可以了，为什么也要用多个字节，这不是白白浪费存储空间吗？因此就有了UTF-8这种Unicode的实现方式，它是一种智能的编码方式，用1~4个字节来表示一个字符，根据字符的不同可以变化字节长度。比如，当存储英文时就用1个字节，当存储中文时就用两个字节。<br>这里只是简单理解，可能稍有不妥，不去深究。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://user.qzone.qq.com/2671467850?ADUIN=2671467850&amp;amp;ADSESSION=1538549335&amp;amp;ADTAG=CLIENT.QQ.5563_MyTip.0&amp;amp;ADPUBNO=26782&amp;amp;source=namecardhoverstar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QQ&lt;/a&gt;–23333&lt;br&gt;发现hexo主页显示乱码问题 ,尝试解决后,进行实验!&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="School" scheme="http://ankang.icu/tags/School/"/>
    
      <category term="Hexo" scheme="http://ankang.icu/tags/Hexo/"/>
    
  </entry>
  
</feed>
