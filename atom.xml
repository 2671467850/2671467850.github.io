<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ankang</title>
  <icon>https://www.gravatar.com/avatar/c4114f39e729347bafc2f1759865816e</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ankang.icu/"/>
  <updated>2021-04-12T11:22:49.798Z</updated>
  <id>http://ankang.icu/</id>
  
  <author>
    <name>ankang</name>
    <email>ankangz98@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Symbol/Set/Map与模块化开发</title>
    <link href="http://ankang.icu/2021/04/02/Symbol-Set-Map%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://ankang.icu/2021/04/02/Symbol-Set-Map与模块化开发/</id>
    <published>2021-04-02T11:13:35.000Z</published>
    <updated>2021-04-12T11:22:49.798Z</updated>
    
    <content type="html"><![CDATA[<ul><li>字符串方法</li><li>Symbol</li><li>Set/Map</li><li>模块化开发</li></ul><a id="more"></a><h3 id="字符串方法和Symbol"><a href="#字符串方法和Symbol" class="headerlink" title="字符串方法和Symbol:"></a>字符串方法和Symbol:</h3><ul><li><p><code>startsWith(&quot;&quot;,)</code>从某个下标开始起始字符是不是某个字符</p></li><li><p><code>endsWith(&quot;&quot;,)</code>判断某个下标前一个是不是这个字符</p></li><li><p><code>&quot;&quot;.reprat(3)</code>重复几次</p></li><li><p>判断字符串的长度不足某个值时，在前面补某个字符。</p></li><li><p><code>&quot;&quot;.padStart(3,&quot;&quot;);</code></p></li><li><p><code>&quot;&quot;.padEnd(3,&quot;&quot;);</code></p></li><li><p><code>${变量名}</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">`aa<span class="subst">$&#123;i&#125;</span>aa`</span>;</span><br><span class="line"><span class="keyword">var</span> sre=<span class="string">"aa"</span>+i+<span class="string">"aa"</span>;</span><br></pre></td></tr></table></figure></li><li><h5 id="Symbol-值唯一，不可能重复。"><a href="#Symbol-值唯一，不可能重复。" class="headerlink" title="Symbol:值唯一，不可能重复。"></a>Symbol:值唯一，不可能重复。</h5></li><li><p>用在对象中；对象的Key，只能是字符串或者Symbol类型，如果不是就隐式转换为字符串</p></li><li><h6 id="Symbol-做为Key时，无法通过for-in-遍历；"><a href="#Symbol-做为Key时，无法通过for-in-遍历；" class="headerlink" title="Symbol 做为Key时，无法通过for in 遍历；"></a>Symbol 做为Key时，无法通过for in 遍历；</h6></li></ul><h3 id="Set和Map：："><a href="#Set和Map：：" class="headerlink" title="Set和Map：："></a>Set和Map：：</h3><ul><li><p><strong>数组</strong>：有序的列表，从0开始，可以根据指定的下标找到元素，以及其上下关系的元素，是一种紧密结构，长度会随着添加或者删除而改变；</p><ul><li>作用：主要存储相关类似的数据，便于遍历全部处理。</li><li>缺点：在插入和删除时消耗性能；排序也非常消耗性能。元素没有宿主，元素本身是无关联性的，数组的元素可以重复。查找速度很慢。</li><li>迭代器</li></ul></li><li><p><strong>对象</strong>：无序列表，键值对形式存储。可以通过键找到值，查找速度非常快。</p><ul><li>用来存储关联性数据；因为无序，插入和删除速度非常快。</li><li>缺点：key只能是字符串或者Symbol，无法使用对象或者其他内容作为键；对象是没有长度，无法确定对象是否遍历到最后一个，只能通过键名找到值，无法直接使用值找到键名，需要遍历查找才可以。</li><li>键找值：速度快；值找键：速度慢。</li><li>无迭代器</li></ul></li><li><h5 id="Set"><a href="#Set" class="headerlink" title="Set:"></a>Set:</h5></li><li><p>无序列表，集或者集合，为了解决添加删除查找速度快，将数据以无序的方式存储，自带值去重，无重复列表，有一个维护性的元素数量</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>();<span class="comment">//创建</span></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">s.add(<span class="number">1</span>);</span><br><span class="line">s.add(<span class="number">2</span>);</span><br><span class="line">s.add(<span class="number">3</span>);</span><br><span class="line">s.delete(<span class="number">2</span>);<span class="comment">//删除</span></span><br><span class="line">s.clear();<span class="comment">//清空</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size)<span class="comment">//长度</span></span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="number">2</span>));<span class="comment">//判断有没有某个元素：返回值--false、true</span></span><br></pre></td></tr></table></figure></li><li><p>Set去重：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr=<span class="built_in">Array</span>.form(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>具有迭代器的类型使用for…of遍历</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="built_in">console</span>,log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//集合是没有下标的</span></span><br></pre></td></tr></table></figure></li><li><p><code>forEach</code>：遍历</p></li><li><p><code>WeakSet</code>：弱引用</p></li><li><p>存在WeakSet中的引用对象被设为null，垃圾回收车会自动从列表中清除。不能被遍历</p></li><li><h5 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map:类型"></a>Map:类型</h5></li><li><p>作用：针对Object做了优化，模仿HashMap，</p></li><li><p>key可以是任何类型，有size–长度。</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"name"</span>,<span class="string">"值"</span>);<span class="comment">//添加数据</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">map.set(arr,<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p>判断有没有某个键</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.get(<span class="string">"name"</span>);<span class="comment">//有返回value，没有返回undefined</span></span><br><span class="line">map.has(arr);<span class="comment">//返回true和false。</span></span><br></pre></td></tr></table></figure></li><li><p>删除：按照键名</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.delete(arr);</span><br></pre></td></tr></table></figure></li><li><p>清空</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.clear();</span><br></pre></td></tr></table></figure></li><li><p>遍历键、值</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">map.keys();</span><br><span class="line">map.value();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> map.keys())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> map)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> map.enties())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach 完成遍历</span></span><br><span class="line">map.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>WeakMap：弱引用，键必须是对象</p></li><li><p>不能遍历</p></li></ul><h3 id="生成器函数："><a href="#生成器函数：" class="headerlink" title="生成器函数："></a>生成器函数：</h3><h3 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h3><ul><li>类–基类–超类–父类–子类–实例化对象–继承</li><li>类别就是实例对象的抽象体现</li><li>实例对象就是类别的具象表现</li><li>子类的父类叫做<strong>超类</strong></li><li>static定义的属性是类自身的属性和方法，实例化的对象不会拥有</li><li>继承：extends</li><li>继承的类需要执行其超类的构造函数—在子类的构造函数中添加 <code>super();</code></li><li>Object 是所有类别的基类</li></ul><h3 id="模块化开发："><a href="#模块化开发：" class="headerlink" title="模块化开发："></a>模块化开发：</h3><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Ball <span class="keyword">from</span> <span class="string">"./js/Ball.js"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;A,fn1 <span class="keyword">as</span> fn2,obj&#125; <span class="keyword">from</span> <span class="string">"./js/Other.js"</span>;<span class="comment">// fn1 as fn2 起别名</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构造函数名统一叫 <code>constructor</code></p></li><li><p>new 类  就是执行该类的constructor函数</p></li><li><p>静态属性、方法中禁止使用this，使用类名调用。</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">c</span>:<span class="number">1</span>,...obj&#125;;<span class="comment">//实现复制obj，浅复制</span></span><br><span class="line">obj,a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></li></ul><h5 id="多选框和单选框"><a href="#多选框和单选框" class="headerlink" title="多选框和单选框"></a>多选框和单选框</h5>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;字符串方法&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Set/Map&lt;/li&gt;
&lt;li&gt;模块化开发&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://ankang.icu/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式与ES6</title>
    <link href="http://ankang.icu/2021/04/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8EES6/"/>
    <id>http://ankang.icu/2021/04/01/正则表达式与ES6/</id>
    <published>2021-04-01T15:06:42.000Z</published>
    <updated>2021-04-01T15:08:37.125Z</updated>
    
    <content type="html"><![CDATA[<ol><li>正则表达式–断言、群组</li><li>ES6–严格模式、箭头函数、解构赋值</li></ol><a id="more"></a><h3 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h3><ul><li><p>起始符 <code>^</code></p></li><li><p>结束符 <code>$</code></p></li><li><p>或者 <code>|</code></p></li><li><h5 id="断言："><a href="#断言：" class="headerlink" title="断言："></a>断言：</h5></li><li><p><code>a(?=b)</code>前端断言：判断后面字符是b的a位置</p></li><li><p><code>a(?!b)</code>前端非：</p></li><li><p><code>(?&lt;=d)a</code>后端断言：</p></li><li><p><code>(?&lt;!d)a</code>后端非：</p></li><li><h5 id="群组："><a href="#群组：" class="headerlink" title="群组："></a>群组：</h5></li><li><p>当match不使用g修饰符时，可以将<code>()</code>中内容单独找出来</p></li><li><p><code>$1</code>就是第一个（）内的内容===群组内容</p></li><li><h5 id="中文匹配："><a href="#中文匹配：" class="headerlink" title="中文匹配："></a>中文匹配：</h5></li><li><p>[\4ue00-\u9fd5]{2,4}</p></li></ul><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6:"></a>ES6:</h3><ul><li><p>严格模式 ：</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="tag">&lt;<span class="name">script</span> <span class="attr">typr</span>=<span class="string">"module"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">2."use strict";</span><br></pre></td></tr></table></figure></li><li><p>变量必须定义后使用</p></li><li><p>不能出现相同参数名</p></li><li><p>不能使用with语句</p></li><li><p>不能对只读属性赋值</p></li><li><p>不能使用八进制</p></li><li><p>不能删除不可删除的属性</p></li><li><p><code>eval</code>不会在外层作用域引入变量-可以将字符串映射为一个JS对象、变量、属性、函数等</p></li><li><p>不使用参数列表的两个属性</p></li><li><p>不能在顶层使用this</p></li><li><p><code>const</code>/ <code>let</code>：</p></li><li><p><code>let</code>定义全局变量不会放在window属性下</p></li><li><p><code>let</code>定义后不能重复定义，避免变量覆盖</p></li><li><p><code>let</code>定义的变量只能在块语句中生效</p></li><li><h5 id="箭头函数："><a href="#箭头函数：" class="headerlink" title="箭头函数："></a>箭头函数：</h5></li><li><p>是一个匿名函数</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn=<span class="function"><span class="params">a</span>=&gt;</span>a+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//箭头函数中如果参数仅有一个，可以省略（），如果没有参数或者有一个以上都必须加（）；</span></span><br><span class="line"><span class="comment">//在箭头函数中，如果语句块仅有一句，并且这句话使用return返回内容，我们可以去除（）和return关键字。</span></span><br><span class="line"><span class="keyword">var</span> arr1=arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数中的this将会是箭头函数外上下文环境的this指向</p></li><li><p>箭头函数最大特征是改变this的指向为当前箭头函数上下文的this。</p></li><li><p>所有回调函数中this都会被重新指向为window，严格模式除外===&gt;undefined。</p></li><li><h5 id="解构赋值："><a href="#解构赋值：" class="headerlink" title="解构赋值："></a>解构赋值：</h5></li><li><p>变量交换：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">4</span>;</span><br><span class="line">[b,a]=[a,b];<span class="comment">//a=4,b=3;</span></span><br><span class="line"><span class="comment">//数组解构按照顺序,可以设置默认值</span></span><br></pre></td></tr></table></figure></li><li><p>对象解构：</p></li><li><p>对象解构是按照key解构；</p></li><li><p>对象中方法解构出来后，成为全局函数，所以对象方法中一旦使用了this，不能解构，解构出来，this的指向发生了改变。===&gt;window。</p></li><li><p>对象解构中如果key名称同名，则可以使用<code>：</code>起别名的方式另外命名。</p></li><li><p>普通函数中传参，有默认值的参数一般写在必填后</p></li><li><p>普通函数中实参的顺序必须和形参的顺序一致。</p></li><li><p>参数赋值时如果整体设置默认值，在调用时如果赋值，默认值将会整体覆盖，不启用。单独设置默认值不会被覆盖。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;正则表达式–断言、群组&lt;/li&gt;
&lt;li&gt;ES6–严格模式、箭头函数、解构赋值&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://ankang.icu/tags/ES6/"/>
    
      <category term="正则表达式" scheme="http://ankang.icu/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>键盘/输入事件与正则表达式概念</title>
    <link href="http://ankang.icu/2021/03/31/%E9%94%AE%E7%9B%98-%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E5%BF%B5/"/>
    <id>http://ankang.icu/2021/03/31/键盘-输入事件与正则表达式概念/</id>
    <published>2021-03-31T15:03:36.000Z</published>
    <updated>2021-04-01T15:05:41.335Z</updated>
    
    <content type="html"><![CDATA[<ol><li>KeyboardEvent事件</li><li>InputEvent事件</li><li>滚轮事件</li><li>正则表达式–重复匹配和非贪婪匹配</li></ol><a id="more"></a><h3 id="KeyboardEvent"><a href="#KeyboardEvent" class="headerlink" title="KeyboardEvent:"></a>KeyboardEvent:</h3><ul><li><p>UI组件、document、window都可以侦听此事件</p></li><li><p>keydown：</p></li><li><p>keydoup：</p></li><li><p>keydpress：</p></li><li><h5 id="移动小人："><a href="#移动小人：" class="headerlink" title="移动小人："></a>移动小人：</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打算用setInterval</span></span><br><span class="line"><span class="comment">//e.repeat是否一直按键状态</span></span><br><span class="line"><span class="comment">//利用数组结构解决连续的状态码判断问题</span></span><br><span class="line"><span class="comment">//减少定时器的数量解决问题</span></span><br></pre></td></tr></table></figure></li><li><h5 id="防抖：某一段时间内只执行一次"><a href="#防抖：某一段时间内只执行一次" class="headerlink" title="防抖：某一段时间内只执行一次"></a>防抖：某一段时间内只执行一次</h5></li><li><p>keyCode/which：键码</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">键盘按键：leftuprightdown:37-40</span><br></pre></td></tr></table></figure></li></ul><h3 id="InputEvent："><a href="#InputEvent：" class="headerlink" title="InputEvent："></a>InputEvent：</h3><ul><li><p>针对表单元素单独做失焦和聚焦处理</p><ul><li>focus：聚焦</li><li>blur：失焦</li></ul></li><li><p>针对表单所有元素的失焦和聚焦</p><ul><li>focusin</li><li>focusout</li></ul></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e.relatedTarget</span></span><br><span class="line"><span class="comment">//上一个或者下一个目标对象，失焦就是下一个聚焦对象，聚焦就是上一个失焦对象</span></span><br></pre></td></tr></table></figure></li><li><p>超链接和所有表单元素都是可以做聚焦与失焦事件</p></li><li><h5 id="input事件："><a href="#input事件：" class="headerlink" title="input事件："></a>input事件：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isComposing:<span class="literal">true</span><span class="comment">//判断是否使用输入法</span></span><br><span class="line">data a<span class="comment">//当前输入的数据</span></span><br><span class="line">inputType:<span class="string">"insertText"</span><span class="comment">//当前输入状态</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="节流：间隔时间执行"><a href="#节流：间隔时间执行" class="headerlink" title="节流：间隔时间执行"></a>节流：间隔时间执行</h5></li></ul><h3 id="滚轮事件："><a href="#滚轮事件：" class="headerlink" title="滚轮事件："></a>滚轮事件：</h3><ul><li><p>兼容事件、继承鼠标事件</p></li><li><p>mousewheel：火狐不支持</p></li><li><p>DOMMouseScroll：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deltaX:</span><br><span class="line">deltaY:<span class="number">-100</span>;向上</span><br><span class="line">wheelDelatY:<span class="number">100</span>;向上</span><br></pre></td></tr></table></figure></li><li><p>兼容写法：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousewheel"</span>,mouseHandler);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMMouseScroll"</span>,mouseHandler);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseHandler</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> detail;</span><br><span class="line">    <span class="keyword">if</span>(e.type===<span class="string">"mousewheel"</span>)&#123;</span><br><span class="line">        detail=e.deltaY&lt;<span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.type===<span class="string">"DOMMouseScroll"</span>)&#123;</span><br><span class="line">        detail=e.detail&lt;<span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(e);</span></span><br><span class="line">    <span class="comment">//console.log(detail);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="自定义滚动条："><a href="#自定义滚动条：" class="headerlink" title="自定义滚动条："></a>自定义滚动条：</h5></li></ul><h3 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^(?=\D+\d)(?=.*[a-z])(?=/</span>[A-Z])[<span class="number">0</span><span class="number">-9</span>a-zA-Z]&#123;<span class="number">8</span>,<span class="number">16</span>&#125;$/</span><br></pre></td></tr></table></figure></li><li><p>字面量定义</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure></li><li><p>构造函数定义</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则内容"</span>,<span class="string">"修饰符"</span>);</span><br><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>,<span class="string">"i"</span>);</span><br></pre></td></tr></table></figure></li><li><p>正则内容：目的–匹配字符串中的内容，或者查找字符串中的内容</p></li><li><p>修饰符：</p><ul><li>i：不区分大小写</li><li>m：多行</li><li>g：全局查找</li></ul></li><li><p>正则对象的方法：</p><ul><li><code>reg.test();</code>//判断字符串是否满足正则条件</li><li><code>reg.exec();</code>//根据正则在字符串中查找到对应的元素，并且挡在数组中，有下标index属性和群组groups属性，一般<code>g</code>无效</li></ul></li><li><p>字符串对象可以使用正则方法：</p><ul><li><p>str.replace();//替换</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line">str.replace(<span class="regexp">/e/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    arr.push(b);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"18617805540"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/^(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/</span>,<span class="string">"$1****$2"</span>))</span><br></pre></td></tr></table></figure></li><li><p>str.search();//查找，返回下标，对 <code>g</code>无效</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.search(<span class="regexp">/a(?=b)/g</span>)<span class="comment">//查找a后面为b的位置。</span></span><br></pre></td></tr></table></figure></li><li><p>str.split();//切割</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.split(<span class="regexp">/[bcd]/</span>)<span class="comment">//可以多个字符切割</span></span><br><span class="line"><span class="string">"config.jpg"</span>.split(<span class="regexp">/(?=\.)/</span>)<span class="comment">//["config", ".jpg"]</span></span><br></pre></td></tr></table></figure></li><li><p>str.match();//匹配，所有匹配正则表达式的内容放在一个数组中。</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"2[bc]3[de]"</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.match(<span class="regexp">/(\d)\[(\w+)\]/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>.</code>通配符：代表任意一个字符,在 <code>[]</code>中会自动转为字符 <code>.</code>，使用 <code>\.</code>也是字符 <code>.</code></p></li><li><p><code>\</code>转移字符：转译为字符串。本身在字符串中就有转义的含义</p></li><li><p><code>[]</code>可能代表一个字符的列表，可以使用里面的任意一个字符</p><p>只能表示一个字符</p></li><li><p><code>[^abcd]</code>在正则中括号内的第一个字符使用^开始，表示后续的内容取反</p><p><code>[a^c]</code>当^不是中括号中的第一位则表示字符^。</p></li><li><p><code>\w</code>===[a-zA-Z0-9_]</p></li><li><p><code>\W</code>===<code>[^a-zA-Z0-9_]</code></p></li><li><blockquote><p>\d===[0-9]</p><p>\D===[ ^0-9]</p><p>\s===空白字符  空格</p><p>\S===非空白字符//字符与字符之间有空字符</p></blockquote></li></ul><h3 id="重复匹配和非贪婪匹配："><a href="#重复匹配和非贪婪匹配：" class="headerlink" title="重复匹配和非贪婪匹配："></a>重复匹配和非贪婪匹配：</h3><ul><li><code>{}</code>表示重复次数：<ul><li><code>{0，1}</code>=== <code>?</code></li><li><code>{1,}</code>=== <code>+</code></li><li><code>{0,}</code>=== <code>*</code></li></ul></li><li><code>()\1</code> ：括号内最大重复次数  分类取出重复的最大次数</li><li>非贪婪匹配：前后会有其他内容约束范围，<ul><li><code>.*?</code></li><li><code>\b</code>单词分隔符</li><li><code>\B</code>非单词分隔符</li></ul></li></ul><h3 id="网易地址截取"><a href="#网易地址截取" class="headerlink" title="网易地址截取"></a>网易地址截取</h3>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;KeyboardEvent事件&lt;/li&gt;
&lt;li&gt;InputEvent事件&lt;/li&gt;
&lt;li&gt;滚轮事件&lt;/li&gt;
&lt;li&gt;正则表达式–重复匹配和非贪婪匹配&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://ankang.icu/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="正则表达式" scheme="http://ankang.icu/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>系统事件概念</title>
    <link href="http://ankang.icu/2021/03/30/%E7%B3%BB%E7%BB%9F%E4%BA%8B%E4%BB%B6%E6%A6%82%E5%BF%B5/"/>
    <id>http://ankang.icu/2021/03/30/系统事件概念/</id>
    <published>2021-03-30T14:35:55.000Z</published>
    <updated>2021-03-30T14:38:22.268Z</updated>
    
    <content type="html"><![CDATA[<ol><li>系统事件-Event对象、MouseEvent对象</li><li>图片预加载</li><li>拖拽</li></ol><a id="more"></a><h3 id="事件的区别："><a href="#事件的区别：" class="headerlink" title="事件的区别："></a>事件的区别：</h3><ul><li><p>事件写法的不同：</p><ul><li><p>在标签中写只能添加一个onclick事件函数，早期的事件会自动设置一个event全局变量，用于事件的处理，同步执行时不会丢失，异步执行延迟会消除。无冒泡。</p></li><li><p>DOM对象添加方法，不再使用全局变量e，只能执行一个函数。有冒泡功能，没有捕获功能。不支持自定义事件这样写大多数都会写出匿名函数。大多数的回调地狱都是在事件函数中发生的，原因是匿名函数的使用。</p><blockquote><p>e=e || window.event;</p><p>bn.onclick=null;//清除事件</p></blockquote></li><li><p>侦听事件类型：一般这种事件不写匿名函数，写命名函数，适合于函数式编程。这种事件包括捕获。冒泡阶段和阻止，还包括自带事件event对象，设置是否执行一次，支持自定义事件，IE8及以下不支持。onclick等所有系统事件===&gt;去掉on。可以执行多个函数</p><blockquote><p>bn.removeEventListener(“事件”,函数名)//删除事件</p></blockquote></li><li><p>IE11以下支持，IE11及以上不支持，没有捕获阶段触发</p><blockquote><p>bn.attachEvent(“on事件”,函数名);</p><p>bn.detachEvent(“on事件”,函数名);</p></blockquote></li></ul></li></ul><h3 id="Event对象："><a href="#Event对象：" class="headerlink" title="Event对象："></a>Event对象：</h3><ul><li><p>表单应用事件：</p></li><li><p>submit和reset</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">from</span>=<span class="built_in">document</span>.querySelector(<span class="string">"form"</span>);</span><br><span class="line">form.addEventListener(<span class="string">"submit"</span>,submitHanlder);</span><br><span class="line">form.addEventListener(<span class="string">"reset"</span>,submitHanlder);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitHanlder</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//阻止表单跳转 submit</span></span><br><span class="line">    <span class="comment">//阻止表单重置 reset</span></span><br><span class="line">    e.preventDefault()  阻止默认事件行为</span><br><span class="line">    e.returnValue=<span class="literal">false</span>  返回值=<span class="literal">false</span><span class="comment">//兼容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>select：针对input或者textArea的</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input.selecttionStart//输入框中的选中开始位置下标</span></span><br><span class="line"><span class="comment">//input.selecttionEnd//输入框中的选中结束位置下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input=<span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line">input.addEventListener(<span class="string">"select"</span>,selectHandler);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectHandler</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="comment">// console.log(input.selectionStart,input.selectionEnd)</span></span><br><span class="line">    input.value=input.value.slice(<span class="number">0</span>,input.selectionStart)+</span><br><span class="line">    input.value.slice(input.selectionStart,input.selectionEnd).toUpperCase()</span><br><span class="line">    +input.value.slice(input.selectionEnd)</span><br><span class="line">    <span class="comment">//将文本输入框中的选中单词变成大写。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>change：可以针对表单元素,也可以针对form表单</p></li><li><p>失去焦点时，原value的值发生改变时，触发</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//针对表单时，判断整个表单的修改</span></span><br><span class="line"><span class="keyword">var</span> form=<span class="built_in">document</span>.querySelector(<span class="string">"form"</span>);</span><br><span class="line">form.addEventListener(<span class="string">"change"</span>,changeHandler);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeHandler</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target,e.target.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>resize  更改浏览器中文档大小 –只针对window侦听</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//em就是父容器的字体大小</span></span><br><span class="line"><span class="comment">//rem相对于根标签的字体大小（html）</span></span><br><span class="line">resizeHandler();</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,resizeHandler);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeHandler</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(screen.width)</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize=<span class="built_in">document</span>.body.clientWidth/screen.width*<span class="number">100</span>+<span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片的加载需要时间，无法立即获得宽度 <code>offsetWidth</code></p></li><li><p>预加载 <code>load</code>加载完成，滞后性极强</p></li><li><p>图片加载不适用load事件，所以：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img=<span class="keyword">new</span> Image();</span><br><span class="line">img.addEventListener();</span><br><span class="line">img.src=<span class="string">"地址"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img1=img.cloneNode(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(img1);</span><br><span class="line"><span class="built_in">console</span>.log(img.width);<span class="comment">//原图的宽高</span></span><br><span class="line">    img1.style.width=<span class="string">"600px"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width);</span><br><span class="line">    <span class="comment">//克隆一个图片副本，修改宽高放进容器中，原始图宽高不变。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="图片预加载的几种方式比较及改善"><a href="#图片预加载的几种方式比较及改善" class="headerlink" title="图片预加载的几种方式比较及改善"></a><em>图片预加载</em>的几种方式比较及改善</h5></li><li><p>scroll：滚动条，默认自动阻止冒泡，通过事件属性传递值。</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div1.addEventListener(<span class="string">"scroll"</span>,scrollHandler);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>,scrollHandler1);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollHandler</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="comment">//var evt=new Event("scroll");</span></span><br><span class="line">    <span class="comment">//evt.scrollTop=this.scrollTop;</span></span><br><span class="line">    <span class="comment">//window.dispatchEvent(evt);//自建事件在触发子元素的滚动事件时抛发，来达到传递数据的效果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollHandler1</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.scrollTop=e.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>error：加载失败时，触发错误事件。</p></li></ul><h3 id="MouseEvent对象："><a href="#MouseEvent对象：" class="headerlink" title="MouseEvent对象："></a>MouseEvent对象：</h3><ul><li><p>按住键盘辅助键点击</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrlKey</span><br><span class="line">altKey</span><br><span class="line">shiftKey</span><br><span class="line">metaKey</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断鼠标按键</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button<span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">buttons<span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line">which<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>坐标</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x:</span><br><span class="line">y:</span><br><span class="line">clientX:</span><br><span class="line">clientY:</span><br><span class="line"><span class="comment">//鼠标相对视口距离</span></span><br><span class="line">pageX:</span><br><span class="line">pageY:</span><br><span class="line"><span class="comment">//相对页面顶端位置/绝对坐标位置</span></span><br><span class="line">layerX:</span><br><span class="line">layerY:</span><br><span class="line"><span class="comment">//相对e.target左上角的坐标，如果目标元素定位了，和offset值相同；如果没有定位，offset不变，layer相对父元素的左上角位置。</span></span><br><span class="line">offsetX:</span><br><span class="line">offsetY:</span><br><span class="line"><span class="comment">//相对e.target左上角的坐标</span></span><br><span class="line">movementX:</span><br><span class="line">movementY:</span><br><span class="line"><span class="comment">//用于Mousemove事件，相对于上次移动距离。==汽车图片</span></span><br><span class="line">screenX:</span><br><span class="line">screenY:</span><br><span class="line"><span class="comment">//绝对于屏幕左上角</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>鼠标事件：</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">click</span><br><span class="line">dbclick</span><br><span class="line">mousedown</span><br><span class="line">mouseup</span><br><span class="line">mousemove</span><br><span class="line"></span><br><span class="line">mouseover</span><br><span class="line">mousenter</span><br><span class="line">mouseout</span><br><span class="line">mouseleave</span><br><span class="line"><span class="comment">//mousenter和mouseleave不会因为进入子元素而抛发事件</span></span><br><span class="line"><span class="comment">//mouseover和mouseout会因为子元素而抛发事件</span></span><br><span class="line">contextmenu</span><br><span class="line"><span class="comment">//如果是contextmenu，会呼出右键菜单</span></span><br><span class="line"><span class="comment">//e.preventDefault()阻止呼出菜单</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;系统事件-Event对象、MouseEvent对象&lt;/li&gt;
&lt;li&gt;图片预加载&lt;/li&gt;
&lt;li&gt;拖拽&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://ankang.icu/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>DOM对象属性与事件基础</title>
    <link href="http://ankang.icu/2021/03/29/DOM%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://ankang.icu/2021/03/29/DOM对象属性与事件基础/</id>
    <published>2021-03-29T14:44:39.000Z</published>
    <updated>2021-03-29T14:47:52.387Z</updated>
    
    <content type="html"><![CDATA[<ol><li>DOM对象常用属性</li><li>观察者模式、中介者模式</li><li>事件委托</li></ol><a id="more"></a><h3 id="DOM对象常用属性："><a href="#DOM对象常用属性：" class="headerlink" title="DOM对象常用属性："></a>DOM对象常用属性：</h3><ul><li><p>获取和设置都会引起浏览器重绘</p></li><li><p>必须已经放在页面中渲染的DOM对象元素</p><ul><li>放入body页面完成渲染之前无法获取</li></ul></li><li><p>宽高  位置</p></li><li><p>鼠标位置通过X、Y设置</p></li><li><p>DOM对象位置通过left、top设置</p></li><li><p>document对象</p></li><li><p>body对象</p></li><li><p>clientWidth/Height  客户宽高 边框以内的所有宽高之和-滚动条宽高===包含padding，不包含边框；</p></li><li><p>offseWidth/Height  偏移宽高  DOM元素在页面中占位的宽高===包含边框</p></li><li><p>scrollWidth/Height  滚动区域宽高</p></li><li><p>body标签document.body的滚动区域宽度会根据设置内容的宽度改变</p></li><li><p>html标签document.documentElement的滚动区域宽度不变</p></li><li><p>clientLeft/Top 客户位置  边线宽高</p><ul><li>border</li></ul></li><li><p>offsetLeft/Top 偏移位置  位置的左上点  元素左上角的相对位置</p><ul><li>设置定位时，相对父元素</li></ul></li><li><p>scrollLeft/Top 滚动条位置</p><ul><li>可读可写</li><li>body标签和html标签的滚动条在初始化第一次渲染时，页面中的滚动条不可以设置，当第一次渲染完毕，交互时有效（早期不支持）；body标签（最新版不支持）。</li></ul></li><li><h5 id="案例：回到顶部的滚动条过渡效果"><a href="#案例：回到顶部的滚动条过渡效果" class="headerlink" title="案例：回到顶部的滚动条过渡效果"></a>案例：回到顶部的滚动条过渡效果</h5></li></ul><h3 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h3><p>事件驱动型语言</p><p>注入式语言</p><p>耦合/解耦</p><ul><li><p>Event</p><ul><li>侦听接收</li><li>抛发</li></ul></li><li><p>系统事件</p></li><li><h5 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h5><ul><li><p>如果需要接收和抛发事件，必须要有对应的对象，接收和抛发的对象；对象必须是同一个，而且必须是继承EventTarget类型的对象===所有的DOM对象都是可以接收和抛发事件的</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(事件类型,事件执行函数，是否捕获阶段触发/事件配置对象);</span><br><span class="line"><span class="keyword">var</span> evt=<span class="keyword">new</span> Event(事件名);</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(evt);<span class="comment">//抛发事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数(<span class="params">e</span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>接收和抛发对象必须一致，侦听事件类型必须和抛发事件类型一致，侦听在前，抛发在后。</p></li><li><p>侦听事件的函数中，有且仅有一个参数，就是抛发的事件对象。</p></li></ul></li><li><h5 id="解耦案例："><a href="#解耦案例：" class="headerlink" title="解耦案例："></a>解耦案例：</h5></li><li><h5 id="观察者模式、中介者模式"><a href="#观察者模式、中介者模式" class="headerlink" title="观察者模式、中介者模式"></a>观察者模式、中介者模式</h5></li><li><p>创建事件目标对象：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> EventTarget();</span><br><span class="line">t.addEventListener(事件名,函数);</span><br></pre></td></tr></table></figure></li><li><p>事件是针对事件目标对象的，来抛发内容；但并不是直接抛发过去，尤其是针对DOM元素，根据树形结构来传递事件。</p></li><li><h5 id="事件过程：捕获阶段（从外向内）、目标阶段、冒泡阶段（从内向外）"><a href="#事件过程：捕获阶段（从外向内）、目标阶段、冒泡阶段（从内向外）" class="headerlink" title="事件过程：捕获阶段（从外向内）、目标阶段、冒泡阶段（从内向外）"></a>事件过程：捕获阶段（从外向内）、目标阶段、冒泡阶段（从内向外）</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(事件类型,事件执行函数，是否捕获阶段触发/事件配置对象);</span><br></pre></td></tr></table></figure></li><li><p>事件类型(必须是字符串)：</p></li><li><p>系统事件类型，分为多个类型：Event、MouseEvent</p></li><li><p>事件执行函数：有且仅有一个参数，不能通过事件直接传入参数内容，因为<strong>事件执行函数是一个事件处理后回调的函数，所以只能传入函数名</strong>；<strong>如果传参就需要执行才可以</strong>，但是回调函数必须是函数名，因此不能在这里传参。</p></li><li><p>事件执行函数是一个回调执行的，在事件处理中并没有处理这个回调执行的结果===事件执行函数不能使return返回数据</p></li><li><p>事件执行函数里面的this发生了改变。</p></li><li><p>事件是否在捕获阶段被触发，默认是false===冒泡阶段触发。===改变事件触发顺序</p></li><li><p><code>e.stopPropagation();</code>事件对象中的方法===阻止传递。IE8及以下：<code>e.cancelBubble=ture;</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> evt=<span class="keyword">new</span> MouseEvent(<span class="string">"click"</span>,&#123;<span class="attr">bubbles</span>:<span class="literal">true</span>,<span class="attr">clientX</span>:<span class="number">100</span>,<span class="attr">clientY</span>:<span class="number">100</span>&#125;);</span><br><span class="line">div3.dispatchEvent(evt);</span><br><span class="line"><span class="comment">// 这样&#123;bubbles:true&#125;就会让抛发的事件冒泡</span></span><br></pre></td></tr></table></figure></li><li><p>事件配置对象：<code>{once:true}</code>//事件只触发一次</p></li><li><p>侦听的事件目标对象和被点击到的目标对象并不一定相同。</p></li><li><h5 id="在事件触发函数中"><a href="#在事件触发函数中" class="headerlink" title="在事件触发函数中"></a>在事件触发函数中</h5><ul><li><code>e.target</code>和 <code>e.srcElement</code>事件触发的目标对象</li><li><code>e.currentTarget</code>事件侦听的对象</li></ul></li><li><h5 id="事件委托：将子元素或者后代元素的事件委托给父元素，减少事件侦听的增加，防止内存泄漏。"><a href="#事件委托：将子元素或者后代元素的事件委托给父元素，减少事件侦听的增加，防止内存泄漏。" class="headerlink" title="事件委托：将子元素或者后代元素的事件委托给父元素，减少事件侦听的增加，防止内存泄漏。"></a>事件委托：将子元素或者后代元素的事件委托给父元素，减少事件侦听的增加，防止内存泄漏。</h5></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;DOM对象常用属性&lt;/li&gt;
&lt;li&gt;观察者模式、中介者模式&lt;/li&gt;
&lt;li&gt;事件委托&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://ankang.icu/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="设计模式" scheme="http://ankang.icu/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>DOM属性相关</title>
    <link href="http://ankang.icu/2021/03/27/DOM%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3/"/>
    <id>http://ankang.icu/2021/03/27/DOM属性相关/</id>
    <published>2021-03-27T08:34:56.000Z</published>
    <updated>2021-03-29T08:37:21.417Z</updated>
    
    <content type="html"><![CDATA[<ol><li>DOM的对象属性</li><li>标签属性</li><li>CSS样式获取、写入</li><li>纯函数概念</li></ol><a id="more"></a><h3 id="DOM属性"><a href="#DOM属性" class="headerlink" title="DOM属性"></a>DOM属性</h3><ul><li><p>标签属性：标签上表明的属性</p></li><li><p>标签属性分为<strong>默认标签属性</strong>和<strong>自定义标签属性</strong></p></li><li><p>自定义属性的命名和值必须使用小写和横线连接</p></li><li><p>DOM的对象属性也也分为默认属性和自定义属性</p></li><li><p>DOM的对象属性和标签属性 不一定相同 也不一定可以互相获取</p></li><li><p>DOM中的自定义属性和标签自定义属性是完全不能互相调用</p></li><li><p>有些标签默认属性可以通过DOM属性调用</p><ul><li><blockquote><p>title    id    src    href    alt    placeholder    type    value等</p></blockquote></li></ul></li><li><h5 id="class标签属性DOM属性调用时className"><a href="#class标签属性DOM属性调用时className" class="headerlink" title="class标签属性DOM属性调用时className"></a>class标签属性DOM属性调用时<code>className</code></h5></li><li><h5 id="先有标签，才可以渲染对象调用，也可以通过DOM对象设置标签的属性来达到重新渲染"><a href="#先有标签，才可以渲染对象调用，也可以通过DOM对象设置标签的属性来达到重新渲染" class="headerlink" title="先有标签，才可以渲染对象调用，也可以通过DOM对象设置标签的属性来达到重新渲染"></a>先有标签，才可以渲染对象调用，也可以通过DOM对象设置标签的属性来达到重新渲染</h5></li><li><h5 id="通过标签属性的修改添加才会引起重绘，增加对象属性不会引起重绘"><a href="#通过标签属性的修改添加才会引起重绘，增加对象属性不会引起重绘" class="headerlink" title="通过标签属性的修改添加才会引起重绘，增加对象属性不会引起重绘"></a>通过标签属性的修改添加才会引起重绘，增加对象属性不会引起重绘</h5><ul><li><blockquote><p>checked是标签属性checked的对象映射属性</p></blockquote></li></ul></li><li><p>DOM对象.setAttribute(“标签属性名”,”属性值”)//设置标签属性</p></li><li><p>DOM对象.removeAttribute(“标签属性名”,”属性值”)//删除标签属性</p></li><li><p>DOM对象.getAttribute(“标签属性名”,”属性值”)//根据标签属性名获取值</p><ul><li>标签属性可以直接看到，标签对象属性无法直接看到</li></ul></li><li><p>通过<code>div.style</code>添加标签的行内样式</p></li><li><p>style属性只能给DOM对象设置行内样式</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div.style.width=<span class="string">"50px"</span>;</span><br><span class="line">div.style.height=<span class="string">"50px"</span>;</span><br><span class="line">div.style.backgroundColor=<span class="string">"red"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);</span><br></pre></td></tr></table></figure></li><li><p><strong>对象属性样式写入</strong></p></li><li><p>设置样式时，只能设置非伪类、伪元素的DOM样式</p></li><li><p>设置样式时，如果样式属性名多个词汇组成 background-color，设置时去掉-并且把后面的字母变成大写=backgroundColor</p></li><li><p><code>div.style=&quot;width:50px;height:50px;background-color:red&quot;;</code></p></li><li><p><strong>直接行内样式写入</strong></p></li><li><p><code>div.style=&quot;width:50px;height:50px;background-color:red&quot;;</code></p></li><li><p><strong>获取样式</strong>：</p></li><li><p><code>console.log(div1.getComputedStyle(div1).width)</code></p></li><li><p>可以获取行内样式也可以获取CSS样式</p></li><li><p>有兼容问题，IE8及以下没有</p></li><li><p>IE8及以下使用：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(div1.currentStyle.left);</span><br><span class="line"><span class="built_in">console</span>.log(div1.currentStyle.width);</span><br></pre></td></tr></table></figure></li><li><p><strong>CSS样式</strong></p></li><li><p>获取：</p></li><li><p><code>var styleSheet=document.styleSheets[document.styleSheets.length-1];</code></p></li><li><p>添加样式标签：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IE都支持</span></span><br><span class="line">styleSheet.addRule(<span class="string">".div1"</span>,<span class="string">"width:50px;height:50px;background-color:red"</span>,<span class="number">0</span>);</span><br><span class="line">styleSheet.addRule(<span class="string">".div1:hover"</span>,<span class="string">"background-color:blue"</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//IE9以上支持</span></span><br><span class="line">styleSheet.insertRule(<span class="string">".div1 &#123;width:50px;height:50px;background-color:red&#125;"</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-assign-用于对象的合并"><a href="#Object-assign-用于对象的合并" class="headerlink" title="Object.assign()用于对象的合并"></a>Object.assign()用于对象的合并</h3><h3 id="纯函数："><a href="#纯函数：" class="headerlink" title="纯函数："></a>纯函数：</h3><p>没有调用全局的变量或者其他函数，独立自主的某一功能的函数，这种函数一般回通过参数传入需要处理的内容，完成后返回===抽象：不是解决某一个或者某一件具体的事情。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;DOM的对象属性&lt;/li&gt;
&lt;li&gt;标签属性&lt;/li&gt;
&lt;li&gt;CSS样式获取、写入&lt;/li&gt;
&lt;li&gt;纯函数概念&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数据驱动显示-表格的增删</title>
    <link href="http://ankang.icu/2021/03/26/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E6%98%BE%E7%A4%BA-%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%A2%9E%E5%88%A0/"/>
    <id>http://ankang.icu/2021/03/26/数据驱动显示-表格的增删/</id>
    <published>2021-03-26T08:28:46.000Z</published>
    <updated>2021-03-29T08:33:38.991Z</updated>
    
    <content type="html"><![CDATA[<p>通过数据变化引起显示相应改变</p><a id="more"></a><h3 id="数据驱动显示："><a href="#数据驱动显示：" class="headerlink" title="数据驱动显示："></a>数据驱动显示：</h3><ul><li><p>HTML部分</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>年<span class="symbol">&amp;emsp;</span>龄:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性<span class="symbol">&amp;emsp;</span>别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>电<span class="symbol">&amp;emsp;</span>话:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"all"</span> /&gt;</span>全选<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS部分</p></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript部分</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO数据驱动显示</span></span><br><span class="line"><span class="keyword">var</span> div1,table,inputs,btn,head,all;</span><br><span class="line"><span class="keyword">var</span> list=[];</span><br><span class="line">init();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div1=<span class="built_in">document</span>.querySelector(<span class="string">"#div"</span>)</span><br><span class="line">    inputs=<span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelector(<span class="string">"#div1"</span>).querySelectorAll(<span class="string">"input"</span>));</span><br><span class="line">    table=<span class="built_in">document</span>.querySelector(<span class="string">"table"</span>);</span><br><span class="line">    head=table.firstElementChild;</span><br><span class="line">    btn=<span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line">    btn.addEventListener(<span class="string">"click"</span>,addData);</span><br><span class="line">    all=<span class="built_in">document</span>.querySelector(<span class="string">"#all"</span>);</span><br><span class="line">    all.addEventListener(<span class="string">"click"</span>,allData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allData</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>===all)&#123;</span><br><span class="line">        list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            item.checked=all.checked;</span><br><span class="line">            <span class="comment">// console.log(this);</span></span><br><span class="line">            <span class="comment">// item.checked=this.checked;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        renderTable();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.checked=<span class="keyword">this</span>.checked;</span><br><span class="line">        all.checked=list.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.checked;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=inputs.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">value,item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.name===<span class="string">"sex"</span> &amp;&amp; item.checked) value[item.name]=item.value</span><br><span class="line">        <span class="comment">// else value[item.name]=item.value;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.name !== <span class="string">"sex"</span>) value[item.name] = item.value;</span><br><span class="line">        <span class="keyword">if</span>(item.name!==<span class="string">"sex"</span>) item.value=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,&#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">    obj[<span class="string">"del"</span>]=<span class="literal">false</span>;</span><br><span class="line">    list.push(obj);</span><br><span class="line">    renderTable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTable</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    table.innerHTML=<span class="string">""</span>;</span><br><span class="line">    table.appendChild(head);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">        createTr(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    all.checked=list.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.checked;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTr</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tr=<span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> data)&#123;</span><br><span class="line">        <span class="keyword">var</span> td=<span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line">        <span class="keyword">switch</span>(prop)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"checked"</span>:</span><br><span class="line">                <span class="keyword">var</span> ck=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">                ck.type=<span class="string">"checkbox"</span>;</span><br><span class="line">                td.appendChild(ck);</span><br><span class="line">                ck.data=data;</span><br><span class="line">                ck.checked=data.checked;</span><br><span class="line">                ck.addEventListener(<span class="string">"click"</span>,allData)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"del"</span>:</span><br><span class="line">                <span class="keyword">var</span> del=<span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span><br><span class="line">                del.textContent=<span class="string">"删除"</span>;</span><br><span class="line">                td.appendChild(del);</span><br><span class="line">                del.data=data;</span><br><span class="line">                del.addEventListener(<span class="string">"click"</span>,delData);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                td.textContent=data[prop];</span><br><span class="line">        &#125;</span><br><span class="line">        tr.appendChild(td);</span><br><span class="line">    &#125;</span><br><span class="line">    table.appendChild(tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delData</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data=<span class="keyword">this</span>.data;</span><br><span class="line">    list=list.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item!==data;</span><br><span class="line">    &#125;)</span><br><span class="line">    renderTable()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过数据变化引起显示相应改变&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOM对象相关</title>
    <link href="http://ankang.icu/2021/03/26/DOM%E5%AF%B9%E8%B1%A1%E7%9B%B8%E5%85%B3/"/>
    <id>http://ankang.icu/2021/03/26/DOM对象相关/</id>
    <published>2021-03-26T08:28:01.000Z</published>
    <updated>2021-03-29T08:31:54.069Z</updated>
    
    <content type="html"><![CDATA[<ol><li>DOM节点的遍历</li><li>DOM中元素与节点</li><li>元素的删除与替换</li></ol><a id="more"></a><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM:"></a>DOM:</h3><ul><li><p>节点遍历和增删查改</p></li><li><p>document.body//body</p></li><li><p>document.title//title</p></li><li><p>document.head//head</p></li><li><p>document.documentElement//html标签</p></li><li><p>document//是整个文档</p></li><li><p>document.URL//location.href</p></li><li><p>document.domain//域名</p></li><li><p>document.styleSheets//CSS的style列表</p></li><li><p>document.body.parentElement//父元素</p></li><li><p>document.body.parentNode//父节点</p><ul><li>任何元素的父元素和父节点是相同的，除了文本和注释类型</li></ul></li><li><p>div.children//子元素 HTML标签</p><ul><li>元素就是HTML标签，不包含注释、文本、换行、文档。</li></ul></li><li><p>div.childNodes//子节点</p></li><li><p>div.firstChild//第一个子节点</p></li><li><p>div.firstElementChild//第一个子元素</p></li><li><p>div.lastChild//最后一个子节点</p></li><li><p>div.lastElementChild//最后一个子元素</p></li><li><p>div.previousSibling向上一个兄弟节点</p></li><li><p>div.previousElementSibling向上一个兄弟元素</p></li><li><p>div.nextSibling向下一个兄弟节点</p></li><li><p>div.nextElementSibling向下一个兄弟元素</p></li><li><blockquote><p>HTMLDivElement–&gt;HTMLElement–&gt;Element–&gt;Node–&gt;EventTarget–&gt;Object</p></blockquote></li><li><p>判断类型</p><ul><li>标签的构造函数</li><li>标签的nodeName</li></ul></li><li><p>在Node中分支—文档、元素类型</p></li><li><p>创建容器</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem= <span class="built_in">document</span>.createElement(<span class="string">"标签名"</span>)</span><br><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.creatElement(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.appendChild(div)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem=<span class="built_in">document</span>.creatDocumentFragment();<span class="comment">//创建文档碎片容器</span></span><br></pre></td></tr></table></figure></li><li><p>图片的创建</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br></pre></td></tr></table></figure></li><li><p>元素插入的位置：</p></li><li><p>将某个元素添加再父元素里面的尾部</p><ul><li><blockquote><p>父元素.appendChild(子元素)</p></blockquote></li></ul></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertPrev</span>(<span class="params">newElem,targetElem</span>)</span>&#123;</span><br><span class="line">    targetElem.parentElement.insertBefore(newElem,targetElem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertNext</span>(<span class="params">newElem,targetElem</span>)</span>&#123;</span><br><span class="line">    targetElem.parentElement.insertBefore(newElem,targetElem.nextSibling);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warp</span>(<span class="params">newElem,targetElem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parent=targetElem.parentElement;</span><br><span class="line">    <span class="keyword">var</span> next=targetElem.nextSibling;</span><br><span class="line">    newElem.appendChild(targetElem);</span><br><span class="line">    parent.insertBefore(newElem,next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>元素的复制</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新元素=原元素.cloneNode(false) 可以复制原标签的所有属性和样式，不包含内容和后代元素</span></span><br><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div1.style.color=<span class="string">"red"</span>;</span><br><span class="line">div1.innerHTML=<span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div2=div1.cloneNode(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div5=div3.cloneNode(<span class="literal">true</span>);<span class="comment">//深复制，可以将内容和后代一起复制</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div5);</span><br><span class="line"><span class="comment">// 所有具有id的标签都需要重新定义id</span></span><br><span class="line">node.cloneNode(<span class="literal">false</span>) <span class="comment">//浅复制</span></span><br><span class="line">node.cloneNode(<span class="literal">true</span>) <span class="comment">//深复制</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div1.remove();<span class="comment">//自己删除自己</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(div1);<span class="comment">//通过父元素删除子元素</span></span><br></pre></td></tr></table></figure></li><li><p>替换</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父元素.replaceChild(新元素,要替换元素)</span></span><br><span class="line"><span class="built_in">document</span>.body.replaceChild(div2,div1);</span><br></pre></td></tr></table></figure></li><li><p><code>textContent</code>===获取设置元素的文本节点</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div1.textContent<span class="comment">//所有文本节点及其后代的所有文本节点</span></span><br><span class="line">div1.textContent=<span class="string">"abc"</span>;<span class="comment">//将div1中的所有元素替换为这个abc的文本节点</span></span><br></pre></td></tr></table></figure></li><li><p>文本节点：txtNode</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txtNode=<span class="built_in">document</span>.createTextNode(<span class="string">"文本内容"</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li>数据驱动显示</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;DOM节点的遍历&lt;/li&gt;
&lt;li&gt;DOM中元素与节点&lt;/li&gt;
&lt;li&gt;元素的删除与替换&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>history与hash实现历史记录</title>
    <link href="http://ankang.icu/2021/03/25/history%E4%B8%8Ehash%E5%AE%9E%E7%8E%B0%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
    <id>http://ankang.icu/2021/03/25/history与hash实现历史记录/</id>
    <published>2021-03-25T12:18:20.000Z</published>
    <updated>2021-03-27T12:25:18.687Z</updated>
    
    <content type="html"><![CDATA[<ol><li>历史记录的回退与记录</li><li>hash与history</li></ol><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = &#123;</span></span><br><span class="line">        vegetables: [</span><br><span class="line"><span class="javascript">            <span class="string">"大白菜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"娃娃菜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"油麦菜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"菠菜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"莲藕"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"春笋"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"韭菜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"胡萝卜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"大葱"</span>,</span></span><br><span class="line">        ],</span><br><span class="line">        fruit: [</span><br><span class="line"><span class="javascript">            <span class="string">"苹果"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"西瓜"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"柚子"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"梨"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"香蕉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"樱桃"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"草莓"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"榴莲"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"桃子"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"杏"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"橘子"</span>,</span></span><br><span class="line">        ],</span><br><span class="line">        oil: [</span><br><span class="line"><span class="javascript">            <span class="string">"大米"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"小米"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"黄米"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"黄豆"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"绿豆"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"红豆"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"精面"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"莜面"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"花生油"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"大豆油"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"橄榄油"</span>,</span></span><br><span class="line">        ],</span><br><span class="line">        meat: [</span><br><span class="line"><span class="javascript">            <span class="string">"牛肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"羊肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"鸡肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"猪肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"鸭肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"鱼肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"驴肉"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"鸡蛋"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"鸭蛋"</span>,</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="history历史记录："><a href="#history历史记录：" class="headerlink" title="history历史记录："></a>history历史记录：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"vegetables"</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"fruit"</span>&gt;</span>瓜果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"oil"</span>&gt;</span>粮油<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"meat"</span>&gt;</span>禽肉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prev,lis,div1;</span><br><span class="line">init();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">    lis=<span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>));</span><br><span class="line">    lis.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        item.addEventListener(<span class="string">"click"</span>,clickLiTab);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">window</span>.onpopstate=popChange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popChange</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!e.state) <span class="keyword">return</span>;</span><br><span class="line">    changeTab(<span class="built_in">document</span>.querySelector(<span class="string">"#"</span>+location.hash.slice(<span class="number">1</span>)));</span><br><span class="line">    render(e.state);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickLiTab</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    changeTab(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> data=list[<span class="keyword">this</span>.id];</span><br><span class="line">    render(data);</span><br><span class="line">    history.pushState(data,<span class="keyword">this</span>.id,<span class="string">"#"</span>+<span class="keyword">this</span>.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeTab</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prev) prev.style.backgroundColor=<span class="string">"skyblue"</span>;</span><br><span class="line">    prev=elem;</span><br><span class="line">    prev.style.backgroundColor=<span class="string">"darkblue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    div1.innerHTML=<span class="string">"&lt;ul&gt;"</span>+data.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">value,item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value+=<span class="string">"&lt;li&gt;"</span>+item+<span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">    &#125;,<span class="string">""</span>)+<span class="string">"&lt;/ul&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash历史记录："><a href="#hash历史记录：" class="headerlink" title="hash历史记录："></a>hash历史记录：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"vegetables"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#vegetables"</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"fruit"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fruit"</span>&gt;</span>瓜果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"oil"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#oil"</span>&gt;</span>粮油<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"meat"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#meat"</span>&gt;</span>禽肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1,prev;</span><br><span class="line">init();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div1=<span class="built_in">document</span>.querySelector(<span class="string">"#div1"</span>);</span><br><span class="line">    <span class="built_in">window</span>.onhashchange=hashChange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id=location.hash.slice(<span class="number">1</span>);</span><br><span class="line">    changeTab(id);</span><br><span class="line">    <span class="keyword">var</span> data=list[id];</span><br><span class="line">    render(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeTab</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prev) prev.style.backgroundColor=<span class="string">"skyblue"</span>;</span><br><span class="line">    prev=<span class="built_in">document</span>.querySelector(<span class="string">"#"</span>+elem);</span><br><span class="line">    prev.style.backgroundColor=<span class="string">"darkblue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    div1.innerHTML=<span class="string">"&lt;ul&gt;"</span>+data.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">value,item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value+=<span class="string">"&lt;li&gt;"</span>+item+<span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">    &#125;,<span class="string">""</span>)+<span class="string">"&lt;/ul&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;历史记录的回退与记录&lt;/li&gt;
&lt;li&gt;hash与history&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="历史记录" scheme="http://ankang.icu/tags/%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>BOM与DOM</title>
    <link href="http://ankang.icu/2021/03/25/BOM%E4%B8%8EDOM/"/>
    <id>http://ankang.icu/2021/03/25/BOM与DOM/</id>
    <published>2021-03-25T12:11:21.000Z</published>
    <updated>2021-03-27T12:17:04.723Z</updated>
    
    <content type="html"><![CDATA[<ol><li>BOM对象与DOM对象</li><li>hash与history的区别</li></ol><a id="more"></a><h3 id="Data"><a href="#Data" class="headerlink" title="Data:"></a>Data:</h3><ul><li><p><code>var date=new Date();</code></p></li><li><p>打印时，由对象转换为字符串</p></li><li><p><code>date.getFullYear()</code></p></li><li><p><code>date.getMonth()</code>获取月份，0-11，大于11，进位，年增加1；</p></li><li><p><code>date.getDate()</code>日期</p></li><li><p><code>date.getDay()</code>星期</p></li><li><p><code>date.getHours()</code></p></li><li><p><code>date.getMinutes()</code></p></li><li><p><code>date.getSeconds()</code></p></li><li><p><code>date.getMilliseconds()</code>毫秒</p></li><li><p><code>date.getUTCHours()</code>国际时间（格林尼治时间）</p></li><li><p><code>date.getTime()</code>从1970.1.1.0到现在的毫秒数</p><ul><li><p>时间戳</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"地址?time"</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br></pre></td></tr></table></figure></li><li><p>计算时差</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">timeStart: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> timeList.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) - <span class="number">1</span>;</span><br><span class="line">&#125;,</span><br><span class="line">timeEnd: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeList[id] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - timeList[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeStart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> timeList.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeEnd</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - timeList[id];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id1 = Utils.timeStart();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> id2 = Utils.timeStart();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Utils.timeEnd(id1))</span><br><span class="line"><span class="built_in">console</span>.log(Utils.timeEnd(id2))</span><br></pre></td></tr></table></figure></li><li><p>倒计时</p><ul><li><p>时钟案例</p></li><li><p>秒表案例</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">date.setMinutes(date.getMinutes()+<span class="number">5</span>);</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s=<span class="built_in">parseInt</span>((date.getTime()-<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())/<span class="number">1000</span>);</span><br><span class="line">    div1.innerHTML=<span class="built_in">parseInt</span>(s/<span class="number">60</span>)+<span class="string">":"</span>+s%<span class="number">60</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>var date=new *Date*();</code></p></li><li><p><code>date.setFullYear()</code>设置年</p></li><li><p><code>date.setMonth()</code>//0-11 如果大于11就会进位 年增加</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var date=new Date();</span><br><span class="line">var date1=new Date(date);</span><br><span class="line">var date1=new Date(date.getTime());</span><br><span class="line">var date1=new Date(2022,06,05,15,30,20);</span><br><span class="line">console.log(date1);</span><br></pre></td></tr></table></figure></li></ul><h3 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h3><ul><li><p>DOM的节点</p><ul><li>标签就是节点，文本、注释、文档、属性</li><li>document.body.childNodes//所有节点</li></ul></li><li><p>节点获取</p><ul><li><p>ID值：一个元素一旦赋值ID默认存在window对象下</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br></pre></td></tr></table></figure></li><li><p>标签名===   <code>HTMLCollection</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></li><li><p>标签class获取元素列表===<code>HTMLCollection</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"divs"</span>);</span><br></pre></td></tr></table></figure></li><li><p>input标签的name值获取NodeList列表</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputs=<span class="built_in">document</span>.getElementsByName(<span class="string">"sex"</span>);</span><br></pre></td></tr></table></figure></li><li><p>document.querySelector()//根据选择器获取单个标签</p></li><li><p>document.querySelectorAll()//根据选择器获取多个标签的列表NodeList</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">"#div1"</span>);</span><br><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">".divs"</span>);</span><br><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">"div&gt;div"</span>);</span><br><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">"div.div1"</span>);<span class="comment">//div下子元素.div1</span></span><br><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">"div .div1"</span>);<span class="comment">//div下所有.div元素</span></span><br><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">"[type!=text]"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="BOM："><a href="#BOM：" class="headerlink" title="BOM："></a>BOM：</h3><ul><li><p>window对象</p><ul><li><code>open()</code>弹出窗口</li><li><code>close()</code></li><li><code>innerWidth/innerHeight</code>窗口中文档的宽高//<strong>只读</strong></li><li><code>outerWidth/outerHeight</code>窗口的宽高//<strong>只读</strong></li><li><code>screenX/screenY</code>窗口左上角坐标</li><li><code>screenTop/screenLeft</code>窗口左上角坐标</li></ul></li><li><h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><ul><li><p><code>reload()</code>重载，刷新当前页面</p></li><li><p><code>location.href=&quot;&quot;</code>跳转网页</p><ul><li>href是一个可读可写的属性</li><li>中文使用URI编码格式</li></ul></li><li><p><code>location.assign=&quot;&quot;</code>跳转网页</p><ul><li>assign是个方法，只能执行</li></ul></li><li><p><code>location.replace=&quot;&quot;</code>替换网页，没有历史记录</p></li><li><h4 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h4><ul><li>地址#号后内容</li><li>锚点：<ul><li>标签的ID</li><li>超链接a标签的name</li></ul></li><li>区分当前访问的内容，同一个页面，hash不一样，可能不一样</li></ul></li><li><p>location.search</p><ul><li>？号后的内容，添加会刷新页面</li></ul></li><li><p>location.host//返回当前 URL 的主机名称和端口号</p></li><li><p>location.pathname//返回当前路径</p></li><li><p>location.port//返回当前 URL 的端口号</p></li><li><p>location.protocol//协议</p></li><li><p>location.origin//返回URL的协议,主机名和端口号</p></li></ul></li><li><h4 id="hash与history"><a href="#hash与history" class="headerlink" title="hash与history"></a>hash与history</h4><ul><li><p>hash可以创建历史记录，并且在地址栏中增加#内容</p></li><li><p>超链接设置name跳转</p></li><li><p><strong><em>hash增加时不刷新页面</em></strong></p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;&lt;/div&gt;</span><br><span class="line">var div1=document.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">    div1.innerHTML=Date.now();</span><br><span class="line">    document.onclick=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        location.href=location.href+<span class="string">"#abc"</span>;</span><br><span class="line">        // location.href=location.href+<span class="string">"?time="</span>+Date.now();</span><br><span class="line">        // location.href=<span class="string">"./a.html"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>history.back();回退历史记录</p></li><li><p>history.forward();向前历史</p></li><li><p>history.go();</p><ul><li>-1：回退</li><li>1：前进</li><li>0：刷新页面</li></ul></li><li><h5 id="history-pushState-插入状态"><a href="#history-pushState-插入状态" class="headerlink" title="history.pushState();插入状态"></a>history.pushState();插入状态</h5></li><li><h5 id="history-replaceState-替换状态"><a href="#history-replaceState-替换状态" class="headerlink" title="history.replaceState();替换状态"></a>history.replaceState();替换状态</h5></li></ul></li><li><h4 id="window-onpopstate事件：当浏览器产生前进回退时被激活，history查看历史记录state数据变化"><a href="#window-onpopstate事件：当浏览器产生前进回退时被激活，history查看历史记录state数据变化" class="headerlink" title="window.onpopstate事件：当浏览器产生前进回退时被激活，history查看历史记录state数据变化"></a>window.onpopstate事件：当浏览器产生前进回退时被激活，<strong><em>history</em></strong>查看历史记录state数据变化</h4></li><li><h4 id="hash用-window-onhashchange事件：表示hash发生变化"><a href="#hash用-window-onhashchange事件：表示hash发生变化" class="headerlink" title="hash用 window.onhashchange事件：表示hash发生变化"></a>hash用 window.onhashchange事件：表示hash发生变化</h4></li><li><p>screen对象</p><ul><li><code>screen.availWidth/availHeight</code>//屏幕中不包含任务栏的宽高</li><li><code>screen.width/height</code>//全屏幕的宽高</li></ul></li><li><p>navigator对象</p><ul><li><code>navigator.userAgent</code>//返回由客户机发送服务器的user-agent 头部的值</li><li><code>navigator.appName</code>//返回浏览器的名称</li><li><code>navigator.appVersion</code>//返回浏览器的平台和版本信息</li><li><code>navigator.appCodeName</code>//返回浏览器的代码名</li><li><code>navigator.platform</code>//操作系统平台</li><li><code>navigator.getCurrentPosition(fn,fn)</code>获取经纬度位置</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;BOM对象与DOM对象&lt;/li&gt;
&lt;li&gt;hash与history的区别&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>排序及内建对象的应用</title>
    <link href="http://ankang.icu/2021/03/24/%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%86%85%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://ankang.icu/2021/03/24/排序及内建对象的应用/</id>
    <published>2021-03-24T08:32:34.000Z</published>
    <updated>2021-03-27T08:38:10.581Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数组排序</li><li>内建对象Math、String</li><li>hash数据处理</li><li>随机取色，随机验证码</li><li>模糊查询</li></ol><a id="more"></a><h3 id="遍历："><a href="#遍历：" class="headerlink" title="遍历："></a>遍历：</h3><p><code>for</code>循环：遍历数组的每一个元素，<strong>包含空元素</strong>，以数字下标遍历所有元素，<strong>不包含数组的属性和方法</strong>。</p><p><code>forEach</code>遍历<strong>除空元素外的所有其他元素</strong>，<strong>不遍历数组的属性和方法</strong>。</p><p><code>for(i in arr)</code>将数组的下标转换为字符串，并且<strong>遍历所有非空元素和数组的方法和属性</strong>。</p><h3 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">7</span>];</span><br></pre></td></tr></table></figure></li><li><p>桶排序</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    obj[arr[i]]=arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">//将数组内容转换为对象中，自动按照下标排序</span></span><br></pre></td></tr></table></figure></li><li><p>冒泡排序</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;arr.length<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">var</span> temp=arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择排序</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> min=i;</span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;arr.lemgth;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[min]&gt;arr[j]) min=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i!==min)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[min];</span><br><span class="line">        arr[min]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快速排序 ===&gt; 递归</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(elem.length&lt;=<span class="number">1</span>) <span class="keyword">return</span> elem;</span><br><span class="line">    <span class="keyword">var</span> pivotIndex=<span class="built_in">Math</span>.floor(elem.length/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> pivot=elem.splice(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> left=[];<span class="keyword">var</span> right=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;elem.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(elem[i]&lt;pivot) left.push(elem[i]);</span><br><span class="line">        <span class="keyword">else</span> right.push(elem[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot],quickSort(right));</span><br><span class="line">&#125;</span><br><span class="line">arr=quickSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse:"></a><code>reverse</code>:</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1=arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure></li><li><p>反转数组，返回原数组</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_reverse</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">parseInt</span>(arr.length/<span class="number">2</span>);i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp=arr[arr.length<span class="number">-1</span>-i];</span><br><span class="line">        arr[arr.length<span class="number">-1</span>-i]=arr[i];</span><br><span class="line">        arr[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">array_recerse(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort:"></a><code>sort</code>:</h3><ul><li><p>默认转换为字符串排序，数字按照第一位排序（Ascii码）</p></li><li><p>中文按照UTF-8排序</p></li><li><p>重构采用选择排序</p></li><li><p>数组实现随机排序：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>;</span><br><span class="line">    <span class="comment">//随机数的减数大于0.5的概率增大时，数组中从大到小的概率变大</span></span><br><span class="line">    <span class="comment">//随机数的减数小于0.5的概率增大时，数组中从小到大的概率变大</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>随机生成0-99以内的10个数：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、</span></span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="keyword">while</span>(arr.length&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(arr.index(n)&lt;<span class="number">0</span>) arr.push(n);</span><br><span class="line">&#125;</span><br><span class="line">consle.loh(arr);</span><br><span class="line"><span class="comment">//2、</span></span><br><span class="line"><span class="keyword">var</span> arr=<span class="built_in">Array</span>(<span class="number">100</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;<span class="keyword">return</span> index&#125;);</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>&#125;);</span><br><span class="line">arr.length=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><h3 id="二维数组："><a href="#二维数组：" class="headerlink" title="二维数组："></a>二维数组：</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    arr[i]=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        arr[i][j]=i*<span class="number">10</span>+j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>][<span class="number">6</span>]);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math:"></a>Math:</h3><p><code>Math.PI</code>:角度转弧度：<code>Math.PI/180*60</code>//角度转弧度</p><p><code>Math.abs()</code>绝对值</p><p><code>Math.ceil(-3.6);</code>向上取整//-3</p><p><code>Math.floor(-3.6);</code>向下取整//-4</p><p><code>Math.round(-3.6);</code>四舍五入//-4</p><p>求数组的最大/最小值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr));<span class="comment">//求数组的最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr));<span class="comment">//求数组的最小值</span></span><br></pre></td></tr></table></figure><p><code>Math.pow(2,2);</code>//4：求幂</p><p><code>Math.sqrt(4);</code>开根号</p><p><code>Math.random();</code>//0-1：随机数；不包含0/1</p><p>随机取一个范围的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">min,max</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min)+min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机取色："><a href="#随机取色：" class="headerlink" title="随机取色："></a>随机取色：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> col=<span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        col+=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">16</span>).toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> col=<span class="string">"rgb("</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        col+=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>)+<span class="string">","</span>;</span><br><span class="line">    col=col.slice(<span class="number">0</span>,<span class="number">-1</span>)+<span class="string">")"</span>;</span><br><span class="line">    <span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params">a,r,g,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> col=<span class="string">"rgba("</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        col+=((<span class="built_in">isNaN</span>(<span class="built_in">arguments</span>[i+<span class="number">1</span>]) || <span class="built_in">arguments</span>[i+<span class="number">1</span>]&gt;<span class="number">255</span> || <span class="built_in">arguments</span>[i+<span class="number">1</span>]&lt;<span class="number">0</span>) ? <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>) : <span class="built_in">Math</span>.floor(<span class="built_in">arguments</span>[i+<span class="number">1</span>]))+<span class="string">","</span>;</span><br><span class="line">    col+=(<span class="built_in">isNaN</span>(a) ? <span class="built_in">Math</span>.random().toFixed(<span class="number">2</span>) : a)+<span class="string">")"</span>;</span><br><span class="line">    <span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String："><a href="#String：" class="headerlink" title="String："></a>String：</h3><p><code>var str=&quot;abc&quot;;</code>字符串不能修改</p><p><code>console.log(str.length);</code>字符串长度是只读属性</p><p><code>console.log(str[0]);</code>可以使用下标获取元素，只读===<code>str.charAt(0)</code></p><p><code>str.charCodeAt(0);</code>获取第0个字符Ascii</p><p><code>indexOf</code>/<code>lastIndexOf</code> 查找字符在字符串中的下标</p><p><code>includes</code>：判断是否在字符串中存在</p><p><code>search</code>用于正则表达式查找</p><p><code>match</code>用于正则表达式</p><p><code>replace</code>替换并且返回新字符串，用于正则表达式</p><p><code>slice</code></p><p><code>substr</code>从第几个开始截取，第二个参数代表截取多少个字符，开始位置可以使用负数，倒数第几个</p><p><code>substring</code>从下标为几开始到多少结束的字符串，不能从负数开始==&gt;默认为0；可以倒着截取</p><p><code>&quot;abc&quot;.toUpperCase()</code>/ <code>&quot;ABC&quot;.toLowerCase()</code> 转换大小写</p><p>首字母大写</p><p><code>split</code>与数组的join相反，以什么分割；正则表达式切割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"a#b#c#d#e#f"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">"#"</span>));</span><br></pre></td></tr></table></figure><h3 id="地址栏search-hash数据变成对象："><a href="#地址栏search-hash数据变成对象：" class="headerlink" title="地址栏search/hash数据变成对象："></a>地址栏search/hash数据变成对象：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url=<span class="string">"http://www.163.com/new/index.html?token=ashjd2i1nsdh21df2123&amp;name=xietian&amp;age=30"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObject</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> url.split(<span class="string">"?"</span>)[<span class="number">1</span>].split(<span class="string">"&amp;"</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">value,item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr=item.split(<span class="string">"="</span>);</span><br><span class="line">        value[arr[<span class="number">0</span>]]=<span class="built_in">isNaN</span>(arr[<span class="number">1</span>]) ? arr[<span class="number">1</span>] : <span class="built_in">Number</span>(arr(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="number">0</span>=getObject(url);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure><h3 id="随机验证码："><a href="#随机验证码：" class="headerlink" title="随机验证码："></a>随机验证码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=getAuth();</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAuth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">48</span>;i&lt;<span class="number">123</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">57</span> &amp;&amp; i&lt;<span class="number">65</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">90</span> &amp;&amp; i&lt;<span class="number">97</span>) <span class="keyword">continue</span>;</span><br><span class="line">        arr.push(<span class="built_in">String</span>.fromCharCode(i));</span><br><span class="line">    &#125;</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    arr.length=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模糊查找"><a href="#模糊查找" class="headerlink" title="模糊查找"></a>模糊查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"input"</span>&gt;</span><br><span class="line">&lt;ul id=<span class="string">"ul"</span>&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">var arr=[</span><br><span class="line">    &#123;id:1001,name:<span class="string">"计算器"</span>,price:26&#125;,</span><br><span class="line">    &#123;id:1002,name:<span class="string">"计算机"</span>,price:26&#125;,</span><br><span class="line">    &#123;id:1003,name:<span class="string">"飞机"</span>,price:26&#125;,</span><br><span class="line">    &#123;id:1004,name:<span class="string">"飞行器"</span>,price:26&#125;,</span><br><span class="line">    &#123;id:1005,name:<span class="string">"算盘"</span>,price:26&#125;,</span><br><span class="line">    &#123;id:1006,name:<span class="string">"电器"</span>,price:26&#125;,</span><br><span class="line">    &#123;id:1007,name:<span class="string">"电视机"</span>,price:26&#125;,</span><br><span class="line">]</span><br><span class="line">var input=document.getElementById(<span class="string">"input"</span>);</span><br><span class="line">var ul=document.getElentById(<span class="string">"ul"</span>);</span><br><span class="line">input.onput=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">ul.innerHtml=arr.reduce(<span class="keyword">function</span>(value,item)&#123;</span><br><span class="line"><span class="keyword">if</span>(item.name.indexOf(input.value)&gt;-1) value+=<span class="string">"&lt;li&gt;"</span>+item.name+<span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line"><span class="built_in">return</span> value;</span><br><span class="line">&#125;,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;数组排序&lt;/li&gt;
&lt;li&gt;内建对象Math、String&lt;/li&gt;
&lt;li&gt;hash数据处理&lt;/li&gt;
&lt;li&gt;随机取色，随机验证码&lt;/li&gt;
&lt;li&gt;模糊查询&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数组常用方法重构与应用</title>
    <link href="http://ankang.icu/2021/03/23/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E9%87%8D%E6%9E%84%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>http://ankang.icu/2021/03/23/数组常用方法重构与应用/</id>
    <published>2021-03-23T12:46:02.000Z</published>
    <updated>2021-03-27T07:40:09.222Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数组常用方法</li><li>实现重构</li><li>常用方法的应用</li></ol><a id="more"></a><h3 id="数组方法："><a href="#数组方法：" class="headerlink" title="数组方法："></a>数组方法：</h3><ul><li><p><code>splice</code></p></li><li><p><code>arr.splice(起始的位置，删除的个数，添加的元素（可以是多个）)</code></p></li><li><p>返回删除的元素构成的新数组，无引用关系</p></li><li><p>替换</p></li><li><p><code>arr.splice()</code>//返回一个空数组</p></li><li><p><code>arr.splice(0)</code>//把数组中所有元素删除，放在新数组中，清空原数组</p></li><li><p><code>arr.splice(1)</code>//从下标为1清除到数组尾部</p></li><li><p><code>arr.splice(-2)</code>//从倒数第二项删除到尾部</p></li><li><p><code>arr.splice(1,2)</code>//从第一位删除两个元素</p></li><li><p><code>arr.splice(-2,1)</code>//从倒数第二项删除一个元素</p></li><li><p><code>arr.splice(-1,0,1)</code>//在倒数第一位前插入一个1</p></li><li><p><code>arr.splice(0,0,-1)</code>//在最前面插入一个-1</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_splice</span>(<span class="params">arr, start, deleteCount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">undefined</span> || arr.constructor !== <span class="built_in">Array</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"参数错误"</span>);</span><br><span class="line">    <span class="keyword">if</span> (start === <span class="literal">undefined</span>) <span class="keyword">return</span> arr1;</span><br><span class="line">    start = <span class="built_in">Number</span>(start);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(start)) start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) start = start + arr.length &lt; <span class="number">0</span> ? <span class="number">0</span> : start + arr.length;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; arr.length) start = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (deleteCount === <span class="literal">undefined</span>) deleteCount = arr.length - start;</span><br><span class="line">    deleteCount = <span class="built_in">Number</span>(deleteCount);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(deleteCount)) deleteCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (deleteCount &lt; <span class="number">0</span>) <span class="keyword">return</span> arr1;</span><br><span class="line">    <span class="keyword">if</span> (deleteCount + start &gt; arr.length) deleteCount = arr.length - start;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; deleteCount + start) arr1[arr1.length] = arr[i];</span><br><span class="line">        arr[i] = arr[i + deleteCount];</span><br><span class="line">  &#125;</span><br><span class="line">    arr.length -= deleteCount;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length - <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> l = (arr.length += len);</span><br><span class="line">    <span class="keyword">while</span> (l &gt; start) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; start + len) arr[l - <span class="number">1</span>] = arr[l - len - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> arr[l - <span class="number">1</span>] = <span class="built_in">arguments</span>[<span class="number">3</span> + (l - <span class="number">1</span> - start)];</span><br><span class="line">        l--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = array_splice(arr, <span class="number">7</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr, arr1);</span><br></pre></td></tr></table></figure></li><li><p><code>slice</code>不会改变原数组，将指定的起始位置到结束位置的元素放在一个新数组中返回</p></li><li><p><code>arr.slice()</code>复制数组，无引用关系</p></li><li><p><code>arr.slice(3)</code>从下标3开始到数组尾部</p></li><li><p><code>arr.slice(-2)</code>//从倒数第二个开始到数组尾部</p></li><li><p><code>arr.slice(2,-1)</code>从第二位到数组的倒数第一位</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_slice</span>(<span class="params">arr,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1=[];</span><br><span class="line">    <span class="keyword">if</span>(start===<span class="literal">undefined</span> || <span class="built_in">isNaN</span>(start)) start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(end===<span class="literal">undefined</span> || <span class="built_in">isNaN</span>(end)) end=arr.length;</span><br><span class="line">    start=<span class="built_in">parseInt</span>(start);</span><br><span class="line">    end=<span class="built_in">parseInt</span>(end);</span><br><span class="line">    <span class="keyword">if</span>(start&lt;<span class="number">0</span>) start=(start+arr.length)&lt;<span class="number">0</span> ? <span class="number">0</span> : start+arr.length;</span><br><span class="line">    <span class="keyword">if</span>(end&lt;<span class="number">0</span>) end=(end+arr.length)&lt;<span class="number">0</span> ? <span class="number">0</span> : end+arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=start;i&lt;end;i++)&#123;</span><br><span class="line">        arr1[arr1.length]=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1= array_slice(arr,<span class="number">1</span>,<span class="number">-7</span>);</span><br><span class="line"><span class="keyword">var</span> arr2=arr.slice(<span class="number">1</span>,<span class="number">-7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);</span><br></pre></td></tr></table></figure></li><li><p><code>forEach</code>不返回新数组</p></li><li><p>遍历数组</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>:<span class="number">5</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> arr1=arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// item.a=10;</span></span><br><span class="line">    item=&#123;<span class="attr">a</span>:<span class="number">10</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_forEach</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> arr) fn(arr[i],i,arr);</span><br><span class="line">        <span class="comment">//if判断是为了将数组中未定义的元素不显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">array_forEach(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index,arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>map</code>会返回一个新数组，长度与原数组必须相同</p></li><li><p><code>map</code>中回调函数里使用return可以将需要的每个元素数据返回给新数组中对应的位置</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_map</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123; </span><br><span class="line">       <span class="keyword">if</span>(i <span class="keyword">in</span> arr) arr1[i]=fn(arr[i],i,arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> arr1=array_map(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item+<span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br></pre></td></tr></table></figure></li><li><p><code>some</code></p></li><li><p>当数组元素中有一个满足回调函数中的条件，则返回true,并且不再继续遍历判断</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_some</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> arr &amp;&amp; <span class="built_in">Boolean</span>(fn(arr[i],i,arr))) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bool=array_some(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(bool);</span><br></pre></td></tr></table></figure></li><li><p><code>every</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_every</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> arr &amp;&amp; !(fn(arr[i],i,arr))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bool=array_every(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(bool);</span><br></pre></td></tr></table></figure></li><li><p><code>filter</code></p></li><li><p>筛选，从数组中挑选出满足条件的数据形成新数组（不可修改）</p></li><li><p>重构：回调函数返回为true时，将元素添加到新数组的尾部</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_filter</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> arr &amp;&amp; fn(arr[i],i,arr)) arr1[arr1.length]=arr[i];</span><br><span class="line">        <span class="comment">//回调函数返回为true时，将元素添加到新数组的尾部</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1=array_filter(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;=<span class="number">3</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure></li><li><p><code>reduce</code></p></li><li><p>归并，从数组中通过各种处理，最后返回一个结果</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> val=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">value,item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//value就是开始到结束的归并值</span></span><br><span class="line">    <span class="built_in">console</span>.log(value,item);</span><br><span class="line">    <span class="keyword">return</span> value+item;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_reduce</span>(<span class="params">arr,fn,init</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length===<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr.length===<span class="number">1</span>) <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> value=arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> index=<span class="number">1</span>;<span class="comment">//后续判断从第几个开始循环，如果有初始值则从第0个开始循环，如果没有初始值从第一个开始循环</span></span><br><span class="line">    <span class="keyword">if</span>(init!==<span class="literal">undefined</span>)&#123;</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        value=init;<span class="comment">//如果初始值存在value就是初始值，如果不存在初始值就是数组的第0项</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;index&lt;arr.length;index++)&#123;</span><br><span class="line">        value=fn(value,arr[index],index,arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> val=array_reduce(arr,<span class="function"><span class="keyword">function</span>(<span class="params">value,item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value+item;</span><br><span class="line">&#125;,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">console</span>.log(val)</span><br></pre></td></tr></table></figure></li><li><p><code>flatMap</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_flatmap</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = fn(arr[i], i, arr);</span><br><span class="line">        <span class="keyword">if</span> (value &amp;&amp; value.constructor === <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; value.length; j++) &#123;</span><br><span class="line">                arr1[arr1.length] = value[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr1[arr1.length] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1=array_flatmap(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item))</span><br><span class="line">        item=array_flatmap(item,<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure></li><li><p><code>indexOf</code></p></li><li><p>在数组中查找某个元素的下标，如果这个元素存在，返回这个元素所在下标</p></li><li><p>如果查找不到返回-1。</p></li><li><p><code>var index=arr.indexOf(查找什么元素，从什么位置开始查找);</code></p></li><li><p><code>lastIndexOf</code></p></li></ul><h3 id="查找元素所有下标"><a href="#查找元素所有下标" class="headerlink" title="查找元素所有下标"></a>查找元素所有下标</h3><ul><li>循环、位非</li><li><code>forEach</code></li><li><code>reduce</code></li><li>循环</li></ul><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><ul><li>循环判断</li><li>布尔标记写入新数组</li><li>标记跳出循环</li><li><code>indexOf</code></li></ul><h3 id="将两个数组中相同的元素放在一个新数组中"><a href="#将两个数组中相同的元素放在一个新数组中" class="headerlink" title="将两个数组中相同的元素放在一个新数组中"></a>将两个数组中相同的元素放在一个新数组中</h3><h3 id="将两个数组中不同的元素放在一个新数组中"><a href="#将两个数组中不同的元素放在一个新数组中" class="headerlink" title="将两个数组中不同的元素放在一个新数组中"></a>将两个数组中不同的元素放在一个新数组中</h3>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;数组常用方法&lt;/li&gt;
&lt;li&gt;实现重构&lt;/li&gt;
&lt;li&gt;常用方法的应用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS数组及常用方法</title>
    <link href="http://ankang.icu/2021/03/22/JS%E6%95%B0%E7%BB%84%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://ankang.icu/2021/03/22/JS数组及常用方法/</id>
    <published>2021-03-22T14:29:25.000Z</published>
    <updated>2021-03-22T14:39:04.863Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数组相关概念</li><li>数组常用方法及重构</li></ol><a id="more"></a><h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><ul><li><h5 id="函数在没有完全执行结束时，内部的所有变量都不会被销毁"><a href="#函数在没有完全执行结束时，内部的所有变量都不会被销毁" class="headerlink" title="函数在没有完全执行结束时，内部的所有变量都不会被销毁"></a>函数在没有完全执行结束时，内部的所有变量都不会被销毁</h5></li><li><h5 id="递归会建立一个函数的副本，在堆中建立一个相同的函数引用，递归时调用这个新的函数引用"><a href="#递归会建立一个函数的副本，在堆中建立一个相同的函数引用，递归时调用这个新的函数引用" class="headerlink" title="递归会建立一个函数的副本，在堆中建立一个相同的函数引用，递归时调用这个新的函数引用"></a>递归会建立一个函数的副本，在堆中建立一个相同的函数引用，递归时调用这个新的函数引用</h5></li><li><h5 id="堆栈上限溢出"><a href="#堆栈上限溢出" class="headerlink" title="堆栈上限溢出"></a><em>堆栈上限溢出</em></h5></li><li><h5 id="广度遍历-深度遍历："><a href="#广度遍历-深度遍历：" class="headerlink" title="广度遍历/深度遍历："></a>广度遍历/深度遍历：</h5><ul><li><h6 id="对象的广度遍历使用for-in"><a href="#对象的广度遍历使用for-in" class="headerlink" title="对象的广度遍历使用for in;"></a>对象的广度遍历使用for in;</h6></li><li><h6 id="对象的深度遍历使用递归；"><a href="#对象的深度遍历使用递归；" class="headerlink" title="对象的深度遍历使用递归；"></a>对象的深度遍历使用递归；</h6></li></ul></li><li><h5 id="对象的深复制："><a href="#对象的深复制：" class="headerlink" title="对象的深复制："></a>对象的深复制：</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a1: <span class="number">1</span>,</span><br><span class="line">    b1: <span class="number">2</span>,</span><br><span class="line">    c1: <span class="number">3</span>,</span><br><span class="line">    d1: &#123;<span class="attr">a2</span>: <span class="number">4</span>,<span class="attr">b2</span>: <span class="number">5</span>,<span class="attr">c2</span>: <span class="number">6</span>,</span><br><span class="line">         e2: &#123;<span class="attr">a4</span>: <span class="number">7</span>,<span class="attr">b4</span>: <span class="number">8</span>,<span class="attr">c4</span>: <span class="number">9</span>,</span><br><span class="line">              d5: &#123;&#125;&#125;,</span><br><span class="line">         d2: &#123;<span class="attr">a3</span>: <span class="number">10</span>,<span class="attr">b3</span>: <span class="number">11</span>,<span class="attr">c3</span>: <span class="number">12</span>,</span><br><span class="line">              f3: &#123;<span class="attr">a4</span>: <span class="number">13</span>,<span class="attr">b4</span>: <span class="number">14</span>,<span class="attr">c4</span>: <span class="number">15</span>,</span><br><span class="line">                   d5: &#123;&#125;&#125;,</span><br><span class="line">              d3: &#123;<span class="attr">a4</span>: <span class="number">16</span>,<span class="attr">b4</span>: <span class="number">17</span>,<span class="attr">c4</span>: <span class="number">18</span>,</span><br><span class="line">                   d5: &#123;&#125;&#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">source,target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target===<span class="literal">undefined</span>) target=&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> source)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> source[prop]===<span class="string">"object"</span> &amp;&amp; source[prop]!==<span class="literal">null</span>)&#123;</span><br><span class="line">            target[prop]=&#123;&#125;;</span><br><span class="line">            fn1(source[prop],target[prop])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            target[prop]=source[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o=fn1(obj);</span><br><span class="line">obj.d1.d2.d3.c4=<span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></li><li><h5 id="二叉树："><a href="#二叉树：" class="headerlink" title="二叉树："></a>二叉树：</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    left:&#123;</span><br><span class="line">        value:<span class="number">1</span>,</span><br><span class="line">        left:&#123;</span><br><span class="line">            value:<span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right:&#123;</span><br><span class="line">            value:<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    right:&#123;</span><br><span class="line">        value:<span class="number">2</span>,</span><br><span class="line">        left:&#123;</span><br><span class="line">        value:<span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right:&#123;</span><br><span class="line">            value:<span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o.value);</span><br><span class="line">    <span class="keyword">if</span>(o.left) fn1(o.left);</span><br><span class="line">    <span class="keyword">if</span>(o.right) fn1(o.right);</span><br><span class="line">    <span class="built_in">console</span>.log(o.value);</span><br><span class="line">&#125;</span><br><span class="line">fn1(obj);</span><br></pre></td></tr></table></figure></li><li><h5 id="深查找"><a href="#深查找" class="headerlink" title="深查找"></a>深查找</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">o,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line">        <span class="keyword">if</span>(o[prop]===value) <span class="keyword">return</span> prop;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> o[prop]===<span class="string">"object"</span> &amp;&amp; o[prop]!==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> s=fn3(o[prop],value)</span><br><span class="line">            <span class="keyword">if</span>(s) <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> prop=fn3(obj,<span class="number">14</span>);</span><br><span class="line"><span class="built_in">console</span>.log(prop)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><ul><li><h5 id="数组是一个列表"><a href="#数组是一个列表" class="headerlink" title="数组是一个列表"></a>数组是一个列表</h5></li><li><h5 id="起始为0；"><a href="#起始为0；" class="headerlink" title="起始为0；"></a>起始为0；</h5></li><li><h5 id="实际上是按照下标存储元素的方式，将值存在列表中。"><a href="#实际上是按照下标存储元素的方式，将值存在列表中。" class="headerlink" title="实际上是按照下标存储元素的方式，将值存在列表中。"></a>实际上是按照下标存储元素的方式，将值存在列表中。</h5></li><li><h5 id="arr-1-4"><a href="#arr-1-4" class="headerlink" title="arr[1]===4"></a><code>arr[1]===4</code></h5><ul><li><h6 id="1就是下标"><a href="#1就是下标" class="headerlink" title="1就是下标"></a>1就是下标</h6></li><li><h6 id="arr-1-下标变量"><a href="#arr-1-下标变量" class="headerlink" title="arr[1]下标变量"></a><code>arr[1]</code>下标变量</h6></li><li><h6 id="4就是元素"><a href="#4就是元素" class="headerlink" title="4就是元素"></a>4就是元素</h6></li></ul></li><li><h5 id="数组创建："><a href="#数组创建：" class="headerlink" title="数组创建："></a>数组创建：</h5><ul><li><h6 id="字面量创建–var-arr-1-2-3"><a href="#字面量创建–var-arr-1-2-3" class="headerlink" title="字面量创建–var arr=[1,2,3]"></a>字面量创建–<code>var arr=[1,2,3]</code></h6></li><li><h6 id="构造函数创建"><a href="#构造函数创建" class="headerlink" title="构造函数创建"></a>构造函数创建</h6><ul><li><code>var arr=new Array(1,2,3)</code></li><li><code>var arr=Array(1,2,3)</code></li></ul></li><li><h6 id="对象创建–var-arr-new-Object-1-2-3"><a href="#对象创建–var-arr-new-Object-1-2-3" class="headerlink" title="对象创建–var arr=new Object([1,2,3])"></a>对象创建–<code>var arr=new Object([1,2,3])</code></h6></li></ul></li><li><h5 id="JS中数组的元素可以类型不同"><a href="#JS中数组的元素可以类型不同" class="headerlink" title="JS中数组的元素可以类型不同"></a>JS中数组的元素可以类型不同</h5></li><li><h5 id="因为空元素就是下标没有对应的值，所以可以通过-下标-in-数组-这种方式判断。"><a href="#因为空元素就是下标没有对应的值，所以可以通过-下标-in-数组-这种方式判断。" class="headerlink" title="因为空元素就是下标没有对应的值，所以可以通过 下标 in 数组 这种方式判断。"></a>因为空元素就是下标没有对应的值，所以可以通过 下标 in 数组 这种方式判断。</h5></li><li><h5 id="如果构造函数中的参数数量大于1个，则所有的参数都是这个数组的元素。"><a href="#如果构造函数中的参数数量大于1个，则所有的参数都是这个数组的元素。" class="headerlink" title="如果构造函数中的参数数量大于1个，则所有的参数都是这个数组的元素。"></a>如果构造函数中的参数数量大于1个，则所有的参数都是这个数组的元素。</h5></li><li><h5 id="如果构造函数的参数只有一个，就是数组的长度"><a href="#如果构造函数的参数只有一个，就是数组的长度" class="headerlink" title="如果构造函数的参数只有一个，就是数组的长度"></a>如果构造函数的参数只有一个，就是数组的长度</h5></li><li><h5 id="如果仅有一个参数，并且是数值类型，但并不是正整数，就会报错。"><a href="#如果仅有一个参数，并且是数值类型，但并不是正整数，就会报错。" class="headerlink" title="如果仅有一个参数，并且是数值类型，但并不是正整数，就会报错。"></a>如果仅有一个参数，并且是数值类型，但并不是<strong><em>正整数</em></strong>，就会报错。</h5></li><li><h5 id="如果仅有一个参数，但不是数值类型，则会把这个参数放在数组的第0位。"><a href="#如果仅有一个参数，但不是数值类型，则会把这个参数放在数组的第0位。" class="headerlink" title="如果仅有一个参数，但不是数值类型，则会把这个参数放在数组的第0位。"></a>如果仅有一个参数，但不是数值类型，则会把这个参数放在数组的第0位。</h5></li></ul><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><ul><li><h5 id="元素个数（包括空元素）"><a href="#元素个数（包括空元素）" class="headerlink" title="元素个数（包括空元素）"></a>元素个数（包括空元素）</h5></li><li><h5 id="arr-length是一个可读可写的属性"><a href="#arr-length是一个可读可写的属性" class="headerlink" title="arr.length是一个可读可写的属性"></a><code>arr.length</code>是一个可读可写的属性</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.length=<span class="number">5</span>;</span><br><span class="line">arr.length=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><h5 id="如果当前数组的长度小于设置的长度，则增加-新长度-原长度-数量的空元素"><a href="#如果当前数组的长度小于设置的长度，则增加-新长度-原长度-数量的空元素" class="headerlink" title="如果当前数组的长度小于设置的长度，则增加(新长度-原长度)数量的空元素"></a>如果当前数组的长度小于设置的长度，则增加(新长度-原长度)数量的空元素</h5></li><li><h5 id="如果新长度小于原长度，则删除-原长度-新长度-数量的元素"><a href="#如果新长度小于原长度，则删除-原长度-新长度-数量的元素" class="headerlink" title="如果新长度小于原长度，则删除(原长度-新长度)数量的元素"></a>如果新长度小于原长度，则删除(原长度-新长度)数量的元素</h5></li><li><h5 id="arr-length-0清空数组"><a href="#arr-length-0清空数组" class="headerlink" title="arr.length=0清空数组"></a><code>arr.length=0</code>清空数组</h5></li><li><h5 id="arr-length-删除尾部的最后一个元素"><a href="#arr-length-删除尾部的最后一个元素" class="headerlink" title="arr.length--删除尾部的最后一个元素"></a><code>arr.length--</code>删除尾部的最后一个元素</h5></li><li><h5 id="length不能小于0或者是负数"><a href="#length不能小于0或者是负数" class="headerlink" title="length不能小于0或者是负数"></a>length不能小于0或者是负数</h5></li><li><h5 id="必须是一个正整数–arr-length-quot-a-quot"><a href="#必须是一个正整数–arr-length-quot-a-quot" class="headerlink" title="必须是一个正整数–arr.length=&quot;a&quot;"></a>必须是一个正整数–<code>arr.length=&quot;a&quot;</code></h5></li><li><h5 id="push–尾部添加一个或者多个元素-并且返回数组的新长度"><a href="#push–尾部添加一个或者多个元素-并且返回数组的新长度" class="headerlink" title="push–尾部添加一个或者多个元素,并且返回数组的新长度"></a><code>push</code>–尾部添加一个或者多个元素,并且返回数组的新长度</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(arr.push(i++)&lt;<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_push</span>(<span class="params">arr:Array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr==<span class="literal">undefined</span> || arr.constructor!==<span class="built_in">Array</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"错误参数"</span>);</span><br><span class="line">    <span class="comment">//throw new Error() 抛出错误，中断后续代码的执行</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">1</span>) <span class="keyword">return</span> arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        arr[arr.length]=<span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给数组尾部一旦添加元素，arr.length就会自动重设</span></span><br><span class="line">    <span class="keyword">return</span> arr.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line">array_push(arr,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><h5 id="pop–删除数组尾部的一个元素，并且返回被删除的元素"><a href="#pop–删除数组尾部的一个元素，并且返回被删除的元素" class="headerlink" title="pop–删除数组尾部的一个元素，并且返回被删除的元素"></a>pop–删除数组尾部的一个元素，并且返回被删除的元素</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_pop</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item=arr[arr.length<span class="number">-1</span>];</span><br><span class="line">    arr.length--;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> item=array_pop(arr);</span><br><span class="line"><span class="built_in">console</span>,log(arr,item);</span><br></pre></td></tr></table></figure></li><li><h5 id="shift–删除数组头部的元素，并且返回被删除的元素"><a href="#shift–删除数组头部的元素，并且返回被删除的元素" class="headerlink" title="shift–删除数组头部的元素，并且返回被删除的元素"></a>shift–删除数组头部的元素，并且返回被删除的元素</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_shift</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length===<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> item=arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    arr.length--;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> item=array_shift(arr);</span><br><span class="line"><span class="built_in">console</span>.log(item)</span><br></pre></td></tr></table></figure></li><li><h5 id="unshift–向数组的头部添加一个元素，并返回数组的新长度"><a href="#unshift–向数组的头部添加一个元素，并返回数组的新长度" class="headerlink" title="unshift–向数组的头部添加一个元素，并返回数组的新长度"></a>unshift–向数组的头部添加一个元素，并返回数组的新长度</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_unshift</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//控制参数代码</span></span><br><span class="line">    <span class="keyword">if</span>(arr==<span class="literal">undefined</span> || arr.constructor!==<span class="built_in">Array</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"错误参数"</span>);</span><br><span class="line">    <span class="comment">//throw new Error() 抛出错误，中断后续代码的执行</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">1</span>) <span class="keyword">return</span> arr.length;</span><br><span class="line">    <span class="keyword">var</span> len=<span class="built_in">arguments</span>.length<span class="number">-1</span>;<span class="comment">//当前添加参数数量</span></span><br><span class="line">    arr.length=len=len+arr.length;<span class="comment">//添加元素后数组的新长度</span></span><br><span class="line">    <span class="keyword">while</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;<span class="built_in">arguments</span>.length<span class="number">-1</span>)&#123;</span><br><span class="line">            arr[len<span class="number">-1</span>]=arr[len-<span class="built_in">arguments</span>.length];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[len<span class="number">-1</span>]=<span class="built_in">arguments</span>[len];</span><br><span class="line">        &#125;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">array_unshift(arr,<span class="number">-1</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><h5 id="concat–合并数组，可以将一个数组和另外一个数组合并成一个新数组，原数组不变。"><a href="#concat–合并数组，可以将一个数组和另外一个数组合并成一个新数组，原数组不变。" class="headerlink" title="concat–合并数组，可以将一个数组和另外一个数组合并成一个新数组，原数组不变。"></a><code>concat</code>–合并数组，可以将一个数组和另外一个数组合并成一个新数组，原数组不变。</h5></li><li><h5 id="可以是用一个数组合并多个元素，产生一个新数组"><a href="#可以是用一个数组合并多个元素，产生一个新数组" class="headerlink" title="可以是用一个数组合并多个元素，产生一个新数组"></a>可以是用一个数组合并多个元素，产生一个新数组</h5></li><li><h5 id="如果不填写参数，则复制原数组，产生一个新数组"><a href="#如果不填写参数，则复制原数组，产生一个新数组" class="headerlink" title="如果不填写参数，则复制原数组，产生一个新数组"></a>如果不填写参数，则复制原数组，产生一个新数组</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_concat</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr==<span class="literal">undefined</span> || arr.constructor!==<span class="built_in">Array</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"不是数组"</span>)</span><br><span class="line">    <span class="keyword">var</span> arr1=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        arr1[i]=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">1</span>) <span class="keyword">return</span> arr1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;<span class="built_in">arguments</span>.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>[j] &amp;&amp; <span class="built_in">arguments</span>[j].constructor===<span class="built_in">Array</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;<span class="built_in">arguments</span>[j].length;k++)&#123;</span><br><span class="line">                arr1[arr1.length]=<span class="built_in">arguments</span>[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        arr1[arr1.length]=<span class="built_in">arguments</span>[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr1=array_concat(arr);</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=array_concat(arr,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> arr1=array_concat(arr,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> arr1=array_concat(arr,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="keyword">var</span> arr1=array_concat(arr,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure></li><li><h5 id="join–连接字符串，用符号连接数组的元素并且生成字符串"><a href="#join–连接字符串，用符号连接数组的元素并且生成字符串" class="headerlink" title="join–连接字符串，用符号连接数组的元素并且生成字符串"></a><code>join</code>–连接字符串，用符号连接数组的元素并且生成字符串</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_join</span>(<span class="params">arr,separator</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr==<span class="literal">undefined</span> || arr.constructor!==<span class="built_in">Array</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"不是数组"</span>)</span><br><span class="line">    <span class="keyword">if</span>(separator===<span class="literal">undefined</span>) separator=<span class="string">","</span>;</span><br><span class="line">    separator=<span class="built_in">String</span>(separator);</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        str+=arr[i]+separator;</span><br><span class="line">    &#125;</span><br><span class="line">    str+=arr[arr.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str=array_join(arr,<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li><li><p><code>fill</code></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_fill</span>(<span class="params">arr,item,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr==<span class="literal">undefined</span> || arr.constructor!==<span class="built_in">Array</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"不是数组"</span>)</span><br><span class="line">    <span class="keyword">if</span>(start===<span class="literal">undefined</span>) start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(end===<span class="literal">undefined</span>) end=arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=start;i&lt;end;i++)&#123;</span><br><span class="line">        arr[i]=item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=<span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">arr=array_fill(arr,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><h5 id="Array-from将一个列表转换为数组"><a href="#Array-from将一个列表转换为数组" class="headerlink" title="Array.from将一个列表转换为数组"></a><code>Array.from</code>将一个列表转换为数组</h5></li><li><h5 id="下标有0，1，2，3，4，5就是有列表，必须要有length。"><a href="#下标有0，1，2，3，4，5就是有列表，必须要有length。" class="headerlink" title="下标有0，1，2，3，4，5就是有列表，必须要有length。"></a>下标有0，1，2，3，4，5就是有列表，必须要有length。</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str=<span class="built_in">arguments</span>.join(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="keyword">var</span> arr=<span class="built_in">Array</span>.from(argumentss);</span><br><span class="line">    <span class="keyword">var</span> str=arr.join(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.form_1=<span class="function"><span class="keyword">function</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    <span class="keyword">if</span>(!list.length) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">        arr[i]=list[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//简单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.apply(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(list);</span><br><span class="line">    <span class="keyword">return</span> [].slice.apply(list);</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(list);</span><br><span class="line">    <span class="keyword">return</span> [].concat.apply([],list);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([],list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="Array-isArray判断元素是否为数组"><a href="#Array-isArray判断元素是否为数组" class="headerlink" title="Array.isArray判断元素是否为数组"></a><code>Array.isArray</code>判断元素是否为数组</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray_1=<span class="function"><span class="keyword">function</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (list &amp;&amp; list.constructor===<span class="built_in">Array</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;数组相关概念&lt;/li&gt;
&lt;li&gt;数组常用方法及重构&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="深复制/浅复制" scheme="http://ankang.icu/tags/%E6%B7%B1%E5%A4%8D%E5%88%B6-%E6%B5%85%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>回调函数与设计模式</title>
    <link href="http://ankang.icu/2021/03/19/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ankang.icu/2021/03/19/回调函数与设计模式/</id>
    <published>2021-03-19T14:25:24.000Z</published>
    <updated>2021-03-27T08:37:35.103Z</updated>
    
    <content type="html"><![CDATA[<ol><li>参数的定义</li><li><code>return</code>的基本使用</li><li>单例模式/工厂模式/桥接模式</li><li>回调函数的概念</li></ol><a id="more"></a><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><ol><li><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4></li><li><h4 id="形参、实参"><a href="#形参、实参" class="headerlink" title="形参、实参"></a>形参、实参</h4><ul><li><h5 id="如果实参数量小于形参数量，那么最后没有赋值形参是undefined。"><a href="#如果实参数量小于形参数量，那么最后没有赋值形参是undefined。" class="headerlink" title="如果实参数量小于形参数量，那么最后没有赋值形参是undefined。"></a>如果实参数量小于形参数量，那么最后没有赋值形参是undefined。</h5></li><li><h5 id="如果形参数量小于实参数量，那么多出来的实参无法从形参上获取。"><a href="#如果形参数量小于实参数量，那么多出来的实参无法从形参上获取。" class="headerlink" title="如果形参数量小于实参数量，那么多出来的实参无法从形参上获取。"></a>如果形参数量小于实参数量，那么多出来的实参无法从形参上获取。</h5></li></ul></li><li><h4 id="外部带入的和函数内的在不产生引用时是没有关联的"><a href="#外部带入的和函数内的在不产生引用时是没有关联的" class="headerlink" title="外部带入的和函数内的在不产生引用时是没有关联的"></a>外部带入的和函数内的在不产生引用时是没有关联的</h4></li><li><h4 id="非引用类型，原变量发生改变，不影响其他变量。"><a href="#非引用类型，原变量发生改变，不影响其他变量。" class="headerlink" title="非引用类型，原变量发生改变，不影响其他变量。"></a>非引用类型，原变量发生改变，不影响其他变量。</h4></li><li><h4 id="两个变量引用同一个地址，其中改变一个属性值，另一个也发生变化；其中改变引用地址后，另一个无关。"><a href="#两个变量引用同一个地址，其中改变一个属性值，另一个也发生变化；其中改变引用地址后，另一个无关。" class="headerlink" title="两个变量引用同一个地址，其中改变一个属性值，另一个也发生变化；其中改变引用地址后，另一个无关。"></a>两个变量引用同一个地址，其中改变一个属性值，另一个也发生变化；其中改变引用地址后，另一个无关。</h4></li><li><h4 id="ES5中形参不能设置初始值，ES6中形参可以设置初始值。"><a href="#ES5中形参不能设置初始值，ES6中形参可以设置初始值。" class="headerlink" title="ES5中形参不能设置初始值，ES6中形参可以设置初始值。"></a>ES5中形参不能设置初始值，ES6中形参可以设置初始值。</h4><ul><li><h5 id="形参初始值，当实参没有传入对应的值，默认是形参初始值（实参是undefined）；如果传入值则是传入的值。"><a href="#形参初始值，当实参没有传入对应的值，默认是形参初始值（实参是undefined）；如果传入值则是传入的值。" class="headerlink" title="形参初始值，当实参没有传入对应的值，默认是形参初始值（实参是undefined）；如果传入值则是传入的值。"></a>形参初始值，当实参没有传入对应的值，默认是形参初始值（实参是undefined）；如果传入值则是传入的值。</h5></li><li><h5 id="必要的形参定义在函数的前面，非必要的形参定义在后面，大多数的初始值都是针对非必要形参。"><a href="#必要的形参定义在函数的前面，非必要的形参定义在后面，大多数的初始值都是针对非必要形参。" class="headerlink" title="必要的形参定义在函数的前面，非必要的形参定义在后面，大多数的初始值都是针对非必要形参。"></a>必要的形参定义在函数的前面，非必要的形参定义在后面，大多数的初始值都是针对非必要形参。</h5></li><li><h5 id="因为JS是弱引用类型，所以参数是不需要设置类型的"><a href="#因为JS是弱引用类型，所以参数是不需要设置类型的" class="headerlink" title="因为JS是弱引用类型，所以参数是不需要设置类型的"></a>因为JS是弱引用类型，所以参数是不需要设置类型的</h5><ul><li><h6 id="如果封装的函数被别人使用时，别人传入的参数不一定类型相同，会造成函数不可预期的错误。"><a href="#如果封装的函数被别人使用时，别人传入的参数不一定类型相同，会造成函数不可预期的错误。" class="headerlink" title="如果封装的函数被别人使用时，别人传入的参数不一定类型相同，会造成函数不可预期的错误。"></a>如果封装的函数被别人使用时，别人传入的参数不一定类型相同，会造成函数不可预期的错误。</h6></li></ul></li></ul></li><li><h4 id="回调："><a href="#回调：" class="headerlink" title="回调："></a>回调：</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1(fn2);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">fn();</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="当传入的参数数量不定时，"><a href="#当传入的参数数量不定时，" class="headerlink" title="当传入的参数数量不定时，"></a>当传入的参数数量不定时，</h4><ul><li><h5 id="ES6：都会被放在arg数组中"><a href="#ES6：都会被放在arg数组中" class="headerlink" title="ES6：都会被放在arg数组中"></a>ES6：都会被放在<code>arg</code>数组中</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>,log(arg);</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><h5 id="arg必须放在形参后面"><a href="#arg必须放在形参后面" class="headerlink" title="...arg必须放在形参后面"></a><code>...arg</code>必须放在形参后面</h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">fn,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>,log(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="ES5-arguments实参列表"><a href="#ES5-arguments实参列表" class="headerlink" title="ES5: arguments实参列表"></a>ES5: <code>arguments</code>实参列表</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        s+=<span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum=fn1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure></li><li><h6 id="arguments-length-在函数内时当前函数传入的实参数量"><a href="#arguments-length-在函数内时当前函数传入的实参数量" class="headerlink" title="arguments.length 在函数内时当前函数传入的实参数量"></a><code>arguments.length</code> 在函数内时当前函数传入的实参数量</h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//arguments.length 在函数内是当前函数传入的实参数量</span></span><br><span class="line"><span class="comment">//console.log(fn1.length); 通过获取函数的length可以获取到函数的形参数量</span></span><br></pre></td></tr></table></figure></li><li><h6 id="通过获取函数的length可以获取到函数的形参数量"><a href="#通过获取函数的length可以获取到函数的形参数量" class="headerlink" title="通过获取函数的length可以获取到函数的形参数量"></a>通过获取函数的length可以获取到函数的形参数量</h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fn1();</span><br><span class="line">&#125;</span><br><span class="line">fn2();</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure></li><li><h6 id="arguments-callee就是当前函数"><a href="#arguments-callee就是当前函数" class="headerlink" title="arguments.callee就是当前函数"></a><code>arguments.callee</code>就是当前函数</h6></li><li><h6 id="arguments-callee-name就是当前函数的名字"><a href="#arguments-callee-name就是当前函数的名字" class="headerlink" title="arguments.callee.name就是当前函数的名字"></a><code>arguments.callee.name</code>就是当前函数的名字</h6></li><li><h6 id="arguments-callee-caller调用当前函数的上下文函数。"><a href="#arguments-callee-caller调用当前函数的上下文函数。" class="headerlink" title="arguments.callee.caller调用当前函数的上下文函数。"></a><code>arguments.callee.caller</code>调用当前函数的上下文函数。</h6></li></ul></li></ul></li><li><h4 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h4><ul><li><h5 id="匿名递归："><a href="#匿名递归：" class="headerlink" title="匿名递归："></a>匿名递归：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">fn(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">arguments</span>.callee(a);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h4 id="return："><a href="#return：" class="headerlink" title="return："></a>return：</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure></li><li><h5 id="遇到return，跳出函数，不再执行后面的语句"><a href="#遇到return，跳出函数，不再执行后面的语句" class="headerlink" title="遇到return，跳出函数，不再执行后面的语句"></a>遇到return，跳出函数，不再执行后面的语句</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> s=a+<span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">5</span>);<span class="comment">//5</span></span><br><span class="line">fn1();<span class="comment">//直接跳出</span></span><br></pre></td></tr></table></figure></li><li><h6 id="限定函数传入的参数类型或者其值的范围，来判断是否继续执行该函数还是跳出。"><a href="#限定函数传入的参数类型或者其值的范围，来判断是否继续执行该函数还是跳出。" class="headerlink" title="限定函数传入的参数类型或者其值的范围，来判断是否继续执行该函数还是跳出。"></a>限定函数传入的参数类型或者其值的范围，来判断是否继续执行该函数还是跳出。</h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">"零"</span>,<span class="string">"一"</span>,<span class="string">"二"</span>,<span class="string">"三"</span>,<span class="string">"四"</span>,<span class="string">"五"</span>,<span class="string">"六"</span>,<span class="string">"七"</span>,<span class="string">"八"</span>,<span class="string">"九"</span>,<span class="string">"十"</span>];</span><br><span class="line"><span class="comment">//6 六;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChineseNum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1000</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">11</span>) <span class="keyword">return</span> arr[n];</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">20</span>) <span class="keyword">return</span> <span class="string">"十"</span>+arr[n%<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">10</span>===<span class="number">0</span> &amp;&amp; n&lt;<span class="number">100</span>) <span class="keyword">return</span> arr[n/<span class="number">10</span>]+<span class="string">"十"</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">100</span>) <span class="keyword">return</span> arr[<span class="built_in">parseInt</span>(n/<span class="number">10</span>)]+<span class="string">"十"</span>+arr[n%<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">100</span>===<span class="number">0</span>) <span class="keyword">return</span> arr[n/<span class="number">100</span>]+<span class="string">"百"</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">10</span>===<span class="number">0</span>) <span class="keyword">return</span> arr[<span class="built_in">parseInt</span>(n/<span class="number">100</span>)]+<span class="string">"百"</span>+arr[n/<span class="number">10</span>%<span class="number">10</span>]+<span class="string">"十"</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">parseInt</span>(n/<span class="number">10</span>)%<span class="number">10</span>===<span class="number">0</span>) <span class="keyword">return</span> arr[<span class="built_in">parseInt</span>(n/<span class="number">100</span>)]+<span class="string">"百零"</span>+arr[n%<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="built_in">parseInt</span>(n/<span class="number">100</span>)]+<span class="string">"百"</span>+arr[<span class="built_in">parseInt</span>(n/<span class="number">10</span>)%<span class="number">10</span>]+<span class="string">"十"</span>+arr[n%<span class="number">10</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=getChineseNum(<span class="number">255</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="built_in">arguments</span>.length;i++)s+=argumrnts[i];</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=getSum(<span class="string">"+"</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure></li><li><h6 id="求和问题（return-break）"><a href="#求和问题（return-break）" class="headerlink" title="求和问题（return/break）"></a>求和问题（return/break）</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s;</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">    s=<span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;<span class="built_in">arguments</span>.length;i++)s+=<span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">    s=<span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;<span class="built_in">arguments</span>.length;i++)s-=<span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">    s=<span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;<span class="built_in">arguments</span>.length;i++)s*=<span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">    s=<span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;<span class="built_in">arguments</span>.length;i++)s/=<span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="return跳出函数，直接从循环中跳出函数"><a href="#return跳出函数，直接从循环中跳出函数" class="headerlink" title="return跳出函数，直接从循环中跳出函数"></a><code>return</code>跳出函数，直接从循环中跳出函数</h6></li><li><h6 id="break跳出循环，执行循环后面的语句"><a href="#break跳出循环，执行循环后面的语句" class="headerlink" title="break跳出循环，执行循环后面的语句"></a><code>break</code>跳出循环，执行循环后面的语句</h6></li><li><h6 id="点击运行"><a href="#点击运行" class="headerlink" title="点击运行:"></a>点击运行:</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">div1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">bool=!bool;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!bool) <span class="keyword">return</span>;</span><br><span class="line">x++;</span><br><span class="line">    div1.style.left=x+<span class="string">"px"</span>;</span><br><span class="line">&#125;,<span class="number">16</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h5 id="return-返回结果"><a href="#return-返回结果" class="headerlink" title="return 返回结果"></a><code>return</code> 返回结果</h5><ul><li><h6 id="单例模式-gt-登录弹框、遮罩层"><a href="#单例模式-gt-登录弹框、遮罩层" class="headerlink" title="单例模式=====&gt;登录弹框、遮罩层"></a>单例模式=====&gt;登录弹框、遮罩层</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line"><span class="comment">//function fn1()&#123;</span></span><br><span class="line"><span class="comment">//return 0 || (o=&#123;&#125;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!o)o=&#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=fn1();</span><br><span class="line"><span class="keyword">var</span> b=fn1();</span><br><span class="line"><span class="built_in">console</span>.log(a==b);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h6><ul><li><p>对象的属性名如果和值的变量名相同，可以直接带入</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name:name,</span><br><span class="line">        age:age,</span><br><span class="line">        sex:sex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;name,age,sex&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o=fn1(<span class="string">"ankang"</span>,<span class="number">22</span>,<span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="返回多个数据"><a href="#返回多个数据" class="headerlink" title="返回多个数据"></a>返回多个数据</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    b*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> [a,b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o=fn1(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//var f=fn1();</span></span><br><span class="line"><span class="comment">//f();</span></span><br><span class="line">fn1(<span class="number">3</span>)(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="返回回调函数的返回结果"><a href="#返回回调函数的返回结果" class="headerlink" title="返回回调函数的返回结果"></a>返回回调函数的返回结果</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,fn</span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">return</span> fn(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=fn1(<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span></span><br><span class="line">;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn=<span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">var</span> s=<span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="built_in">arguments</span>.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        s=fn(s,<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=fn1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="function"><span class="keyword">function</span>(<span class="params">s,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s+n;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//var s=fn1(1,2,3,4,5,6,function()&#123;</span></span><br><span class="line"><span class="comment">//    return s*n;</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=fn1();</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure></li><li><h6 id="使用return-返回一个运行结果，或者一个值，仅能返回一个；返回的结果可以在函数执行时赋值给变量。"><a href="#使用return-返回一个运行结果，或者一个值，仅能返回一个；返回的结果可以在函数执行时赋值给变量。" class="headerlink" title="使用return 返回一个运行结果，或者一个值，仅能返回一个；返回的结果可以在函数执行时赋值给变量。"></a>使用return 返回一个运行结果，或者一个值，仅能返回一个；返回的结果可以在函数执行时赋值给变量。</h6></li></ul></li></ol><h3 id="对象中的函数"><a href="#对象中的函数" class="headerlink" title="对象中的函数"></a>对象中的函数</h3><ol><li><h4 id="只有写在对象方法中的this，才指向当前对"><a href="#只有写在对象方法中的this，才指向当前对" class="headerlink" title="只有写在对象方法中的this，才指向当前对"></a>只有写在对象方法中的this，才指向当前对</h4></li><li><h4 id="写在对象属性中的this，是指向当前所在的上下文环境中this指向。"><a href="#写在对象属性中的this，是指向当前所在的上下文环境中this指向。" class="headerlink" title="写在对象属性中的this，是指向当前所在的上下文环境中this指向。"></a>写在对象属性中的this，是指向当前所在的上下文环境中this指向。</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj.a);<span class="comment">//10</span></span><br><span class="line">        consoloe.log(<span class="keyword">this</span>.a);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = obj;</span><br><span class="line">obj=&#123;<span class="attr">a</span>:<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//1</span></span><br><span class="line">o.c();</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="连缀："><a href="#连缀：" class="headerlink" title="连缀："></a>连缀：</h4><ul><li><h5 id="通过return-this，来让对象中的方法可以实现连缀。"><a href="#通过return-this，来让对象中的方法可以实现连缀。" class="headerlink" title="通过return this，来让对象中的方法可以实现连缀。"></a>通过return this，来让对象中的方法可以实现连缀。</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>;</span><br><span class="line">    run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"run"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//这里的this，打印obj这个对象===&gt;所以返回this，即返回obj这个对象。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    play:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br><span class="line">obj.play();</span><br><span class="line">obj.run().play();</span><br><span class="line">obj.play().run();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="回调函数："><a href="#回调函数：" class="headerlink" title="回调函数："></a>回调函数：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>,log(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bbb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1(fn2);</span><br><span class="line">fn1(fn3);</span><br></pre></td></tr></table></figure><h4 id="将一个函数以参数的形式传入到另一个函数中并且被调用执行"><a href="#将一个函数以参数的形式传入到另一个函数中并且被调用执行" class="headerlink" title="将一个函数以参数的形式传入到另一个函数中并且被调用执行"></a>将一个函数以参数的形式传入到另一个函数中并且被调用执行</h4><h4 id="目的就是不需要关注要执行谁，只负责执行。"><a href="#目的就是不需要关注要执行谁，只负责执行。" class="headerlink" title="目的就是不需要关注要执行谁，只负责执行。"></a>目的就是不需要关注要执行谁，只负责执行。</h4><h4 id="通过插入不同的函数，解决不同的问题。"><a href="#通过插入不同的函数，解决不同的问题。" class="headerlink" title="通过插入不同的函数，解决不同的问题。"></a>通过插入不同的函数，解决不同的问题。</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn5</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a/b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=fn1(<span class="number">3</span>,<span class="number">5</span>,fn5);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure></li></ul><h4 id="var-ids-setInterval-function-16-1-2-3"><a href="#var-ids-setInterval-function-16-1-2-3" class="headerlink" title="var ids=setInterval(function(){},16,1,2,3);"></a><code>var ids=setInterval(function(){},16,1,2,3);</code></h4><ul><li><h5 id="ids-setInterval-回调函数，间隔时间，参数1，参数2…"><a href="#ids-setInterval-回调函数，间隔时间，参数1，参数2…" class="headerlink" title="ids=setInterval(回调函数，间隔时间，参数1，参数2…)"></a>ids=setInterval(回调函数，间隔时间，参数1，参数2…)</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ids2=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"aaa"</span>)<span class="comment">//打印一次后，被解除，不再定时执行</span></span><br><span class="line">            clearInterval(ids2)</span><br><span class="line">        &#125;,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="ids就是这个时间间隔标识id，可以通过clearInterval-ids-解除当前时间间隔设定"><a href="#ids就是这个时间间隔标识id，可以通过clearInterval-ids-解除当前时间间隔设定" class="headerlink" title="ids就是这个时间间隔标识id，可以通过clearInterval(ids)解除当前时间间隔设定"></a>ids就是这个时间间隔标识id，可以通过clearInterval(ids)解除当前时间间隔设定</h5></li><li><h5 id="回调函数会被在间隔时间达到时调用，参数1，参数2就是向回调函数传参的方式。"><a href="#回调函数会被在间隔时间达到时调用，参数1，参数2就是向回调函数传参的方式。" class="headerlink" title="回调函数会被在间隔时间达到时调用，参数1，参数2就是向回调函数传参的方式。"></a>回调函数会被在间隔时间达到时调用，参数1，参数2就是向回调函数传参的方式。</h5></li><li><h5 id="时间间隔如果设置为0，或者不设置，则默认为1毫秒后。"><a href="#时间间隔如果设置为0，或者不设置，则默认为1毫秒后。" class="headerlink" title="时间间隔如果设置为0，或者不设置，则默认为1毫秒后。"></a>时间间隔如果设置为0，或者不设置，则默认为1毫秒后。</h5></li><li><h5 id="瞬间执行完的循环是同步的，而延迟执行的是异步的，在异步执行时，同步时的变量可能早就变化了。"><a href="#瞬间执行完的循环是同步的，而延迟执行的是异步的，在异步执行时，同步时的变量可能早就变化了。" class="headerlink" title="瞬间执行完的循环是同步的，而延迟执行的是异步的，在异步执行时，同步时的变量可能早就变化了。"></a>瞬间执行完的循环是同步的，而延迟执行的是异步的，在异步执行时，同步时的变量可能早就变化了。</h5></li></ul><h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a><code>clearInterval()</code></h4><h4 id="var-ids-setTimeout-function-clearTimeout-ids-1000-10"><a href="#var-ids-setTimeout-function-clearTimeout-ids-1000-10" class="headerlink" title="var ids=setTimeout(function(){clearTimeout(ids)},1000,10)"></a><code>var ids=setTimeout(function(){clearTimeout(ids)},1000,10)</code></h4><ul><li><h5 id="延迟1000毫秒后执行这个回调函数，只执行一次。"><a href="#延迟1000毫秒后执行这个回调函数，只执行一次。" class="headerlink" title="延迟1000毫秒后执行这个回调函数，只执行一次。"></a>延迟1000毫秒后执行这个回调函数，只执行一次。</h5></li></ul><h4 id="用setTimeout重构setInterval"><a href="#用setTimeout重构setInterval" class="headerlink" title="用setTimeout重构setInterval"></a>用setTimeout重构setInterval</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInterval_1</span>(<span class="params">fn,time</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        fn(n);</span><br><span class="line">        setInterval_1(fn,time,n)</span><br><span class="line">    &#125;,time,<span class="built_in">arguments</span>[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line">setInterval_1(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">"定时内容"</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="异步回调使用"><a href="#异步回调使用" class="headerlink" title="异步回调使用"></a>异步回调使用</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redColor</span>(<span class="params">fn1,fn2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ids=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"红色"</span>)</span><br><span class="line">        clearTimeout(ids);</span><br><span class="line">        fn1(fn2,redColor);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellowColor</span>(<span class="params">fn1,fn2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ids=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"黄色"</span>)</span><br><span class="line">        clearTimeout(ids);</span><br><span class="line">        fn1(fn2,yellowColor);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellowColor</span>(<span class="params">fn1,fn2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ids=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"绿色"</span>)</span><br><span class="line">        clearTimeout(ids);</span><br><span class="line">        fn1(fn2,greenColor);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line">redColor(yellowColor,greenColor);</span><br></pre></td></tr></table></figure></li></ul><h4 id="回调函数：-1"><a href="#回调函数：-1" class="headerlink" title="回调函数："></a>回调函数：</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">fn,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="literal">undefined</span>)n=<span class="number">0</span>;</span><br><span class="line">  n++;</span><br><span class="line">    <span class="keyword">return</span> fn(fn1,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">fn,n</span>)</span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> fn(fn2,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=fn1(fn2);</span><br><span class="line"><span class="built_in">console</span>.log(s);<span class="comment">//想要的结果是10，通过回调函数实现。</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;参数的定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;的基本使用&lt;/li&gt;
&lt;li&gt;单例模式/工厂模式/桥接模式&lt;/li&gt;
&lt;li&gt;回调函数的概念&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://ankang.icu/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="回调函数" scheme="http://ankang.icu/tags/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--对象和函数</title>
    <link href="http://ankang.icu/2021/03/18/JavaScript-%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%87%BD%E6%95%B0/"/>
    <id>http://ankang.icu/2021/03/18/JavaScript-对象和函数/</id>
    <published>2021-03-18T08:44:01.000Z</published>
    <updated>2021-03-27T08:37:17.111Z</updated>
    
    <content type="html"><![CDATA[<ol><li>JavaScript对象相关</li><li>垃圾回收机制、内存泄漏</li><li>JavaScript函数相关</li></ol><a id="more"></a><h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><ol><li><h5 id="构造函数创建法：var-o-new-Object"><a href="#构造函数创建法：var-o-new-Object" class="headerlink" title="构造函数创建法：var o=new Object();"></a>构造函数创建法：<code>var o=new Object();</code></h5></li><li><h5 id="字面量创建法：var-o-a-1"><a href="#字面量创建法：var-o-a-1" class="headerlink" title="字面量创建法：var o={a:1};"></a>字面量创建法：<code>var o={a:1};</code></h5></li><li><h5 id="key-value-gt-键值对的形态"><a href="#key-value-gt-键值对的形态" class="headerlink" title="{key:value}==&gt; 键值对的形态"></a>{key:value}==&gt; 键值对的形态</h5><ul><li><h6 id="每个键对应唯一的值"><a href="#每个键对应唯一的值" class="headerlink" title="每个键对应唯一的值"></a>每个键对应唯一的值</h6></li><li><h6 id="表现形式："><a href="#表现形式：" class="headerlink" title="表现形式："></a>表现形式：</h6><ol><li><code>console.log(o.a);</code></li><li><code>console.log(o[&quot;a&quot;]);</code></li><li>键必须是字符串或者 <code>symbol</code>，如果不是则会隐式转换为字符串。</li></ol></li></ul></li></ol><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">o[d]=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o[&#123;<span class="attr">b</span>:<span class="number">3</span>&#125;]);<span class="comment">//5</span></span><br><span class="line"><span class="comment">//说明：d在括号中没有加引号，所以传入的是d变量（&#123;a:1&#125;）即o[&#123;a:1&#125;]=5;</span></span><br><span class="line"><span class="comment">//&#123;a:1&#125;在括号中隐式转换为字符串==&gt; [object Object]</span></span><br><span class="line"><span class="comment">//证明：console.log(String(&#123;a:1&#125;),String(&#123;b:3&#125;));==&gt; 结果都是[object Object]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a[];</span><br><span class="line"><span class="keyword">var</span> b[<span class="string">"c"</span>];</span><br><span class="line">o[a]=<span class="number">10</span>;</span><br><span class="line">o[b]=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o[<span class="string">""</span>],o[<span class="string">"c"</span>]);</span><br><span class="line"><span class="comment">//空数组在隐式转换为字符串时，转换为空字符串</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="存储："><a href="#存储：" class="headerlink" title="存储："></a>存储：</h4><ul><li><h5 id="对象的存储一共有两种情况，一种是存储数据，一种是存储函数。"><a href="#对象的存储一共有两种情况，一种是存储数据，一种是存储函数。" class="headerlink" title="对象的存储一共有两种情况，一种是存储数据，一种是存储函数。"></a>对象的存储一共有两种情况，一种是存储数据，一种是存储函数。</h5></li><li><h5 id="存储数据的叫做对象的属性，存储函数的叫做对象的方法。"><a href="#存储数据的叫做对象的属性，存储函数的叫做对象的方法。" class="headerlink" title="存储数据的叫做对象的属性，存储函数的叫做对象的方法。"></a>存储数据的叫做对象的属性，存储函数的叫做对象的方法。</h5></li></ul><h4 id="遍历："><a href="#遍历：" class="headerlink" title="遍历："></a>遍历：</h4><ul><li><h5 id="for-in"><a href="#for-in" class="headerlink" title="for...in..."></a><code>for...in...</code></h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果键是一个变量，不能使用.语法，必须使用[]带入变量。</span></span><br><span class="line"><span class="comment">//o.a=10;</span></span><br><span class="line"><span class="comment">//a["a"]=10;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line">    consolie.log(prop,o[prop]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o.prop;</span><br><span class="line">o[<span class="string">"prop"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(prop,o[prop]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode();"></a><code>fromCharCode();</code></h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i,key;</span><br><span class="line"><span class="keyword">var</span> o=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">97</span>;i&lt;=<span class="number">122</span>;i++)&#123;</span><br><span class="line">    key=<span class="built_in">String</span>.fromCharCode(i);</span><br><span class="line">    o[key]=j;</span><br><span class="line">    j++;</span><br><span class="line">&#125;<span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="删除属性："><a href="#删除属性：" class="headerlink" title="删除属性："></a>删除属性：</h4><h5 id="delete-o-e-如果删除的属性不存在也不会报错"><a href="#delete-o-e-如果删除的属性不存在也不会报错" class="headerlink" title="delete o.e;如果删除的属性不存在也不会报错"></a><code>delete o.e;</code>如果删除的属性不存在也不会报错</h5><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li><h5 id="对象中存储的内容，相互之间是没有关联的"><a href="#对象中存储的内容，相互之间是没有关联的" class="headerlink" title="对象中存储的内容，相互之间是没有关联的"></a>对象中存储的内容，相互之间是没有关联的</h5></li><li><h5 id="如果需要再对象中查找是否有某个键-quot-a-quot-in-o"><a href="#如果需要再对象中查找是否有某个键-quot-a-quot-in-o" class="headerlink" title="如果需要再对象中查找是否有某个键 &quot;a&quot; in o;"></a>如果需要再对象中查找是否有某个键 <code>&quot;a&quot; in o;</code></h5></li><li><h5 id="如果需要再对象中查找是否有某个值，只能通过-for-in-遍历对象查看每个值是否相等"><a href="#如果需要再对象中查找是否有某个值，只能通过-for-in-遍历对象查看每个值是否相等" class="headerlink" title="如果需要再对象中查找是否有某个值，只能通过 for...in...遍历对象查看每个值是否相等"></a>如果需要再对象中查找是否有某个值，只能通过 <code>for...in...</code>遍历对象查看每个值是否相等</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)</span><br><span class="line"><span class="keyword">if</span>(o[prop]===<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(prop,o[prop]);</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="如果需要根据某个属性，查找对应的值时，速度非常快，删除和添加的速度也非常快。"><a href="#如果需要根据某个属性，查找对应的值时，速度非常快，删除和添加的速度也非常快。" class="headerlink" title="如果需要根据某个属性，查找对应的值时，速度非常快，删除和添加的速度也非常快。"></a>如果需要根据某个属性，查找对应的值时，速度非常快，删除和添加的速度也非常快。</h5></li><li><h5 id="对象存储在堆中"><a href="#对象存储在堆中" class="headerlink" title="对象存储在堆中"></a>对象存储在堆中</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line">o.a=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><h5 id="浏览器控制台先显示为-a-1-再点击查看对象内容时，发生了变化。"><a href="#浏览器控制台先显示为-a-1-再点击查看对象内容时，发生了变化。" class="headerlink" title="浏览器控制台先显示为{a:1}; 再点击查看对象内容时，发生了变化。"></a>浏览器控制台先显示为{a:1}; 再点击查看对象内容时，发生了变化。</h5></li></ul></li></ul></li></ol><h3 id="垃圾回收机制："><a href="#垃圾回收机制：" class="headerlink" title="垃圾回收机制："></a>垃圾回收机制：</h3><ul><li><h5 id="只有存储引用地址的变量才需要设置null做垃圾标识"><a href="#只有存储引用地址的变量才需要设置null做垃圾标识" class="headerlink" title="只有存储引用地址的变量才需要设置null做垃圾标识"></a>只有存储引用地址的变量才需要设置null做垃圾标识</h5></li><li><h5 id="变量o引用堆中一个对象：将栈中变量o设置为null，表示不再引用对象，然后将堆中这个对象的引用列表中这个变量去除。"><a href="#变量o引用堆中一个对象：将栈中变量o设置为null，表示不再引用对象，然后将堆中这个对象的引用列表中这个变量去除。" class="headerlink" title="变量o引用堆中一个对象：将栈中变量o设置为null，表示不再引用对象，然后将堆中这个对象的引用列表中这个变量去除。"></a>变量o引用堆中一个对象：将栈中变量o设置为null，表示不再引用对象，然后将堆中这个对象的引用列表中这个变量去除。</h5></li><li><h5 id="o-null"><a href="#o-null" class="headerlink" title="o=null;"></a>o=null;</h5></li><li><h5 id="如果说一个对象被多个变量引用，只有将所有引用对象的变量全部设置为null，才可以将垃圾回收。"><a href="#如果说一个对象被多个变量引用，只有将所有引用对象的变量全部设置为null，才可以将垃圾回收。" class="headerlink" title="如果说一个对象被多个变量引用，只有将所有引用对象的变量全部设置为null，才可以将垃圾回收。"></a>如果说一个对象被多个变量引用，只有将所有引用对象的变量全部设置为null，才可以将垃圾回收。</h5></li><li><p><img src="/2021/03/18/JavaScript-对象和函数/image-20210318141645809.png" alt="image-20210318141645809"></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o1=o;</span><br><span class="line">o1.a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);</span><br></pre></td></tr></table></figure><ul><li><h5 id="这种方式是赋值了引用地址，因此o和o1是同一个引用地址，同一个对象"><a href="#这种方式是赋值了引用地址，因此o和o1是同一个引用地址，同一个对象" class="headerlink" title="这种方式是赋值了引用地址，因此o和o1是同一个引用地址，同一个对象"></a>这种方式是赋值了引用地址，因此o和o1是同一个引用地址，同一个对象</h5></li><li><h5 id="修改任何一个，另外变量看到的也是被修改后的结果。"><a href="#修改任何一个，另外变量看到的也是被修改后的结果。" class="headerlink" title="修改任何一个，另外变量看到的也是被修改后的结果。"></a>修改任何一个，另外变量看到的也是被修改后的结果。</h5></li></ul></li></ul><h3 id="深复制-浅复制："><a href="#深复制-浅复制：" class="headerlink" title="深复制/浅复制："></a>深复制/浅复制：</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o1=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line">o1[prop]=o[prop];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o1);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">1</span>,<span class="attr">e</span>:<span class="number">10</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> o1=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line">    o1[prop]=o[prop];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="只有深复制才可以真正将一个对象的每个属性都赋值没有引用关系"><a href="#只有深复制才可以真正将一个对象的每个属性都赋值没有引用关系" class="headerlink" title="只有深复制才可以真正将一个对象的每个属性都赋值没有引用关系"></a>只有深复制才可以真正将一个对象的每个属性都赋值没有引用关系</h5></li></ul><h3 id="内存泄漏："><a href="#内存泄漏：" class="headerlink" title="内存泄漏："></a>内存泄漏：</h3><h4 id="大量的不使用的引用对象，没有被标识为null，并且还在不断生成和丢弃。"><a href="#大量的不使用的引用对象，没有被标识为null，并且还在不断生成和丢弃。" class="headerlink" title="大量的不使用的引用对象，没有被标识为null，并且还在不断生成和丢弃。"></a>大量的不使用的引用对象，没有被标识为null，并且还在不断生成和丢弃。</h4><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><ul><li><h4 id="函数的结构形态："><a href="#函数的结构形态：" class="headerlink" title="函数的结构形态："></a>函数的结构形态：</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fns</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=fns(<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><h6 id="function-定义函数"><a href="#function-定义函数" class="headerlink" title="function 定义函数"></a><code>function</code> 定义函数</h6></li><li><h6 id="fns-函数名-可以自己起，与变量起名方式相同，函数名也是变量-全局变量"><a href="#fns-函数名-可以自己起，与变量起名方式相同，函数名也是变量-全局变量" class="headerlink" title="fns 函数名 可以自己起，与变量起名方式相同，函数名也是变量(全局变量)"></a><code>fns</code> 函数名 可以自己起，与变量起名方式相同，<strong><em>函数名也是变量(全局变量)</em></strong></h6></li><li><h6 id="a-b-可以向函数中注入的数据，a-b叫做参数，注入几个数据就要声明几个参数"><a href="#a-b-可以向函数中注入的数据，a-b叫做参数，注入几个数据就要声明几个参数" class="headerlink" title="(a,b) 可以向函数中注入的数据，a,b叫做参数，注入几个数据就要声明几个参数"></a><code>(a,b)</code> 可以向函数中注入的数据，a,b叫做参数，注入几个数据就要声明几个参数</h6></li><li><h6 id="函数执行的语句块"><a href="#函数执行的语句块" class="headerlink" title="{} 函数执行的语句块"></a><code>{}</code> 函数执行的语句块</h6></li><li><h6 id="arguments-所有通过执行函数时传入的参数列表"><a href="#arguments-所有通过执行函数时传入的参数列表" class="headerlink" title="arguments 所有通过执行函数时传入的参数列表"></a><code>arguments</code> 所有通过执行函数时传入的参数列表</h6></li><li><h6 id="return-跳出当前函数，不再执行return以后的语句，并且可以返回一个数据-return-10"><a href="#return-跳出当前函数，不再执行return以后的语句，并且可以返回一个数据-return-10" class="headerlink" title="return 跳出当前函数，不再执行return以后的语句，并且可以返回一个数据(return 10;)"></a><code>return</code> 跳出当前函数，不再执行<code>return</code>以后的语句，并且可以返回一个数据(return 10;)</h6></li><li><h5 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h5></li><li><h6 id="表示执行函数，fns是被执行的函数名，执行函数就是将函数中的语句块全部允许"><a href="#表示执行函数，fns是被执行的函数名，执行函数就是将函数中的语句块全部允许" class="headerlink" title="() 表示执行函数，fns是被执行的函数名，执行函数就是将函数中的语句块全部允许"></a><code>()</code> 表示执行函数，<code>fns</code>是被执行的函数名，执行函数就是将函数中的语句块全部允许</h6></li><li><h6 id="4，5表示的是传参；"><a href="#4，5表示的是传参；" class="headerlink" title="4，5表示的是传参；"></a><code>4，5</code>表示的是传参；</h6></li><li><h6 id="当函数执行完成后，如果使用return返回一个值，将会把返回的值赋值给a"><a href="#当函数执行完成后，如果使用return返回一个值，将会把返回的值赋值给a" class="headerlink" title="当函数执行完成后，如果使用return返回一个值，将会把返回的值赋值给a"></a>当函数执行完成后，如果使用return返回一个值，将会把返回的值赋值给a</h6></li><li><h6 id="如果函数中没有return，或者直接return没有返回数据，则返回undefined"><a href="#如果函数中没有return，或者直接return没有返回数据，则返回undefined" class="headerlink" title="如果函数中没有return，或者直接return没有返回数据，则返回undefined"></a>如果函数中没有return，或者直接return没有返回数据，则返回undefined</h6></li><li><h4 id="函数创建："><a href="#函数创建：" class="headerlink" title="函数创建："></a>函数创建：</h4><ol><li><h5 id="构造函数法"><a href="#构造函数法" class="headerlink" title="构造函数法"></a>构造函数法</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn1=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"s=a+b;return s"</span>);</span><br></pre></td></tr></table></figure></li><li><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ol><li><h6 id="在调用时，浏览器会将这个函数对象内的所有内容转换为代码，这需要消耗大量资源，所以会慢。"><a href="#在调用时，浏览器会将这个函数对象内的所有内容转换为代码，这需要消耗大量资源，所以会慢。" class="headerlink" title="在调用时，浏览器会将这个函数对象内的所有内容转换为代码，这需要消耗大量资源，所以会慢。"></a>在调用时，浏览器会将这个函数对象内的所有内容转换为代码，这需要消耗大量资源，所以会慢。</h6></li></ol></li><li><h6 id="可以由服务端动态生成函数"><a href="#可以由服务端动态生成函数" class="headerlink" title="可以由服务端动态生成函数"></a>可以由服务端动态生成函数</h6></li></ul></li><li><h5 id="命名函数法"><a href="#命名函数法" class="headerlink" title="命名函数法"></a>命名函数法</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="可以在当前函数所在script标签的任意位置执行，或者当前函数所在标签后面的所有标签执行。"><a href="#可以在当前函数所在script标签的任意位置执行，或者当前函数所在标签后面的所有标签执行。" class="headerlink" title="可以在当前函数所在script标签的任意位置执行，或者当前函数所在标签后面的所有标签执行。"></a>可以在当前函数所在script标签的任意位置执行，或者当前函数所在标签后面的所有标签执行。</h5></li><li><h5 id="script标签创建时，会把所有命名函数存储到-堆中-gt-（对象类型），并且栈中以函数名做引用。-gt-标签开始时就创建出了函数。"><a href="#script标签创建时，会把所有命名函数存储到-堆中-gt-（对象类型），并且栈中以函数名做引用。-gt-标签开始时就创建出了函数。" class="headerlink" title="script标签创建时，会把所有命名函数存储到 堆中== &gt;（对象类型），并且栈中以函数名做引用。==&gt;标签开始时就创建出了函数。"></a>script标签创建时，会把所有命名函数存储到 堆中== &gt;（对象类型），并且栈中以函数名做引用。==&gt;标签开始时就创建出了函数。</h5></li><li><h5 id="标签开始时，定义一个与后面函数相同名字的变量："><a href="#标签开始时，定义一个与后面函数相同名字的变量：" class="headerlink" title="标签开始时，定义一个与后面函数相同名字的变量："></a>标签开始时，定义一个与后面函数相同名字的变量：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn1);<span class="comment">//fn1函数</span></span><br><span class="line"><span class="keyword">var</span> fn1=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fn1)<span class="comment">//3 ==&gt;原fn1函数会被覆盖</span></span><br></pre></td></tr></table></figure></li><li><h6 id="如果仅定义没有赋值，函数已经定义过了，所有并不覆盖"><a href="#如果仅定义没有赋值，函数已经定义过了，所有并不覆盖" class="headerlink" title="如果仅定义没有赋值，函数已经定义过了，所有并不覆盖"></a>如果仅定义没有赋值，函数已经定义过了，所有并不覆盖</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn1;</span><br><span class="line"><span class="built_in">console</span>.log(fn1);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h6 id="如果定义并且赋值undefined"><a href="#如果定义并且赋值undefined" class="headerlink" title="如果定义并且赋值undefined"></a>如果定义并且赋值undefined</h6></li></ul></li><li><h5 id="在ES6中，类中的函数"><a href="#在ES6中，类中的函数" class="headerlink" title="在ES6中，类中的函数"></a>在ES6中，类中的函数</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;play()&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="对象中创建函数-方法的创建"><a href="#对象中创建函数-方法的创建" class="headerlink" title="对象中创建函数(方法的创建)"></a>对象中创建函数(方法的创建)</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">play()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h5 id="匿名函数法"><a href="#匿名函数法" class="headerlink" title="匿名函数法"></a>匿名函数法</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//匿名函数自执行函数，只能执行一次</span></span><br><span class="line"><span class="number">1.</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</span><br><span class="line"><span class="number">2.</span>~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"><span class="number">3.</span>+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br></pre></td></tr></table></figure></li><li><h6 id="匿名函数-不会在初始化时被定义在栈中，会被运行时定义给变量。"><a href="#匿名函数-不会在初始化时被定义在栈中，会被运行时定义给变量。" class="headerlink" title="匿名函数 不会在初始化时被定义在栈中，会被运行时定义给变量。"></a>匿名函数 不会在初始化时被定义在栈中，会被运行时定义给变量。</h6></li><li><h6 id="运行到赋值时才将函数赋值给变量，意味着在函数赋值给变量之前不能直接调用。"><a href="#运行到赋值时才将函数赋值给变量，意味着在函数赋值给变量之前不能直接调用。" class="headerlink" title="运行到赋值时才将函数赋值给变量，意味着在函数赋值给变量之前不能直接调用。"></a>运行到赋值时才将函数赋值给变量，意味着在函数赋值给变量之前不能直接调用。</h6></li><li><h6 id="匿名函数自执行函数，只能执行一次。"><a href="#匿名函数自执行函数，只能执行一次。" class="headerlink" title="匿名函数自执行函数，只能执行一次。"></a>匿名函数自执行函数，只能执行一次。</h6></li></ul></li></ol></li></ul></li><li><h4 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h4><ul><li><p>全局中定义了一个变量a=5;</p></li><li><p>在任何位置都可以调用全局变量</p></li><li><p>函数外使用<code>var</code>定义的变量都是全局变量</p><ul><li><h5 id="函数名在外部定义，是全局变量。"><a href="#函数名在外部定义，是全局变量。" class="headerlink" title="函数名在外部定义，是全局变量。"></a>函数名在外部定义，是全局变量。</h5></li></ul></li><li><p>在函数内使用 <code>var</code>定义的变量都是局部变量，就是该函数的内的局部变量</p></li><li><p>只能在该函数内调用，不能在函数外或者别的函数中调用</p></li><li><p>局部变量只能在当前函数内定义，并且函数执行完成后会自动销毁该局部变量。</p></li><li><p>同名变量，只要在函数内<strong><em>任何位置</em></strong>定义看局部变量（使用var 在函数中定义的函数），在这个函数中就不能找到同名全局变量，在局部变量定义之前调用这个局部变量，都是undefined。</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">6</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        a=<span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">fn1();<span class="comment">//7  在没有执行到赋值行前 变量都是undefined，所以进入else语句块</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//5</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">6</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        a=<span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">fn1();<span class="comment">//6==&gt; 在函数内赋值前调用打印都是undefined。</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//5</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>局部变量在函数内的优先级高于全局变量，我们可以认为同名变量为变量提升。</p></li><li><p>全局变量时建立在window中，所以可以通过window调用。</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="built_in">window</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>参数是局部变量。</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">undefined</span>) a=<span class="number">1</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">return</span> fn2(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> fn3(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a+=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=fn1();</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">//函数式编程</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>函数名是全局变量。</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//打印函数自己</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">6</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        a=<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="number">5</span>);<span class="comment">//在定义与函数名相同变量之前正常</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">6</span>;</span><br><span class="line"><span class="comment">//a(5);//放在定义之后，就会报错 ==&gt; 不是一个方法。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">6</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        a=<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>- <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">          obj.a=<span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fn1(o);</span><br><span class="line">      <span class="built_in">console</span>.log(o);<span class="comment">//&#123;a:10&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      </span><br><span class="line">​      <span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">​      <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">​          obj=&#123;<span class="attr">a</span>:<span class="number">10</span>&#125;</span><br><span class="line">​          <span class="built_in">console</span>.log(obj)<span class="comment">//&#123;a:10&#125; ==&gt; 传入的o并没有用到，只给obj赋值</span></span><br><span class="line">​      &#125;</span><br><span class="line">​      fn1(o);</span><br><span class="line">​      <span class="built_in">console</span>.log(o);&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>少全局，多局部。</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.n, b.n) <span class="comment">//2 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.x, b.x) <span class="comment">//undefined &#123;n:2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fn)<span class="comment">//打印函数自己</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="json-是一种字符串格式-中属性名是用双引号引起来的"><a href="#json-是一种字符串格式-中属性名是用双引号引起来的" class="headerlink" title="json:是一种字符串格式 {}中属性名是用双引号引起来的"></a>json:是一种字符串格式 {}中属性名是用双引号引起来的</h3><ol><li><h4 id="JSON-stringify-对象-：将对象转换为json格式的字符串。"><a href="#JSON-stringify-对象-：将对象转换为json格式的字符串。" class="headerlink" title="JSON.stringify(对象)：将对象转换为json格式的字符串。"></a>JSON.stringify(对象)：将对象转换为json格式的字符串。</h4></li><li><h4 id="JSON-parse-json格式的字符串-：将json格式的字符串转换为对象。"><a href="#JSON-parse-json格式的字符串-：将json格式的字符串转换为对象。" class="headerlink" title="JSON.parse(json格式的字符串)：将json格式的字符串转换为对象。"></a>JSON.parse(json格式的字符串)：将json格式的字符串转换为对象。</h4></li><li><h4 id="深复制："><a href="#深复制：" class="headerlink" title="深复制："></a>深复制：</h4><ul><li><p>先将对象转换为JSON字符串，字符串是非引用关系</p></li><li><p>然后再转换为对象，就会自动生成新的对象。</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">obj.a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">//无变化</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.h=obj.h.toString();</span><br><span class="line"><span class="keyword">var</span> str=<span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"><span class="keyword">var</span> o1=<span class="built_in">JSON</span>.parse(str);</span><br><span class="line"><span class="built_in">console</span>.log(o1);</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="JSON字符串在转换时会丢弃对象中的方法。"><a href="#JSON字符串在转换时会丢弃对象中的方法。" class="headerlink" title="JSON字符串在转换时会丢弃对象中的方法。"></a>JSON字符串在转换时会丢弃对象中的方法。</h4></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;JavaScript对象相关&lt;/li&gt;
&lt;li&gt;垃圾回收机制、内存泄漏&lt;/li&gt;
&lt;li&gt;JavaScript函数相关&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="深复制/浅复制" scheme="http://ankang.icu/tags/%E6%B7%B1%E5%A4%8D%E5%88%B6-%E6%B5%85%E5%A4%8D%E5%88%B6/"/>
    
      <category term="垃圾回收机制" scheme="http://ankang.icu/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript条件语句与循环语句</title>
    <link href="http://ankang.icu/2021/03/17/21-03-19/"/>
    <id>http://ankang.icu/2021/03/17/21-03-19/</id>
    <published>2021-03-16T23:51:19.000Z</published>
    <updated>2021-03-27T08:37:03.952Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h5 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h5></li><li><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5></li><li><h5 id="解决基本问题"><a href="#解决基本问题" class="headerlink" title="解决基本问题"></a>解决基本问题</h5><a id="more"></a></li></ol><h5 id="位非运算：以二进制运算，非数值会变成0"><a href="#位非运算：以二进制运算，非数值会变成0" class="headerlink" title="位非运算：以二进制运算，非数值会变成0"></a>位非运算：以二进制运算，非数值会变成0</h5><h5 id="isNaN-具有隐式转换功能"><a href="#isNaN-具有隐式转换功能" class="headerlink" title="isNaN(); 具有隐式转换功能"></a><code>isNaN();</code> 具有隐式转换功能</h5><h5 id="Number-isNaN-不会隐式转换-，如果传入的不是NaN，或者其他不是数值的字符，返回值都是false。"><a href="#Number-isNaN-不会隐式转换-，如果传入的不是NaN，或者其他不是数值的字符，返回值都是false。" class="headerlink" title="Number.isNaN();不会隐式转换 ，如果传入的不是NaN，或者其他不是数值的字符，返回值都是false。"></a><code>Number.isNaN();</code>不会隐式转换 ，如果传入的不是NaN，或者其他不是数值的字符，返回值都是false。</h5><h4 id="条件语句："><a href="#条件语句：" class="headerlink" title="条件语句："></a>条件语句：</h4><ol><li><h5 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h5><ul><li><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件是一个表达式，表达式返回的结果会被隐式转换为布尔值</span></span><br><span class="line"><span class="keyword">if</span>(条件)&#123;语句块&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(a=<span class="number">3</span>)&#123;&#125;<span class="comment">//不管a原先是多少，都会进入语句块</span></span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">3</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(a===<span class="number">3</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前面参与运算，后面判断条件</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span>(a++,a==<span class="number">2</span>)&#123;<span class="built_in">console</span>.log(<span class="string">"aaa"</span>);&#125;</span><br><span class="line"><span class="comment">//语句块只有一句话时，花括号可以省略。</span></span><br><span class="line"><span class="comment">//如果没有花括号默认只第一句为条件语句块。</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="comment">//满足条件时，执行语句块   </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//不满足时，执行语句块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码出错时，才会使用try-catch</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//只有try语句块的内容报错了，才会执行</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//执行try/catch都会执行</span></span><br><span class="line">&#125;<span class="keyword">throw</span>&#123;</span><br><span class="line">    <span class="comment">//异常情况下抛出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="if-else-与-try-catch区别："><a href="#if-else-与-try-catch区别：" class="headerlink" title="if else 与 try catch区别："></a>if else 与 try catch区别：</h5><ul><li><h5 id="if-else"><a href="#if-else" class="headerlink" title="if else:"></a>if else:</h5><ul><li>条件语句需要预先考虑到可能出现的错误并且提前做条件判断执行。</li><li>需要明确的条件</li><li>性能消耗小</li></ul></li><li><h5 id="try-catch："><a href="#try-catch：" class="headerlink" title="try catch："></a>try catch：</h5><ul><li>不需要预先判断出现错误，由try自身判断。</li><li>出错切换</li><li>性能消耗大</li></ul></li></ul></li><li><h5 id="if-else-if和多if判断语句："><a href="#if-else-if和多if判断语句：" class="headerlink" title="if  else if和多if判断语句："></a>if  else if和多if判断语句：</h5><ol><li>多if语句，会进入多次，每个if都进行判断</li><li>多if语句不会对上次的判断进行屏蔽，需要自己将上面判断过的添加进行删减。</li></ol></li><li><h5 id="多分支条件语句-判断相等-（-）绝对"><a href="#多分支条件语句-判断相等-（-）绝对" class="headerlink" title="多分支条件语句 判断相等 （===）绝对"></a>多分支条件语句 判断相等 （===）绝对</h5><ul><li><p>判断表达式和case中哪一个值相等</p><ol><li>break 跳出语句块</li><li>default 如果不等同任何一个case的值，则执行default中的语句块</li></ol></li><li><p><strong>穿越：</strong>一旦一个条件语句块中没有<code>break</code>,会自动执行下一个条件的语句块。</p></li><li><strong>状态机</strong>：故意制作穿越，达成游戏技能关联目的。</li></ul></li></ul></li></ul></li></ol><h4 id="循环语句："><a href="#循环语句：" class="headerlink" title="循环语句："></a>循环语句：</h4><ol><li><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><ul><li><p>条件中有多个表达式时，逗号前的表达式在循环前执行，再进行判断==&gt;需要将循环条件放在while()中的最后</p><ul><li><p>深度遍历</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">value</span>:<span class="number">1</span>,<span class="attr">next</span>:&#123;<span class="attr">value</span>:<span class="number">2</span>,<span class="attr">next</span>:&#123;<span class="attr">value</span>:<span class="number">3</span>,next(value:<span class="number">4</span>,<span class="attr">next</span>:&#123;<span class="attr">value</span>:<span class="number">5</span>,<span class="attr">next</span>:<span class="literal">null</span>&#125;)&#125;&#125;&#125;;</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">while</span>(a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a.value);</span><br><span class="line">    a=a.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span><span class="keyword">break</span>语句</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a.value);</span><br><span class="line">    a=a.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><h5 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h5><ul><li><p>必执行一次，然后根据条件判断是否继续循环</p></li><li><p>可以规划出起始条件和结束条件，某个变量并不是循环的起始部分。</p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i=0;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">i--;</span><br><span class="line">console.log(i);</span><br><span class="line"><span class="keyword">if</span>(i&lt;-10) <span class="built_in">break</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;0);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><ul><li><blockquote><p>for(初始值；条件；向条件外变化的表达式){}</p><ul><li>初始值：开始执行    执行一次</li><li>条件：循环开始判断（进入循环语句块之前）循环几次执行几次（比循环语句块多执行一次）</li><li>向条件外变化的表达式：每次循环语句块结束后执行  循环几次执行几次（和循环语句块执行次数一样）。</li></ul><p>for(;;){}==&gt;死循环</p></blockquote></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,s=<span class="number">0</span>;i&lt;=<span class="number">100</span>;s+=i,i++);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,s=<span class="number">0</span>;s+=i,i++<span class="xml"><span class="tag">&lt;<span class="name">100;);</span></span></span></span><br></pre></td></tr></table></figure></li><li><p>广度优先遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>深度优先遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">value</span>:<span class="number">1</span>,<span class="attr">next</span>:&#123;<span class="attr">value</span>:<span class="number">2</span>,<span class="attr">next</span>:&#123;<span class="attr">value</span>:<span class="number">3</span>,next(value:<span class="number">4</span>,<span class="attr">next</span>:&#123;<span class="attr">value</span>:<span class="number">5</span>,<span class="attr">next</span>:<span class="literal">null</span>&#125;)&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(;a;a=a.next) <span class="built_in">console</span>.log(a.value);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="document-body-innerHTML-和-document-write-都会造成回流"><a href="#document-body-innerHTML-和-document-write-都会造成回流" class="headerlink" title="document.body.innerHTML 和 document.write()都会造成回流"></a><code>document.body.innerHTML</code> 和 <code>document.write()</code>都会造成<strong><em>回流</em></strong></h4><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;div1的内容&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var div1 = document.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">document.onclick=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">document.body.innerHTML+=<span class="string">"*"</span>;</span><br><span class="line">div1.style.color=<span class="string">"red"</span>;//测试发现点击事件后，div1的内容样式并没有发生变化。</span><br><span class="line"></span><br><span class="line">var div2=document.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">console.log(div1===div2);//控制台输出<span class="literal">false</span>==&gt; div1和div2不一样了</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>因为第一次页面重构时会自动第一次回流，所以再构造页面时执行</p></li><li><p><code>document.body.innerHTML</code>设置值会将所有的内容清空设值</p></li><li><p><code>document.body.innerHTML+=</code>会将所有的内容累加其中重新设值</p></li><li><p><code>document.write()</code>会直接添加再页面的原有内容的后面</p></li></ul><h5 id="当第一次页面渲染完成后，再执行document-body-innerHTML或者document-write-，都会再次触发回流，并且表现不同："><a href="#当第一次页面渲染完成后，再执行document-body-innerHTML或者document-write-，都会再次触发回流，并且表现不同：" class="headerlink" title="当第一次页面渲染完成后，再执行document.body.innerHTML或者document.write()，都会再次触发回流，并且表现不同："></a>当第一次页面渲染完成后，再执行<code>document.body.innerHTML</code>或者<code>document.write()</code>，都会再次触发回流，并且表现不同：</h5><ul><li><h6 id="document-body-innerHTML设置值会将所有的内容清空设值"><a href="#document-body-innerHTML设置值会将所有的内容清空设值" class="headerlink" title="document.body.innerHTML设置值会将所有的内容清空设值"></a><code>document.body.innerHTML</code>设置值会将所有的内容清空设值</h6></li><li><h6 id="document-body-innerHTML-会将原有的内容累加其中重新设值"><a href="#document-body-innerHTML-会将原有的内容累加其中重新设值" class="headerlink" title="document.body.innerHTML+=会将原有的内容累加其中重新设值"></a><code>document.body.innerHTML+=</code>会将原有的内容累加其中重新设值</h6></li><li><h6 id="document-write-会清空原body中的所有内容，设置为新内容"><a href="#document-write-会清空原body中的所有内容，设置为新内容" class="headerlink" title="document.write()会清空原body中的所有内容，设置为新内容"></a><code>document.write()</code>会清空原body中的所有内容，设置为新内容</h6></li><li><h6 id="当也买你渲染完成后再次回流以后，造成页面渲染完成前获取的元素将在回流后无法使用，需要重新获取-gt-因为元素发生了变化。"><a href="#当也买你渲染完成后再次回流以后，造成页面渲染完成前获取的元素将在回流后无法使用，需要重新获取-gt-因为元素发生了变化。" class="headerlink" title="当也买你渲染完成后再次回流以后，造成页面渲染完成前获取的元素将在回流后无法使用，需要重新获取==&gt;因为元素发生了变化。"></a>当也买你渲染完成后再次回流以后，造成页面渲染完成前获取的元素将在回流后无法使用，需要重新获取==&gt;因为元素发生了变化。</h6></li></ul><h4 id="移动的盒子："><a href="#移动的盒子：" class="headerlink" title="移动的盒子："></a>移动的盒子：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #moveBox&#123;</span><br><span class="line">            height: 50px;width: 50px;</span><br><span class="line">            background-color: #000;</span><br><span class="line">            position: relative;</span><br><span class="line">            /* 想要盒子动起来需要添加绝对/相对定位 */</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"moveBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divBox = <span class="built_in">document</span>.getElementById(<span class="string">"moveBox"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x=<span class="number">0</span>,y=<span class="number">0</span>,status=<span class="string">"right"</span>;</span></span><br><span class="line"><span class="javascript">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span>(status)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">"right"</span>:</span></span><br><span class="line">                    x++;</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(x===<span class="number">200</span>) status=<span class="string">"down"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">"down"</span>:</span></span><br><span class="line">                    y++;</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(y===<span class="number">200</span>) status=<span class="string">"left"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">"left"</span>:</span></span><br><span class="line">                    x--;</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(x===<span class="number">0</span>) status=<span class="string">"up"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">"up"</span>:</span></span><br><span class="line">                    y--;</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(y===<span class="number">0</span>) status=<span class="string">"right"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            divBox.style.left=x+<span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">            divBox.style.top=y+<span class="string">"px"</span>;</span></span><br><span class="line">        &#125;, 16);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="乘法口诀表："><a href="#乘法口诀表：" class="headerlink" title="乘法口诀表："></a>乘法口诀表：</h4><h4 id="三角形、菱形"><a href="#三角形、菱形" class="headerlink" title="三角形、菱形"></a>三角形、菱形</h4><h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a><code>break/continue</code></h4><ul><li><p><code>break</code>跳出 循环并且不再循环</p></li><li><p><code>continue</code>继续 跳出本次循环，继续下次循环，当前本次不执行continue后面的语句。</p><ul><li>使用while和do while语句，i++不能写在continue后面。</li></ul></li><li><p><code>break</code> 用于死循环跳出</p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i=0;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i===5) <span class="built_in">break</span>;</span><br><span class="line">console.log(<span class="string">"aaa"</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>break</code> 跳出标记，标记后面跟冒号</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">ankang:<span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i+j===<span class="number">10</span>) <span class="keyword">break</span> ankang;</span><br><span class="line"><span class="built_in">console</span>.log(i,j);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>continue</code>  也可以跳出标记</p></li></ul><h4 id="判断2-100以内的素数：‘"><a href="#判断2-100以内的素数：‘" class="headerlink" title="判断2-100以内的素数：‘"></a>判断2-100以内的素数：‘</h4><ol><li><h5 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ak:<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>,j;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j===<span class="number">0</span>) <span class="keyword">continue</span> ak;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="string">"这是素数"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="while循环："><a href="#while循环：" class="headerlink" title="while循环："></a>while循环：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">2</span>,j;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    j=<span class="number">2</span>;</span><br><span class="line">    bool=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%j===<span class="number">0</span>)&#123;</span><br><span class="line">            bool=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bool)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="string">"是素数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j=<span class="number">1</span>,i;</span><br><span class="line">ak:<span class="keyword">while</span>(j++<span class="xml"><span class="tag">&lt;<span class="name">100)&#123;</span></span></span></span><br><span class="line"><span class="xml">    i=2;</span></span><br><span class="line">    while(i&lt;j)&#123;</span><br><span class="line">        if(j%i===0) continue ak;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(j+"是素数");</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;条件语句&quot;&gt;&lt;a href=&quot;#条件语句&quot; class=&quot;headerlink&quot; title=&quot;条件语句&quot;&gt;&lt;/a&gt;条件语句&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;循环语句&quot;&gt;&lt;a href=&quot;#循环语句&quot; class=&quot;headerlink&quot; title=&quot;循环语句&quot;&gt;&lt;/a&gt;循环语句&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;解决基本问题&quot;&gt;&lt;a href=&quot;#解决基本问题&quot; class=&quot;headerlink&quot; title=&quot;解决基本问题&quot;&gt;&lt;/a&gt;解决基本问题&lt;/h5&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Study" scheme="http://ankang.icu/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>数据类型转换与运算符</title>
    <link href="http://ankang.icu/2021/03/16/21-03-18/"/>
    <id>http://ankang.icu/2021/03/16/21-03-18/</id>
    <published>2021-03-16T00:03:46.000Z</published>
    <updated>2021-03-27T08:36:51.114Z</updated>
    
    <content type="html"><![CDATA[<ol><li>字符串、布尔值、数值之间的转换</li><li>运算符</li><li>运算有关的一些条件判断。</li></ol><a id="more"></a><h3 id="字符串转换数值："><a href="#字符串转换数值：" class="headerlink" title="字符串转换数值："></a>字符串转换数值：</h3><ol><li><h4 id="强制转换数值：通过Number-构造函数。"><a href="#强制转换数值：通过Number-构造函数。" class="headerlink" title="强制转换数值：通过Number();构造函数。"></a>强制转换数值：通过Number();构造函数。</h4><ul><li><h5 id="如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。"><a href="#如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。" class="headerlink" title="如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。"></a>如果字符串是由数字构成，强制转换后将变为数值，否则变成NaN。</h5><blockquote><h6 id="NaN：是非数值，类型属于数值类型"><a href="#NaN：是非数值，类型属于数值类型" class="headerlink" title="NaN：是非数值，类型属于数值类型"></a>NaN：是非数值，类型属于数值类型</h6></blockquote></li></ul></li><li><h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt();"></a>parseInt();</h4><ul><li><h5 id="转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。"><a href="#转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。" class="headerlink" title="转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。"></a>转换数值时，如果字符串是纯数字构成，或者第一个字符是数字，则转换时从头开始转换到字母之前。</h5></li><li><h5 id="取整，小数点后省略。"><a href="#取整，小数点后省略。" class="headerlink" title="取整，小数点后省略。"></a><strong>取整</strong>，<em>小数点后省略。</em></h5></li><li><h5 id="第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。"><a href="#第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。" class="headerlink" title="第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。"></a>第二个参数（可选）：进制，根据字符串的进制转换成十进制数值，当有进制参数时，特点1遇到字母不同。</h5></li></ul></li><li><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat();"></a>parseFloat();</h4><ul><li><h5 id="保留小数点"><a href="#保留小数点" class="headerlink" title="保留小数点"></a>保留小数点</h5></li></ul><blockquote><ul><li><h6 id="Number强制转换会将布尔值转换为数值，true-gt-1-false-gt-0"><a href="#Number强制转换会将布尔值转换为数值，true-gt-1-false-gt-0" class="headerlink" title="Number强制转换会将布尔值转换为数值，true==&gt;1,false==&gt;0"></a>Number强制转换会将布尔值转换为数值，true==&gt;1,false==&gt;0</h6></li><li><h6 id="parseInt-的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt-首先会自动隐式转换为字符串。"><a href="#parseInt-的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt-首先会自动隐式转换为字符串。" class="headerlink" title="parseInt 的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt 首先会自动隐式转换为字符串。"></a>parseInt 的第一个参数要求是字符串，但是true和false都不是字符串，所以parseInt 首先会自动隐式转换为字符串。</h6></li></ul></blockquote></li></ol><h3 id="布尔值转换为字符串："><a href="#布尔值转换为字符串：" class="headerlink" title="布尔值转换为字符串："></a>布尔值转换为字符串：</h3><ol><li><h4 id="都是直接变成字符串-String"><a href="#都是直接变成字符串-String" class="headerlink" title="都是直接变成字符串 String();"></a>都是直接变成字符串 String();</h4></li></ol><h3 id="字符，数值变成布尔值："><a href="#字符，数值变成布尔值：" class="headerlink" title="字符，数值变成布尔值："></a>字符，数值变成布尔值：</h3><ol><li><h4 id="强制转换布尔值"><a href="#强制转换布尔值" class="headerlink" title="强制转换布尔值"></a>强制转换布尔值</h4><ul><li><h5 id="以下几种强转布尔值时会变为false-其他的都是true。"><a href="#以下几种强转布尔值时会变为false-其他的都是true。" class="headerlink" title="以下几种强转布尔值时会变为false,其他的都是true。"></a>以下几种强转布尔值时会变为false,其他的都是true。</h5><blockquote><h6 id="0-；””-；false-；NaN-；undefined-；null。"><a href="#0-；””-；false-；NaN-；undefined-；null。" class="headerlink" title="0    ；””    ；false    ；NaN    ；undefined    ；null。"></a>0    ；””    ；false    ；NaN    ；undefined    ；null。</h6></blockquote></li><li><h5 id="Boolean-0-Boolean-“”-Boolean-NaN"><a href="#Boolean-0-Boolean-“”-Boolean-NaN" class="headerlink" title="Boolean(0);Boolean(“”);Boolean(NaN);"></a>Boolean(0);Boolean(“”);Boolean(NaN);</h5></li></ul></li></ol><h3 id="将undefined转换为数值-gt-NaN"><a href="#将undefined转换为数值-gt-NaN" class="headerlink" title="将undefined转换为数值==&gt; NaN;"></a>将undefined转换为数值==&gt; NaN;</h3><ul><li><h4 id="console-log-Number-undefined"><a href="#console-log-Number-undefined" class="headerlink" title="console.log(Number(undefined);"></a>console.log(Number(undefined);</h4></li></ul><h3 id="将null转换为数值-gt-0"><a href="#将null转换为数值-gt-0" class="headerlink" title="将null转换为数值==&gt; 0;"></a>将null转换为数值==&gt; 0;</h3><ul><li><h4 id="console-log-Number-null"><a href="#console-log-Number-null" class="headerlink" title="console.log(Number(null);"></a>console.log(Number(null);</h4></li></ul><h3 id="将对象转换为数值-gt-NaN"><a href="#将对象转换为数值-gt-NaN" class="headerlink" title="将对象转换为数值==&gt; NaN;"></a>将对象转换为数值==&gt; NaN;</h3><ul><li><h4 id="console-log-Number-a-1"><a href="#console-log-Number-a-1" class="headerlink" title="console.log(Number({a:1}));"></a>console.log(Number({a:1}));</h4></li></ul><h3 id="将对象转换为字符串-gt-object-Object"><a href="#将对象转换为字符串-gt-object-Object" class="headerlink" title="将对象转换为字符串==&gt; [object Object]"></a>将对象转换为字符串==&gt; [object Object]</h3><ul><li><h4 id="console-log-String-a-1"><a href="#console-log-String-a-1" class="headerlink" title="console.log(String({a:1}));"></a>console.log(String({a:1}));</h4></li><li><blockquote><h5 id="所有的任何对象转换为字符串都这样"><a href="#所有的任何对象转换为字符串都这样" class="headerlink" title="所有的任何对象转换为字符串都这样"></a>所有的任何对象转换为字符串都这样</h5></blockquote></li></ul><h3 id="string，number，boolean，undefined，null-都是存在内存的栈中。"><a href="#string，number，boolean，undefined，null-都是存在内存的栈中。" class="headerlink" title="string，number，boolean，undefined，null 都是存在内存的栈中。"></a>string，number，boolean，undefined，null 都是存在内存的栈中。</h3><ul><li><h4 id="栈中数据读取速度快，但是可以存储的数据较小。"><a href="#栈中数据读取速度快，但是可以存储的数据较小。" class="headerlink" title="栈中数据读取速度快，但是可以存储的数据较小。"></a>栈中数据读取速度快，但是可以存储的数据较小。</h4></li></ul><h3 id="object是存放在内存的堆中。"><a href="#object是存放在内存的堆中。" class="headerlink" title="object是存放在内存的堆中。"></a>object是存放在内存的堆中。</h3><ul><li><h4 id="堆中可以存储大量的数据，但是读取速度慢。"><a href="#堆中可以存储大量的数据，但是读取速度慢。" class="headerlink" title="堆中可以存储大量的数据，但是读取速度慢。"></a>堆中可以存储大量的数据，但是读取速度慢。</h4></li></ul><h3 id="所有的基础类型都是基于Object构建而成。"><a href="#所有的基础类型都是基于Object构建而成。" class="headerlink" title="所有的基础类型都是基于Object构建而成。"></a>所有的基础类型都是基于Object构建而成。</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line">a.toString();</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;<span class="comment">//数据 number存储在栈中typeof==&gt;number</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">5</span>);<span class="comment">//数值对象 Number存储在堆中typeof==&gt;object</span></span><br><span class="line"><span class="comment">//number可以理解为Number类型在栈中的映射。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h3><ol><li><h4 id="算数运算符："><a href="#算数运算符：" class="headerlink" title="算数运算符："></a>算数运算符：</h4><ol><li><h5 id="；"><a href="#；" class="headerlink" title="+    - * /；"></a><code>+    - * /</code>；</h5></li><li><h5 id="取模-取余；"><a href="#取模-取余；" class="headerlink" title="%取模==取余；"></a><code>%</code>取模==取余；</h5></li><li><h5 id="字符相加：首尾相连"><a href="#字符相加：首尾相连" class="headerlink" title="字符相加：首尾相连"></a>字符相加：首尾相连</h5><ul><li><h6 id="隐式转换-自动默认使用目标类型的构造函数强制转换-String"><a href="#隐式转换-自动默认使用目标类型的构造函数强制转换-String" class="headerlink" title="隐式转换 自动默认使用目标类型的构造函数强制转换 String()"></a>隐式转换 自动默认使用目标类型的构造函数强制转换 <code>String()</code></h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"cde"</span>+&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;+<span class="string">""</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="数值-布尔值会隐式转为数值相加"><a href="#数值-布尔值会隐式转为数值相加" class="headerlink" title="数值+布尔值会隐式转为数值相加"></a>数值+布尔值会隐式转为数值相加</h6></li><li><h6 id="数值-undefined会隐式转为数值相加-NaN。"><a href="#数值-undefined会隐式转为数值相加-NaN。" class="headerlink" title="数值+undefined会隐式转为数值相加 NaN。"></a>数值+undefined会隐式转为数值相加 NaN。</h6></li><li><h6 id="null隐式转换为0。"><a href="#null隐式转换为0。" class="headerlink" title="null隐式转换为0。"></a>null隐式转换为0。</h6><blockquote><ul><li>数值与除了字符串外的非数值相加都会隐式转换为数值类型相加</li><li>布尔值、undefined。null相加都会转换为数值</li></ul></blockquote></li><li><h5 id="除了-以外，-，-，-，-都会依照数值运算先将所有其他类型转换为数值后运算。"><a href="#除了-以外，-，-，-，-都会依照数值运算先将所有其他类型转换为数值后运算。" class="headerlink" title="除了+以外，-，*，/，% 都会依照数值运算先将所有其他类型转换为数值后运算。"></a>除了+以外，-，*，/，% 都会依照数值运算先将所有其他类型转换为数值后运算。</h5></li></ol></li><li><h4 id="赋值运算符和一元运算符："><a href="#赋值运算符和一元运算符：" class="headerlink" title="赋值运算符和一元运算符："></a>赋值运算符和一元运算符：</h4><ol><li><h5 id="，-，"><a href="#，-，" class="headerlink" title="+=，-=，*=,/="></a><code>+=，-=，*=,/=</code></h5><blockquote><ol><li><h5 id="var-b-a-2"><a href="#var-b-a-2" class="headerlink" title="var b=a=2;"></a><code>var b=a=2;</code></h5><ul><li><h6 id="先将a-2的结果赋值给b"><a href="#先将a-2的结果赋值给b" class="headerlink" title="先将a=2的结果赋值给b"></a>先将a=2的结果赋值给b</h6></li><li><h6 id="再将2赋值给a"><a href="#再将2赋值给a" class="headerlink" title="再将2赋值给a"></a>再将2赋值给a</h6></li></ul></li><li><h5 id="var-a-5-a-a-a-2-gt-a-7"><a href="#var-a-5-a-a-a-2-gt-a-7" class="headerlink" title="var a=5;a=a=a+2;===&gt; a=7;"></a><code>var a=5;a=a=a+2;</code>===&gt; a=7;</h5></li></ol><ul><li><h6 id="同时进行，后面的a-a-2不会用前边的a-7。"><a href="#同时进行，后面的a-a-2不会用前边的a-7。" class="headerlink" title="同时进行，后面的a=a+2不会用前边的a=7。"></a>同时进行，后面的<code>a=a+2</code>不会用前边的<code>a=7</code>。</h6></li></ul><ol start="3"><li><h5 id="a-2-步长，累加"><a href="#a-2-步长，累加" class="headerlink" title="a+=2;  步长，累加"></a><code>a+=2;</code>  步长，累加</h5></li><li><h5 id="var-a-quot-10-quot-a-0-隐式转换为数值"><a href="#var-a-quot-10-quot-a-0-隐式转换为数值" class="headerlink" title="var a=&quot;10&quot;;a-=0;隐式转换为数值"></a><code>var a=&quot;10&quot;;a-=0;</code>隐式转换为数值</h5><ul><li><h6 id="console-log-a-gt-10"><a href="#console-log-a-gt-10" class="headerlink" title="console.log(a);==&gt;10"></a>console.log(a);==&gt;10</h6></li></ul></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;    var a=1,b=2,c=3;</span><br><span class="line">&gt;    a+=1,b+=2,c+=3;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><blockquote><h6 id="有赋值，中间就可以逗号连接。"><a href="#有赋值，中间就可以逗号连接。" class="headerlink" title="有赋值，中间就可以逗号连接。"></a>有赋值，中间就可以逗号连接。</h6></blockquote></blockquote></li><li><h5 id><a href="#" class="headerlink" title="++"></a><code>++</code></h5><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">"3"</span>;</span><br><span class="line">a++;<span class="comment">//会隐式转换为数值在进行运算</span></span><br><span class="line">a+=<span class="number">1</span>;<span class="comment">//参照算数运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span><span class="number">.1</span>og(++a+a+++a+a+++a+a,a);==&gt;(<span class="number">24</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=a++;<span class="comment">//b:1 a:2</span></span><br><span class="line"><span class="keyword">var</span> b=++a;<span class="comment">//b:2 a:2</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><h5 id="关系运算符和逻辑运算符："><a href="#关系运算符和逻辑运算符：" class="headerlink" title="关系运算符和逻辑运算符："></a>关系运算符和逻辑运算符：</h5><ol><li><h6 id="lt-lt-gt-gt-返回布尔值"><a href="#lt-lt-gt-gt-返回布尔值" class="headerlink" title="&lt; &lt;= &gt; &gt;= 返回布尔值"></a><code>&lt; &lt;= &gt; &gt;=</code> 返回布尔值</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">4</span>;</span><br><span class="line">a=a-a&gt;<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="返回布尔值"><a href="#返回布尔值" class="headerlink" title="== === != !==返回布尔值"></a><code>== === != !==</code>返回布尔值</h6><ul><li><p><code>==    !=</code>会自动隐式转换为两端相同后比较</p></li><li><p><code>===  !==</code>不转换类型，除了比较值以外还会比较类型</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>==<span class="string">"1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>==<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>===<span class="literal">true</span>);</span><br><span class="line">相等类型：</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>==<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="string">""</span>);</span><br><span class="line">相等：</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>==<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>0 false &quot;&quot;</code>==&gt;相等</p></li><li><p><code>null undefined</code>==&gt;相等 表示空或者未赋值</p></li><li><p><code>console.log(NaN==NaN);</code>==&gt;不等</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">"4a"</span>;</span><br><span class="line"><span class="comment">// console. log(Number(a)==NaN)//不能用==NaN判断非数值</span></span><br><span class="line"><span class="comment">// console. log(isNaN(Number(a)));</span></span><br><span class="line"><span class="built_in">console</span><span class="number">.1</span>og(<span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(a)));</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//都是判断数值类型，非数值类型，不隐式转换返回false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(a));</span><br><span class="line"><span class="comment">//会先隐式转换为数值，然后在判断是否是非数值</span></span><br><span class="line"><span class="comment">// console.log(isNaN(a));</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>取反，取布尔值的反</p><ul><li>如果是布尔值就会变成相反的结果true==&gt;false,false==&gt;true;</li><li>如果不是布尔值就会隐式转换为布尔值，然后再取反。</li></ul></li></ul></li><li><h6 id="amp-amp-返回的值根据内容确定，不一定是布尔值。"><a href="#amp-amp-返回的值根据内容确定，不一定是布尔值。" class="headerlink" title="&amp;&amp; || 返回的值根据内容确定，不一定是布尔值。"></a><code>&amp;&amp; ||</code> 返回的值根据内容确定，不一定是布尔值。</h6><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a&gt;<span class="number">2</span> &amp;&amp; a&lt;<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a&gt;<span class="number">5</span> || a&lt;<span class="number">4</span>);</span><br><span class="line">a=a<span class="number">-3</span> || <span class="number">1</span>；</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li><li><h6 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h6><ul><li><h6 id="true"><a href="#true" class="headerlink" title="true"></a>true</h6><blockquote><p>true || true    ==&gt;    返回前面的值</p><p>true || false    ==&gt;    返回隐式转换布尔值为true的值</p><p>false || true    ==&gt;    返回隐式转换布尔值为true的值</p><p>false || false    ==&gt;    返回最后一个false的值</p></blockquote></li><li><p>false</p><blockquote><p>true &amp;&amp; true    ==&gt;    返回第二个true的结果</p><p>true &amp;&amp; false    ==&gt;    返回false的结果</p><p>false &amp;&amp; true    ==&gt;    返回false的结果</p><p>false &amp;&amp; false    ==&gt;    返回第一个false的结果</p></blockquote></li></ul></li><li><p>在if语句判断赋值时也会出现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line">o=<span class="number">0</span> || &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;或者</span><br><span class="line"><span class="keyword">if</span>(!o)&#123;</span><br><span class="line">    <span class="comment">//if判断变量o是否已经赋值，只有o等于 6 种值时（变量o未赋值），会进入if语句块，对o重新赋值</span></span><br><span class="line">    o=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><ol start="4"><li><h5 id="位运算符："><a href="#位运算符：" class="headerlink" title="位运算符："></a>位运算符：</h5><ol><li><h5 id="位非：加一取负；"><a href="#位非：加一取负；" class="headerlink" title="~位非：加一取负；"></a><code>~</code>位非：加一取负；</h5><h6 id="：双非，还原取整，任何内容转换为数值；"><a href="#：双非，还原取整，任何内容转换为数值；" class="headerlink" title="~~：双非，还原取整，任何内容转换为数值；"></a><code>~~</code>：双非，还原取整，任何内容转换为数值；</h6><ul><li><h6 id="非数值变为0；"><a href="#非数值变为0；" class="headerlink" title="非数值变为0；"></a>非数值变为0；</h6></li><li><h6 id="其他变为数值；"><a href="#其他变为数值；" class="headerlink" title="其他变为数值；"></a>其他变为数值；</h6></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">-1</span>;</span><br><span class="line">位非变为<span class="number">0</span>；</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"abcd"</span>;</span><br><span class="line"><span class="comment">//str.indexof("f")==&gt;当找不到会返回 -1；</span></span><br><span class="line"><span class="keyword">if</span>(~str.indexof(<span class="string">"d"</span>))&#123;</span><br><span class="line"><span class="comment">//表示能找到的话进入if语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!~str.indexof(<span class="string">"d"</span>))&#123;</span><br><span class="line">    <span class="comment">//表示找不到进入if语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="amp-与运算"><a href="#amp-与运算" class="headerlink" title="&amp;与运算"></a><code>&amp;</code>与运算</h5><ul><li><h6 id="任何数-amp-2的结果：2-0"><a href="#任何数-amp-2的结果：2-0" class="headerlink" title="任何数 &amp;2的结果：2/0"></a>任何数 <code>&amp;2</code>的结果：2/0</h6></li><li><h6 id="任何数-amp-3的结果：3-2-1-0"><a href="#任何数-amp-3的结果：3-2-1-0" class="headerlink" title="任何数 &amp;3的结果：3/2/1/0\"></a>任何数 <code>&amp;3</code>的结果：3/2/1/0\</h6></li></ul></li><li><h5 id="或运算"><a href="#或运算" class="headerlink" title="|或运算"></a><code>|</code>或运算</h5></li><li><h5 id="异或：相同为0，不同为1；"><a href="#异或：相同为0，不同为1；" class="headerlink" title="^异或：相同为0，不同为1；"></a><code>^</code>异或：相同为0，不同为1；</h5><ul><li><h6 id="对称加密；"><a href="#对称加密；" class="headerlink" title="对称加密；"></a>对称加密；</h6></li><li><h6 id="非对称加密；"><a href="#非对称加密；" class="headerlink" title="非对称加密；"></a>非对称加密；</h6></li></ul></li><li><h5 id="左移-lt-lt-32个字节-4位-到头变成1"><a href="#左移-lt-lt-32个字节-4位-到头变成1" class="headerlink" title="左移 &lt;&lt;  32个字节 4位 到头变成1"></a>左移 <code>&lt;&lt;</code>  32个字节 4位 到头变成1</h5></li><li><h5 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移 &gt;&gt;"></a>右移 <code>&gt;&gt;</code></h5></li></ol></li><li><h5 id="三目运算符：-条件运算符"><a href="#三目运算符：-条件运算符" class="headerlink" title="三目运算符：/条件运算符"></a>三目运算符：/条件运算符</h5><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b=a&gt;<span class="number">3</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果a&gt;3，返回1 否则0；</span></span><br></pre></td></tr></table></figure></li><li><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=a&gt;<span class="number">1</span> ? <span class="number">10</span> : a&lt;<span class="number">0</span> ? <span class="number">5</span> : <span class="number">0</span>;<span class="comment">//b=?</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">a -=<span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"><span class="comment">//a -=0 ? 0 : 1;</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h3 id="运算有关的条件判断："><a href="#运算有关的条件判断：" class="headerlink" title="运算有关的条件判断："></a>运算有关的条件判断：</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a==<span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="comment">//var a;</span></span><br><span class="line">    <span class="comment">//var a=undefined;</span></span><br><span class="line">    <span class="comment">//var a=null;当a等于这些值的时候，才被允许进入if语句；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//var a=false;</span></span><br><span class="line">    <span class="comment">//var a="";</span></span><br><span class="line">    <span class="comment">//var a="     ";</span></span><br><span class="line">    <span class="comment">//var a=0;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// var a=undefined</span></span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="comment">//只有a未定义的时候才符合条件;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    <span class="comment">//if条件返回值为true/false；</span></span><br><span class="line">    <span class="comment">//当返回值为true时，进入条件语句块，返回的值不是布尔值时，会自动隐式转换为布尔值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0undefinednull""falseNaN;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//true;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0undefinednull""falseNaN;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0""false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!a)&#123;</span><br><span class="line">    <span class="comment">//只有当a的值为 ： 0""falseundefinednullNaN;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><h4 id="console-log-gt-false"><a href="#console-log-gt-false" class="headerlink" title="console.log([]==[]);==&gt;false"></a><code>console.log([]==[]);</code>==&gt;false</h4><ul><li><h5 id="数组是对象类型，也就是引用类型"><a href="#数组是对象类型，也就是引用类型" class="headerlink" title="数组是对象类型，也就是引用类型"></a>数组是对象类型，也就是引用类型</h5></li></ul><h4 id="console-log-gt-true"><a href="#console-log-gt-true" class="headerlink" title="console.log([]==![]);==&gt;true"></a><code>console.log([]==![]);</code>==&gt;true</h4><ul><li><h5 id="因为-quot-quot-false"><a href="#因为-quot-quot-false" class="headerlink" title="因为 &quot;&quot;==false"></a>因为 <code>&quot;&quot;==false</code></h5></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[1,2,3]==&gt;"1,2,3";</span></span><br><span class="line"><span class="comment">//[1]==&gt;"1";</span></span><br><span class="line"><span class="comment">//[]==&gt;""</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.log([1]==1);</span></span><br><span class="line"><span class="comment">//console.log([]==0);</span></span><br><span class="line"><span class="comment">//console.log([]==null);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="进制："><a href="#进制：" class="headerlink" title="进制："></a>进制：</h3><ol><li><h4 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h4></li><li><h4 id="ASCII-GB2312-GB5"><a href="#ASCII-GB2312-GB5" class="headerlink" title="ASCII  GB2312 GB5"></a>ASCII  GB2312 GB5</h4></li><li><h4 id="Unicode-万国码-（UTF-8使用八进制的万国码）"><a href="#Unicode-万国码-（UTF-8使用八进制的万国码）" class="headerlink" title="Unicode 万国码 （UTF-8使用八进制的万国码）"></a>Unicode 万国码 （UTF-8使用八进制的万国码）</h4></li></ol><h3 id="图像：像素点"><a href="#图像：像素点" class="headerlink" title="图像：像素点"></a>图像：像素点</h3><ul><li><h4 id="每英寸96个像素点-gt-字"><a href="#每英寸96个像素点-gt-字" class="headerlink" title="每英寸96个像素点 ==&gt;字"></a>每英寸96个像素点 ==&gt;字</h4></li><li><h4 id="每英寸72个像素点-gt-图"><a href="#每英寸72个像素点-gt-图" class="headerlink" title="每英寸72个像素点 ==&gt;图"></a>每英寸72个像素点 ==&gt;图</h4></li><li><h4 id="一个颜色占4个字节-一英寸图片（72-4-288B）"><a href="#一个颜色占4个字节-一英寸图片（72-4-288B）" class="headerlink" title="一个颜色占4个字节 一英寸图片（72*4=288B）"></a>一个颜色占4个字节 一英寸图片（72*4=288B）</h4></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;字符串、布尔值、数值之间的转换&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;运算有关的一些条件判断。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Study" scheme="http://ankang.icu/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript基础</title>
    <link href="http://ankang.icu/2021/03/15/21-03-17/"/>
    <id>http://ankang.icu/2021/03/15/21-03-17/</id>
    <published>2021-03-14T23:50:30.000Z</published>
    <updated>2021-03-27T08:36:39.494Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h5 id="JavaScript的引入方式"><a href="#JavaScript的引入方式" class="headerlink" title="JavaScript的引入方式"></a>JavaScript的引入方式</h5></li><li><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5></li><li><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5></li><li><h5 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h5></li></ol><a id="more"></a><h3 id="脚本后的标签调用不到"><a href="#脚本后的标签调用不到" class="headerlink" title="脚本后的标签调用不到"></a>脚本后的标签调用不到</h3><h3 id="标签上的script脚本"><a href="#标签上的script脚本" class="headerlink" title="标签上的script脚本"></a>标签上的script脚本</h3><ul><li><h4 id="HTML标签中只有事件可以添加JS"><a href="#HTML标签中只有事件可以添加JS" class="headerlink" title="HTML标签中只有事件可以添加JS"></a>HTML标签中只有事件可以添加JS</h4></li><li><h4 id="超链接a的href中可以添加javascript-console-log-‘abc’"><a href="#超链接a的href中可以添加javascript-console-log-‘abc’" class="headerlink" title="超链接a的href中可以添加javascript:console.log(‘abc’);"></a>超链接a的href中可以添加<code>javascript:console.log(‘abc’);</code></h4><ol><li><h5 id="lt-a-href-quot-javascript-console-log-39-cde-39-quot-gt-超链接-lt-a-gt"><a href="#lt-a-href-quot-javascript-console-log-39-cde-39-quot-gt-超链接-lt-a-gt" class="headerlink" title="&lt;a href=&quot;javascript:console.log(&#39;cde&#39;)&quot;&gt;超链接&lt;/a&gt;"></a><code>&lt;a href=&quot;javascript:console.log(&#39;cde&#39;)&quot;&gt;超链接&lt;/a&gt;</code></h5></li><li><h5 id="lt-a-href-quot-javascript-void-0-quot-gt-超链接-lt-a-gt"><a href="#lt-a-href-quot-javascript-void-0-quot-gt-超链接-lt-a-gt" class="headerlink" title="&lt;a href=&quot;javascript:void(0)&quot;&gt;超链接&lt;/a&gt;"></a><code>&lt;a href=&quot;javascript:void(0)&quot;&gt;超链接&lt;/a&gt;</code></h5></li><li><h5 id="lt-a-href-quot-quot-gt-超链接-lt-a-gt"><a href="#lt-a-href-quot-quot-gt-超链接-lt-a-gt" class="headerlink" title="&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;"></a><code>&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;</code></h5><blockquote><h5 id="void-0-不会产生浏览记录。-可以刷新页面"><a href="#void-0-不会产生浏览记录。-可以刷新页面" class="headerlink" title="void(0)不会产生浏览记录。#可以刷新页面"></a>void(0)不会产生浏览记录。#可以刷新页面</h5></blockquote></li></ol></li></ul><h3 id="外部引入1"><a href="#外部引入1" class="headerlink" title="外部引入1"></a>外部引入1</h3><h4 id="写下head标签内部"><a href="#写下head标签内部" class="headerlink" title="写下head标签内部"></a>写下<code>head</code>标签内部</h4><p><code>&lt;script src=&quot;./a.js&quot;&gt;&lt;/script&gt;</code></p><h5 id="拥塞-同步"><a href="#拥塞-同步" class="headerlink" title="拥塞  同步"></a><strong>拥塞  <em>同步</em></strong></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./a.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./b.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容"><a href="#当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容" class="headerlink" title="当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容"></a>当有多个引入标签时，上一个标签加载解析执行完才会引入下一个标签内容</h6><p><strong>拥塞  <em>异步</em></strong></p><h6 id="当script标签中添加async可以同时加载"><a href="#当script标签中添加async可以同时加载" class="headerlink" title="当script标签中添加async可以同时加载"></a>当script标签中添加<code>async</code>可以同时加载</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./a.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./b.js"</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="defer-在最后执行的代码"><a href="#defer-在最后执行的代码" class="headerlink" title="defer 在最后执行的代码"></a><code>defer</code> 在最后执行的代码</h4><blockquote><p><em>a.js中想要调用b.js的内容</em></p></blockquote><h3 id="DOM树-CSS树-gt-gt-渲染树"><a href="#DOM树-CSS树-gt-gt-渲染树" class="headerlink" title="DOM树+CSS树===&gt;&gt;渲染树"></a>DOM树+CSS树===&gt;&gt;渲染树</h3><h3 id="外部导入2"><a href="#外部导入2" class="headerlink" title="外部导入2"></a>外部导入2</h3><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line">import a from "./b.js";</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><h5 id="标签中，script中都可，行注释：Ctrl-块注释：alt-shift-A。"><a href="#标签中，script中都可，行注释：Ctrl-块注释：alt-shift-A。" class="headerlink" title="标签中，script中都可，行注释：Ctrl+/,块注释：alt+shift+A。"></a>标签中，script中都可，行注释：<code>Ctrl+/</code>,块注释：<code>alt+shift+A</code>。</h5></li><li><h5 id="混淆代码：-块注释"><a href="#混淆代码：-块注释" class="headerlink" title="混淆代码：   块注释"></a>混淆代码：   <em>块注释</em></h5></li><li><h5 id="TODO高亮注释标识未来需要继续编写的代码。"><a href="#TODO高亮注释标识未来需要继续编写的代码。" class="headerlink" title="TODO高亮注释标识未来需要继续编写的代码。"></a><code>TODO</code>高亮注释标识未来需要继续编写的代码。</h5></li></ul><h3 id="控制台："><a href="#控制台：" class="headerlink" title="控制台："></a>控制台：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span><br><span class="line"><span class="built_in">console</span>.trace(<span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">console</span>.debug(<span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"这里有错误"</span>);</span><br></pre></td></tr></table></figure><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ol><li><h5 id="alter-quot-弹出窗-quot"><a href="#alter-quot-弹出窗-quot" class="headerlink" title="alter(&quot;弹出窗&quot;);"></a><code>alter(&quot;弹出窗&quot;);</code></h5></li><li><h5 id="corfirm-quot-提示框-确定取消框-quot"><a href="#corfirm-quot-提示框-确定取消框-quot" class="headerlink" title="corfirm(&quot;提示框/确定取消框&quot;);"></a><code>corfirm(&quot;提示框/确定取消框&quot;);</code></h5></li><li><h5 id="prompt-quot-今年你多大了-quot-18-输入弹出框"><a href="#prompt-quot-今年你多大了-quot-18-输入弹出框" class="headerlink" title="prompt(&quot;今年你多大了&quot;,18);输入弹出框"></a><code>prompt(&quot;今年你多大了&quot;,18);</code>输入弹出框</h5></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">div1.innerHTML=<span class="string">"abc"</span>;</span><br><span class="line">div1.style.color=<span class="string">"red"</span>;</span><br><span class="line">div.style.backgroundColor=<span class="string">"blue"</span>;</span><br><span class="line">div1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div1.innerHTML=<span class="string">"我点击了"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置行内样式</p></blockquote></li></ol><h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><ul><li><h4 id="每个变量都应该先声明"><a href="#每个变量都应该先声明" class="headerlink" title="每个变量都应该先声明"></a>每个变量都应该先声明</h4></li><li><h4 id="变量的名称不能使用数字开头，必须使用（-）或者大小写的英文字母。"><a href="#变量的名称不能使用数字开头，必须使用（-）或者大小写的英文字母。" class="headerlink" title="变量的名称不能使用数字开头，必须使用（$/_）或者大小写的英文字母。"></a>变量的名称不能使用数字开头，必须使用（$/_）或者大小写的英文字母。</h4></li><li><h4 id="关键词和保留字不能作为变量名。"><a href="#关键词和保留字不能作为变量名。" class="headerlink" title="关键词和保留字不能作为变量名。"></a>关键词和保留字不能作为变量名。</h4></li><li><h4 id="变量命名："><a href="#变量命名：" class="headerlink" title="变量命名："></a>变量命名：</h4><ul><li><h6 id="普通变量名使用小写字母开始，驼峰式命名法，变量名要有意义。"><a href="#普通变量名使用小写字母开始，驼峰式命名法，变量名要有意义。" class="headerlink" title="普通变量名使用小写字母开始，驼峰式命名法，变量名要有意义。"></a>普通变量名使用小写字母开始，<em>驼峰式命名法</em>，变量名要有意义。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getLISTCount</span><br></pre></td></tr></table></figure></li><li><h6 id="临时变量、参数、局部变量使用-起头，驼峰式命名法"><a href="#临时变量、参数、局部变量使用-起头，驼峰式命名法" class="headerlink" title="临时变量、参数、局部变量使用_起头，驼峰式命名法"></a>临时变量、参数、局部变量使用_起头，驼峰式命名法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _num=<span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><h6 id="ES5中变量实际上是赋值给了window对象的一个属性-gt-不能使用window中的属性或者方法名作为变量名。"><a href="#ES5中变量实际上是赋值给了window对象的一个属性-gt-不能使用window中的属性或者方法名作为变量名。" class="headerlink" title="ES5中变量实际上是赋值给了window对象的一个属性==&gt;不能使用window中的属性或者方法名作为变量名。"></a>ES5中变量实际上是赋值给了window对象的一个属性==&gt;不能使用window中的属性或者方法名作为变量名。</h6><blockquote><h6 id="控制台蓝色数值-黑色字符串"><a href="#控制台蓝色数值-黑色字符串" class="headerlink" title="控制台蓝色数值 黑色字符串"></a>控制台蓝色数值 黑色字符串</h6></blockquote></li><li><h6 id="常量-ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。"><a href="#常量-ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。" class="headerlink" title="常量:ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。"></a>常量:ES6中才有常量，常量只有在第一次定义并且赋值，以后不能修改其值。</h6><h6 id="常量全部大写，并且使用-分割单词。"><a href="#常量全部大写，并且使用-分割单词。" class="headerlink" title="常量全部大写，并且使用_分割单词。"></a>常量全部大写，并且使用_分割单词。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EVENT_ID=<span class="string">"string"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><h6 id="弱类型：定义的变量类型可变"><a href="#弱类型：定义的变量类型可变" class="headerlink" title="弱类型：定义的变量类型可变"></a>弱类型：定义的变量类型可变</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">4</span>;</span><br><span class="line">a=<span class="number">5</span>;</span><br><span class="line">a=<span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><h6 id="弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。"><a href="#弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。" class="headerlink" title="弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。"></a>弱类型不需要定义变量的类型，可以随意更改这个变量值得数据类型。</h6><ol><li><h5 id="字符型："><a href="#字符型：" class="headerlink" title="字符型："></a>字符型：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> a1=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> a2=<span class="string">`abc`</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="数值型："><a href="#数值型：" class="headerlink" title="数值型："></a>数值型：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b1=<span class="number">1.2</span>;</span><br><span class="line"><span class="keyword">var</span> b2=<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">var</span> b3=<span class="number">0x01</span>;<span class="comment">//16进制数值型</span></span><br><span class="line"><span class="keyword">var</span> b4=<span class="number">0047</span>;<span class="comment">//8进制数值型</span></span><br><span class="line"><span class="keyword">var</span> b5=<span class="number">1.23e+5</span>;<span class="comment">//科学计数法</span></span><br><span class="line"><span class="keyword">var</span> b6=<span class="number">2.3e-6</span>;<span class="comment">//科学计数法</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="布尔值（true-false）"><a href="#布尔值（true-false）" class="headerlink" title="布尔值（true/false）"></a>布尔值（true/false）</h5></li><li><h5 id="未定义"><a href="#未定义" class="headerlink" title="未定义"></a>未定义</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> d1;</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><h6 id="一个定义为undefined，一个未定义默认为undefined。"><a href="#一个定义为undefined，一个未定义默认为undefined。" class="headerlink" title="一个定义为undefined，一个未定义默认为undefined。"></a>一个定义为undefined，一个未定义默认为undefined。</h6></blockquote><ol start="5"><li><h5 id="空（null）："><a href="#空（null）：" class="headerlink" title="空（null）："></a>空（null）：</h5><h6 id="针对对象设置为null，用于清除对象的引用关系"><a href="#针对对象设置为null，用于清除对象的引用关系" class="headerlink" title="针对对象设置为null，用于清除对象的引用关系"></a>针对对象设置为null，用于清除对象的引用关系</h6></li><li><h5 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h5><ul><li><h6 id="var-o-a-1-b-2"><a href="#var-o-a-1-b-2" class="headerlink" title="var o={a:1,b:2};"></a><code>var o={a:1,b:2};</code></h6></li></ul></li></ol></li><li><h4 id="数据类型转换："><a href="#数据类型转换：" class="headerlink" title="数据类型转换："></a>数据类型转换：</h4><ol><li><h5 id="数值型转换为字符型"><a href="#数值型转换为字符型" class="headerlink" title="数值型转换为字符型"></a>数值型转换为字符型</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><ol><li><h5 id="强制转换，通过String构造函数方法转换"><a href="#强制转换，通过String构造函数方法转换" class="headerlink" title="强制转换，通过String构造函数方法转换"></a>强制转换，通过String构造函数方法转换</h5><ul><li><code>String(a);</code></li></ul></li><li><h5 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=a.toString();</span><br></pre></td></tr></table></figure></li></ul><blockquote><h6 id="进制转换：参数中是数字，表示将变量转换为该数值的进制字符串"><a href="#进制转换：参数中是数字，表示将变量转换为该数值的进制字符串" class="headerlink" title="进制转换：参数中是数字，表示将变量转换为该数值的进制字符串"></a>进制转换：参数中是数字，表示将变量转换为该数值的进制字符串</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; a=a.toString(<span class="number">2</span>);<span class="comment">//2进制</span></span><br><span class="line">&gt; a=a.toString(<span class="number">16</span>);<span class="comment">//16进制</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol></li></ol></li></ul><ol start="2"><li><h5 id="保留小数点后几位："><a href="#保留小数点后几位：" class="headerlink" title="保留小数点后几位："></a>保留小数点后几位：</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=a.toFixed();</span><br><span class="line"><span class="comment">//带参数表示保留小数点后几位</span></span><br><span class="line"> <span class="comment">//四舍五入效果</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><ul><li><h5 id="大于0时，保留几位数值并且按照科学计数法来写"><a href="#大于0时，保留几位数值并且按照科学计数法来写" class="headerlink" title="大于0时，保留几位数值并且按照科学计数法来写"></a>大于0时，保留几位数值并且按照科学计数法来写</h5></li><li><h5 id="小于1时，保留几位有效数字"><a href="#小于1时，保留几位有效数字" class="headerlink" title="小于1时，保留几位有效数字"></a>小于1时，保留几位有效数字</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=a.toPrecision(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h5 id="保留小数点后几位的科学计数法"><a href="#保留小数点后几位的科学计数法" class="headerlink" title="保留小数点后几位的科学计数法"></a>保留小数点后几位的科学计数法</h5><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=a.toExponential(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;JavaScript的引入方式&quot;&gt;&lt;a href=&quot;#JavaScript的引入方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的引入方式&quot;&gt;&lt;/a&gt;JavaScript的引入方式&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;数据类型转换&quot;&gt;&lt;a href=&quot;#数据类型转换&quot; class=&quot;headerlink&quot; title=&quot;数据类型转换&quot;&gt;&lt;/a&gt;数据类型转换&lt;/h5&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Study" scheme="http://ankang.icu/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高阶函数</title>
    <link href="http://ankang.icu/2020/04/06/20-04-06/"/>
    <id>http://ankang.icu/2020/04/06/20-04-06/</id>
    <published>2020-04-06T05:40:48.000Z</published>
    <updated>2020-04-06T06:27:45.127Z</updated>
    
    <content type="html"><![CDATA[<p>1.filter函数<br>2.map函数<br>3.reduce函数<br>了解JavaScript中高阶函数的使用开发可以更加简洁<br><a id="more"></a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>首先定义一个数组：<br>    const nums = [50, 20, 101, 100, 10, 200, 33, 22]<br>完成三个需求：<br>    1.取出所有小于100的数字<br>    2.将取出的数进行 乘 2 转化<br>    3.将转化后的所有数字相加,得到最终的结果</p><h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><p>解决需求1：<br>向filter函数传入一个带参数的方法，函数内部会创建一个数组，根据返回的布尔类型的值，把方法中满足条件/返回值为true的加入数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> newNums = nums.filter(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n &lt; 100</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newNums);</span><br></pre></td></tr></table></figure></p><p>执行结果：<br>[ 50, 20, 10, 33, 22 ]</p><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>解决需求2：<br>map函数对数组中所有内容进行转化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> new2Nums = newNums.map(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n * 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(new2Nums);</span><br></pre></td></tr></table></figure></p><p>执行结果：<br>[ 100, 40, 20, 66, 44 ]</p><h3 id="reduce函数的使用"><a href="#reduce函数的使用" class="headerlink" title="reduce函数的使用"></a>reduce函数的使用</h3><p>解决需求3：<br>reduce函数的作用对数组中所有的内容进行汇总<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> final = new2Nums.reduce(<span class="keyword">function</span> (preValue, n) &#123; //preValue参数表示上一个数</span><br><span class="line">  <span class="built_in">return</span> preValue + n</span><br><span class="line">&#125;, 0) //这里的0表示reduce函数的初始值/preValue的初始值</span><br><span class="line">console.log(final);</span><br></pre></td></tr></table></figure></p><p>执行结果：<br>270</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> final = nums.filter(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n &lt; 100</span><br><span class="line">&#125;).map(<span class="keyword">function</span> (n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n * 2</span><br><span class="line">&#125;).reduce(<span class="keyword">function</span> (prevValue, n) &#123;</span><br><span class="line">  <span class="built_in">return</span> prevValue + n</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(final);</span><br></pre></td></tr></table></figure><p>结果同样为：<br>270</p><p>或者使用箭头函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> final = nums.filter(n =&gt; n &lt; 100).map(n =&gt; n * 2).reduce((pre, n) =&gt; pre + n);</span><br><span class="line">console.log(final);</span><br></pre></td></tr></table></figure></p><p>这样可以一行得到结果，结果同样正确。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.filter函数&lt;br&gt;2.map函数&lt;br&gt;3.reduce函数&lt;br&gt;了解JavaScript中高阶函数的使用开发可以更加简洁&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ankang.icu/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://ankang.icu/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>带符号数的表示</title>
    <link href="http://ankang.icu/2020/03/06/20-03-06/"/>
    <id>http://ankang.icu/2020/03/06/20-03-06/</id>
    <published>2020-03-06T03:11:10.000Z</published>
    <updated>2020-04-06T06:32:24.309Z</updated>
    
    <content type="html"><![CDATA[<p>带符号数的表示: 原码、反码和补码;定点表示和浮点表示;<br><a id="more"></a></p><h2 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h2><p>约定:<br>    最高为符号位<br>    ‘0’表示正数’+’;<br>    ‘1’表示负数’-‘;</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>最高位为符号位,非符号位为该数字绝对值的二进制表示<br>“0”的两种表示形式：<br>               [+0]的原码为: 0 0000000<br>               [-0]的原码为: 1 0000000</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 127的原码为0 1111111</span><br><span class="line">-127的原码为1 1111111</span><br></pre></td></tr></table></figure></p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>分为正数的反码和负数的反码</p><p>正数:<br>    反码与原码一样<br>负数:<br>    最高位(符号位)不变,数值部分’按位取反’;<br>“0”的两种表示形式:<br>        [+0]的反码为: 0 0000000<br>        [-0]的反码为: 1 1111111</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 127的反码为0 1111111</span><br><span class="line">-127的反码为1 0000000</span><br></pre></td></tr></table></figure></p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>同样分为正数和负数</p><p>正数:<br>    补码与原码一样<br>负数:<br>    最高位(符号位)不变,数值部分’按位取反’,再加’1’;<br>“0”的表示形式：<br>    [+0]的补码=[-0]的补码= 0 0000000</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 127的补码为0 1111111</span><br><span class="line">-127的补码为1 0000001</span><br></pre></td></tr></table></figure></p><p>或者负数的补码可以简单的理解为:<br>    原码的符号位不变,数值部分:从右向左到第一个’1’(包括)止不变,左边数’取反’;</p><p>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原码为: 1 00110 10</span><br><span class="line">补码为: 1 11001 10</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.正数的原码、反码、补码是一样的,不变；<br>2.负数的反码是符号位不变,数值部分按位取反;补码为反码加’1’;<br>3.表示范围:<br>    原码:[+127～-127]<br>    反码:[+127～-127]<br>    补码:[+127～-128]<br>        (因为’1 0000000’不再表示为’-0’)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;带符号数的表示: 原码、反码和补码;定点表示和浮点表示;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="School" scheme="http://ankang.icu/tags/School/"/>
    
      <category term="组成原理" scheme="http://ankang.icu/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
